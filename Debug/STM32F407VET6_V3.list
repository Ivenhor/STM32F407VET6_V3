
STM32F407VET6_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  0800adf8  0800adf8  0001adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b52c  0800b52c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b52c  0800b52c  0001b52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b534  0800b534  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b534  0800b534  0001b534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b538  0800b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001e0  0800b71c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800b71c  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b95e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c0  00000000  00000000  0003bb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0003ef30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  000402a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241c8  00000000  00000000  000414f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018808  00000000  00000000  000656b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15c3  00000000  00000000  0007dec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f483  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d0  00000000  00000000  0014f4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800addc 	.word	0x0800addc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800addc 	.word	0x0800addc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>:
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b087      	sub	sp, #28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	4623      	mov	r3, r4
 8000eb0:	80fb      	strh	r3, [r7, #6]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 8000ed4:	887a      	ldrh	r2, [r7, #2]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee2:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8000ee6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef2:	d501      	bpl.n	8000ef8 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8000efe:	883a      	ldrh	r2, [r7, #0]
 8000f00:	88bb      	ldrh	r3, [r7, #4]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f0c:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8000f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	d501      	bpl.n	8000f22 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8000f22:	7cfb      	ldrb	r3, [r7, #19]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d104      	bne.n	8000f32 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	88fb      	ldrh	r3, [r7, #6]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	82fb      	strh	r3, [r7, #22]
 8000f30:	e003      	b.n	8000f3a <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8000f32:	88fa      	ldrh	r2, [r7, #6]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8000f3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f3c:	8afa      	ldrh	r2, [r7, #22]
 8000f3e:	88b9      	ldrh	r1, [r7, #4]
 8000f40:	88f8      	ldrh	r0, [r7, #6]
 8000f42:	f000 fd0f 	bl	8001964 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8000f46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f48:	8afa      	ldrh	r2, [r7, #22]
 8000f4a:	8839      	ldrh	r1, [r7, #0]
 8000f4c:	88f8      	ldrh	r0, [r7, #6]
 8000f4e:	f000 fd09 	bl	8001964 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8000f52:	7cbb      	ldrb	r3, [r7, #18]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d104      	bne.n	8000f62 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8000f58:	883a      	ldrh	r2, [r7, #0]
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	82bb      	strh	r3, [r7, #20]
 8000f60:	e003      	b.n	8000f6a <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8000f62:	88ba      	ldrh	r2, [r7, #4]
 8000f64:	883b      	ldrh	r3, [r7, #0]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8000f6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f6c:	8aba      	ldrh	r2, [r7, #20]
 8000f6e:	88b9      	ldrh	r1, [r7, #4]
 8000f70:	88f8      	ldrh	r0, [r7, #6]
 8000f72:	f000 fd3b 	bl	80019ec <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8000f76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f78:	8aba      	ldrh	r2, [r7, #20]
 8000f7a:	88b9      	ldrh	r1, [r7, #4]
 8000f7c:	8878      	ldrh	r0, [r7, #2]
 8000f7e:	f000 fd35 	bl	80019ec <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8000f82:	8afb      	ldrh	r3, [r7, #22]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 8000f88:	8abb      	ldrh	r3, [r7, #20]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 8000f8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000f90:	8839      	ldrh	r1, [r7, #0]
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fbbf 	bl	8001718 <ILI9341_Draw_Pixel>
	}
	
}
 8000f9a:	bf00      	nop
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}
	...

08000fa4 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80bb      	strh	r3, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	803b      	strh	r3, [r7, #0]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d802      	bhi.n	8000fd2 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	e002      	b.n	8000fd8 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	3b20      	subs	r3, #32
 8000fd6:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	753b      	strb	r3, [r7, #20]
 8000fdc:	e012      	b.n	8001004 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000fde:	7dfa      	ldrb	r2, [r7, #23]
 8000fe0:	7d38      	ldrb	r0, [r7, #20]
 8000fe2:	7d39      	ldrb	r1, [r7, #20]
 8000fe4:	4c39      	ldr	r4, [pc, #228]	; (80010cc <ILI9341_Draw_Char+0x128>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4423      	add	r3, r4
 8000ff0:	4403      	add	r3, r0
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	f107 0318 	add.w	r3, r7, #24
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000ffe:	7d3b      	ldrb	r3, [r7, #20]
 8001000:	3301      	adds	r3, #1
 8001002:	753b      	strb	r3, [r7, #20]
 8001004:	7d3b      	ldrb	r3, [r7, #20]
 8001006:	2b05      	cmp	r3, #5
 8001008:	d9e9      	bls.n	8000fde <ILI9341_Draw_Char+0x3a>
		}
		


    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800100a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800100c:	461a      	mov	r2, r3
 800100e:	0052      	lsls	r2, r2, #1
 8001010:	4413      	add	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b29a      	uxth	r2, r3
 8001016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	b29c      	uxth	r4, r3
 800101c:	8879      	ldrh	r1, [r7, #2]
 800101e:	88b8      	ldrh	r0, [r7, #4]
 8001020:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	4623      	mov	r3, r4
 8001026:	f000 fc41 	bl	80018ac <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800102a:	2300      	movs	r3, #0
 800102c:	757b      	strb	r3, [r7, #21]
 800102e:	e044      	b.n	80010ba <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001030:	2300      	movs	r3, #0
 8001032:	75bb      	strb	r3, [r7, #22]
 8001034:	e03b      	b.n	80010ae <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 8001036:	7d7b      	ldrb	r3, [r7, #21]
 8001038:	f107 0218 	add.w	r2, r7, #24
 800103c:	4413      	add	r3, r2
 800103e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001042:	461a      	mov	r2, r3
 8001044:	7dbb      	ldrb	r3, [r7, #22]
 8001046:	fa42 f303 	asr.w	r3, r2, r3
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d02a      	beq.n	80010a8 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 8001052:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001054:	2b01      	cmp	r3, #1
 8001056:	d10e      	bne.n	8001076 <ILI9341_Draw_Char+0xd2>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001058:	7d7b      	ldrb	r3, [r7, #21]
 800105a:	b29a      	uxth	r2, r3
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	4413      	add	r3, r2
 8001060:	b298      	uxth	r0, r3
 8001062:	7dbb      	ldrb	r3, [r7, #22]
 8001064:	b29a      	uxth	r2, r3
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	4413      	add	r3, r2
 800106a:	b29b      	uxth	r3, r3
 800106c:	883a      	ldrh	r2, [r7, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	f000 fb52 	bl	8001718 <ILI9341_Draw_Pixel>
 8001074:	e018      	b.n	80010a8 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001076:	7d7b      	ldrb	r3, [r7, #21]
 8001078:	b29b      	uxth	r3, r3
 800107a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800107c:	fb12 f303 	smulbb	r3, r2, r3
 8001080:	b29a      	uxth	r2, r3
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	b298      	uxth	r0, r3
 8001088:	7dbb      	ldrb	r3, [r7, #22]
 800108a:	b29b      	uxth	r3, r3
 800108c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800108e:	fb12 f303 	smulbb	r3, r2, r3
 8001092:	b29a      	uxth	r2, r3
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	4413      	add	r3, r2
 8001098:	b299      	uxth	r1, r3
 800109a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800109c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800109e:	883b      	ldrh	r3, [r7, #0]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4623      	mov	r3, r4
 80010a4:	f000 fc02 	bl	80018ac <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80010a8:	7dbb      	ldrb	r3, [r7, #22]
 80010aa:	3301      	adds	r3, #1
 80010ac:	75bb      	strb	r3, [r7, #22]
 80010ae:	7dbb      	ldrb	r3, [r7, #22]
 80010b0:	2b07      	cmp	r3, #7
 80010b2:	d9c0      	bls.n	8001036 <ILI9341_Draw_Char+0x92>
    for (j=0; j<CHAR_WIDTH; j++) {
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	3301      	adds	r3, #1
 80010b8:	757b      	strb	r3, [r7, #21]
 80010ba:	7d7b      	ldrb	r3, [r7, #21]
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d9b7      	bls.n	8001030 <ILI9341_Draw_Char+0x8c>
							}
            }						
        }
    }

}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd90      	pop	{r4, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	0800aef4 	.word	0x0800aef4

080010d0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	4608      	mov	r0, r1
 80010da:	4611      	mov	r1, r2
 80010dc:	461a      	mov	r2, r3
 80010de:	4603      	mov	r3, r0
 80010e0:	817b      	strh	r3, [r7, #10]
 80010e2:	460b      	mov	r3, r1
 80010e4:	813b      	strh	r3, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 80010ea:	e016      	b.n	800111a <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60fa      	str	r2, [r7, #12]
 80010f2:	7818      	ldrb	r0, [r3, #0]
 80010f4:	88fc      	ldrh	r4, [r7, #6]
 80010f6:	893a      	ldrh	r2, [r7, #8]
 80010f8:	8979      	ldrh	r1, [r7, #10]
 80010fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	8c3b      	ldrh	r3, [r7, #32]
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	4623      	mov	r3, r4
 8001104:	f7ff ff4e 	bl	8000fa4 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001108:	8c3b      	ldrh	r3, [r7, #32]
 800110a:	461a      	mov	r2, r3
 800110c:	0052      	lsls	r2, r2, #1
 800110e:	4413      	add	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	b29a      	uxth	r2, r3
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	4413      	add	r3, r2
 8001118:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1e4      	bne.n	80010ec <ILI9341_Draw_Text+0x1c>
    }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
MX_SPI1_Init();																							//SPI INIT
 8001130:	f002 fcf4 	bl	8003b1c <MX_SPI1_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001134:	f000 fc9e 	bl	8001a74 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001138:	2200      	movs	r2, #0
 800113a:	2101      	movs	r1, #1
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <ILI9341_SPI_Init+0x1c>)
 800113e:	f003 fc69 	bl	8004a14 <HAL_GPIO_WritePin>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020400 	.word	0x40020400

0800114c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001156:	1df9      	adds	r1, r7, #7
 8001158:	2301      	movs	r3, #1
 800115a:	2201      	movs	r2, #1
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <ILI9341_SPI_Send+0x20>)
 800115e:	f005 fa80 	bl	8006662 <HAL_SPI_Transmit>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000031c 	.word	0x2000031c

08001170 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	2101      	movs	r1, #1
 800117e:	480a      	ldr	r0, [pc, #40]	; (80011a8 <ILI9341_Write_Command+0x38>)
 8001180:	f003 fc48 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001184:	2200      	movs	r2, #0
 8001186:	2110      	movs	r1, #16
 8001188:	4808      	ldr	r0, [pc, #32]	; (80011ac <ILI9341_Write_Command+0x3c>)
 800118a:	f003 fc43 	bl	8004a14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffdb 	bl	800114c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001196:	2201      	movs	r2, #1
 8001198:	2101      	movs	r1, #1
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <ILI9341_Write_Command+0x38>)
 800119c:	f003 fc3a 	bl	8004a14 <HAL_GPIO_WritePin>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020400 	.word	0x40020400
 80011ac:	40020800 	.word	0x40020800

080011b0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80011ba:	2201      	movs	r2, #1
 80011bc:	2110      	movs	r1, #16
 80011be:	480a      	ldr	r0, [pc, #40]	; (80011e8 <ILI9341_Write_Data+0x38>)
 80011c0:	f003 fc28 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2101      	movs	r1, #1
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <ILI9341_Write_Data+0x3c>)
 80011ca:	f003 fc23 	bl	8004a14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ffbb 	bl	800114c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2101      	movs	r1, #1
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <ILI9341_Write_Data+0x3c>)
 80011dc:	f003 fc1a 	bl	8004a14 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020400 	.word	0x40020400

080011f0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4604      	mov	r4, r0
 80011f8:	4608      	mov	r0, r1
 80011fa:	4611      	mov	r1, r2
 80011fc:	461a      	mov	r2, r3
 80011fe:	4623      	mov	r3, r4
 8001200:	80fb      	strh	r3, [r7, #6]
 8001202:	4603      	mov	r3, r0
 8001204:	80bb      	strh	r3, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	807b      	strh	r3, [r7, #2]
 800120a:	4613      	mov	r3, r2
 800120c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800120e:	202a      	movs	r0, #42	; 0x2a
 8001210:	f7ff ffae 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	b29b      	uxth	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffc7 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffc2 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	0a1b      	lsrs	r3, r3, #8
 8001230:	b29b      	uxth	r3, r3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffbb 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffb6 	bl	80011b0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001244:	202b      	movs	r0, #43	; 0x2b
 8001246:	f7ff ff93 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800124a:	88bb      	ldrh	r3, [r7, #4]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ffac 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffa7 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001262:	883b      	ldrh	r3, [r7, #0]
 8001264:	0a1b      	lsrs	r3, r3, #8
 8001266:	b29b      	uxth	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ffa0 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001270:	883b      	ldrh	r3, [r7, #0]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff9b 	bl	80011b0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800127a:	202c      	movs	r0, #44	; 0x2c
 800127c:	f7ff ff78 	bl	8001170 <ILI9341_Write_Command>
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}

08001288 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	2120      	movs	r1, #32
 8001290:	480a      	ldr	r0, [pc, #40]	; (80012bc <ILI9341_Reset+0x34>)
 8001292:	f003 fbbf 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001296:	20c8      	movs	r0, #200	; 0xc8
 8001298:	f003 f8d2 	bl	8004440 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <ILI9341_Reset+0x38>)
 80012a2:	f003 fbb7 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80012a6:	20c8      	movs	r0, #200	; 0xc8
 80012a8:	f003 f8ca 	bl	8004440 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80012ac:	2201      	movs	r2, #1
 80012ae:	2120      	movs	r1, #32
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <ILI9341_Reset+0x34>)
 80012b2:	f003 fbaf 	bl	8004a14 <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020400 	.word	0x40020400

080012c4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80012d2:	2036      	movs	r0, #54	; 0x36
 80012d4:	f7ff ff4c 	bl	8001170 <ILI9341_Write_Command>
HAL_Delay(1);
 80012d8:	2001      	movs	r0, #1
 80012da:	f003 f8b1 	bl	8004440 <HAL_Delay>
	
switch(screen_rotation) 
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d837      	bhi.n	8001354 <ILI9341_Set_Rotation+0x90>
 80012e4:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <ILI9341_Set_Rotation+0x28>)
 80012e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ea:	bf00      	nop
 80012ec:	080012fd 	.word	0x080012fd
 80012f0:	08001313 	.word	0x08001313
 80012f4:	08001329 	.word	0x08001329
 80012f8:	0800133f 	.word	0x0800133f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80012fc:	2048      	movs	r0, #72	; 0x48
 80012fe:	f7ff ff57 	bl	80011b0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <ILI9341_Set_Rotation+0x9c>)
 8001304:	22f0      	movs	r2, #240	; 0xf0
 8001306:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <ILI9341_Set_Rotation+0xa0>)
 800130a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800130e:	801a      	strh	r2, [r3, #0]
			break;
 8001310:	e021      	b.n	8001356 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001312:	2028      	movs	r0, #40	; 0x28
 8001314:	f7ff ff4c 	bl	80011b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <ILI9341_Set_Rotation+0x9c>)
 800131a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800131e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <ILI9341_Set_Rotation+0xa0>)
 8001322:	22f0      	movs	r2, #240	; 0xf0
 8001324:	801a      	strh	r2, [r3, #0]
			break;
 8001326:	e016      	b.n	8001356 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001328:	2088      	movs	r0, #136	; 0x88
 800132a:	f7ff ff41 	bl	80011b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <ILI9341_Set_Rotation+0x9c>)
 8001330:	22f0      	movs	r2, #240	; 0xf0
 8001332:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <ILI9341_Set_Rotation+0xa0>)
 8001336:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800133a:	801a      	strh	r2, [r3, #0]
			break;
 800133c:	e00b      	b.n	8001356 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800133e:	20e8      	movs	r0, #232	; 0xe8
 8001340:	f7ff ff36 	bl	80011b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <ILI9341_Set_Rotation+0x9c>)
 8001346:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800134a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <ILI9341_Set_Rotation+0xa0>)
 800134e:	22f0      	movs	r2, #240	; 0xf0
 8001350:	801a      	strh	r2, [r3, #0]
			break;
 8001352:	e000      	b.n	8001356 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001354:	bf00      	nop
	}
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000002 	.word	0x20000002
 8001364:	20000000 	.word	0x20000000

08001368 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2120      	movs	r1, #32
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <ILI9341_Enable+0x14>)
 8001372:	f003 fb4f 	bl	8004a14 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40020800 	.word	0x40020800

08001380 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8001384:	f7ff fff0 	bl	8001368 <ILI9341_Enable>
ILI9341_SPI_Init();
 8001388:	f7ff fed0 	bl	800112c <ILI9341_SPI_Init>
ILI9341_Reset();
 800138c:	f7ff ff7c 	bl	8001288 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001390:	2001      	movs	r0, #1
 8001392:	f7ff feed 	bl	8001170 <ILI9341_Write_Command>
HAL_Delay(1000);
 8001396:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139a:	f003 f851 	bl	8004440 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800139e:	20cb      	movs	r0, #203	; 0xcb
 80013a0:	f7ff fee6 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80013a4:	2039      	movs	r0, #57	; 0x39
 80013a6:	f7ff ff03 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80013aa:	202c      	movs	r0, #44	; 0x2c
 80013ac:	f7ff ff00 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fefd 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80013b6:	2034      	movs	r0, #52	; 0x34
 80013b8:	f7ff fefa 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80013bc:	2002      	movs	r0, #2
 80013be:	f7ff fef7 	bl	80011b0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80013c2:	20cf      	movs	r0, #207	; 0xcf
 80013c4:	f7ff fed4 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fef1 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80013ce:	20c1      	movs	r0, #193	; 0xc1
 80013d0:	f7ff feee 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80013d4:	2030      	movs	r0, #48	; 0x30
 80013d6:	f7ff feeb 	bl	80011b0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80013da:	20e8      	movs	r0, #232	; 0xe8
 80013dc:	f7ff fec8 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80013e0:	2085      	movs	r0, #133	; 0x85
 80013e2:	f7ff fee5 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fee2 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80013ec:	2078      	movs	r0, #120	; 0x78
 80013ee:	f7ff fedf 	bl	80011b0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80013f2:	20ea      	movs	r0, #234	; 0xea
 80013f4:	f7ff febc 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fed9 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff fed6 	bl	80011b0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001404:	20ed      	movs	r0, #237	; 0xed
 8001406:	f7ff feb3 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800140a:	2064      	movs	r0, #100	; 0x64
 800140c:	f7ff fed0 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001410:	2003      	movs	r0, #3
 8001412:	f7ff fecd 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001416:	2012      	movs	r0, #18
 8001418:	f7ff feca 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 800141c:	2081      	movs	r0, #129	; 0x81
 800141e:	f7ff fec7 	bl	80011b0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001422:	20f7      	movs	r0, #247	; 0xf7
 8001424:	f7ff fea4 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001428:	2020      	movs	r0, #32
 800142a:	f7ff fec1 	bl	80011b0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800142e:	20c0      	movs	r0, #192	; 0xc0
 8001430:	f7ff fe9e 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001434:	2023      	movs	r0, #35	; 0x23
 8001436:	f7ff febb 	bl	80011b0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800143a:	20c1      	movs	r0, #193	; 0xc1
 800143c:	f7ff fe98 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001440:	2010      	movs	r0, #16
 8001442:	f7ff feb5 	bl	80011b0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001446:	20c5      	movs	r0, #197	; 0xc5
 8001448:	f7ff fe92 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800144c:	203e      	movs	r0, #62	; 0x3e
 800144e:	f7ff feaf 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001452:	2028      	movs	r0, #40	; 0x28
 8001454:	f7ff feac 	bl	80011b0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001458:	20c7      	movs	r0, #199	; 0xc7
 800145a:	f7ff fe89 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800145e:	2086      	movs	r0, #134	; 0x86
 8001460:	f7ff fea6 	bl	80011b0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001464:	2036      	movs	r0, #54	; 0x36
 8001466:	f7ff fe83 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800146a:	2048      	movs	r0, #72	; 0x48
 800146c:	f7ff fea0 	bl	80011b0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001470:	203a      	movs	r0, #58	; 0x3a
 8001472:	f7ff fe7d 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001476:	2055      	movs	r0, #85	; 0x55
 8001478:	f7ff fe9a 	bl	80011b0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800147c:	20b1      	movs	r0, #177	; 0xb1
 800147e:	f7ff fe77 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fe94 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001488:	2018      	movs	r0, #24
 800148a:	f7ff fe91 	bl	80011b0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800148e:	20b6      	movs	r0, #182	; 0xb6
 8001490:	f7ff fe6e 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001494:	2008      	movs	r0, #8
 8001496:	f7ff fe8b 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800149a:	2082      	movs	r0, #130	; 0x82
 800149c:	f7ff fe88 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80014a0:	2027      	movs	r0, #39	; 0x27
 80014a2:	f7ff fe85 	bl	80011b0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80014a6:	20f2      	movs	r0, #242	; 0xf2
 80014a8:	f7ff fe62 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff fe7f 	bl	80011b0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80014b2:	2026      	movs	r0, #38	; 0x26
 80014b4:	f7ff fe5c 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fe79 	bl	80011b0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80014be:	20e0      	movs	r0, #224	; 0xe0
 80014c0:	f7ff fe56 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80014c4:	200f      	movs	r0, #15
 80014c6:	f7ff fe73 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80014ca:	2031      	movs	r0, #49	; 0x31
 80014cc:	f7ff fe70 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80014d0:	202b      	movs	r0, #43	; 0x2b
 80014d2:	f7ff fe6d 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80014d6:	200c      	movs	r0, #12
 80014d8:	f7ff fe6a 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80014dc:	200e      	movs	r0, #14
 80014de:	f7ff fe67 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80014e2:	2008      	movs	r0, #8
 80014e4:	f7ff fe64 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80014e8:	204e      	movs	r0, #78	; 0x4e
 80014ea:	f7ff fe61 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80014ee:	20f1      	movs	r0, #241	; 0xf1
 80014f0:	f7ff fe5e 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80014f4:	2037      	movs	r0, #55	; 0x37
 80014f6:	f7ff fe5b 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80014fa:	2007      	movs	r0, #7
 80014fc:	f7ff fe58 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001500:	2010      	movs	r0, #16
 8001502:	f7ff fe55 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001506:	2003      	movs	r0, #3
 8001508:	f7ff fe52 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800150c:	200e      	movs	r0, #14
 800150e:	f7ff fe4f 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001512:	2009      	movs	r0, #9
 8001514:	f7ff fe4c 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fe49 	bl	80011b0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800151e:	20e1      	movs	r0, #225	; 0xe1
 8001520:	f7ff fe26 	bl	8001170 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff fe43 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800152a:	200e      	movs	r0, #14
 800152c:	f7ff fe40 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001530:	2014      	movs	r0, #20
 8001532:	f7ff fe3d 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001536:	2003      	movs	r0, #3
 8001538:	f7ff fe3a 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800153c:	2011      	movs	r0, #17
 800153e:	f7ff fe37 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001542:	2007      	movs	r0, #7
 8001544:	f7ff fe34 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001548:	2031      	movs	r0, #49	; 0x31
 800154a:	f7ff fe31 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800154e:	20c1      	movs	r0, #193	; 0xc1
 8001550:	f7ff fe2e 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001554:	2048      	movs	r0, #72	; 0x48
 8001556:	f7ff fe2b 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800155a:	2008      	movs	r0, #8
 800155c:	f7ff fe28 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001560:	200f      	movs	r0, #15
 8001562:	f7ff fe25 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001566:	200c      	movs	r0, #12
 8001568:	f7ff fe22 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800156c:	2031      	movs	r0, #49	; 0x31
 800156e:	f7ff fe1f 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001572:	2036      	movs	r0, #54	; 0x36
 8001574:	f7ff fe1c 	bl	80011b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001578:	200f      	movs	r0, #15
 800157a:	f7ff fe19 	bl	80011b0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800157e:	2011      	movs	r0, #17
 8001580:	f7ff fdf6 	bl	8001170 <ILI9341_Write_Command>
HAL_Delay(120);
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f002 ff5b 	bl	8004440 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800158a:	2029      	movs	r0, #41	; 0x29
 800158c:	f7ff fdf0 	bl	8001170 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001590:	2000      	movs	r0, #0
 8001592:	f7ff fe97 	bl	80012c4 <ILI9341_Set_Rotation>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	80fb      	strh	r3, [r7, #6]
 80015a8:	466b      	mov	r3, sp
 80015aa:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015b8:	d202      	bcs.n	80015c0 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	e002      	b.n	80015c6 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80015c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80015c6:	2201      	movs	r2, #1
 80015c8:	2110      	movs	r1, #16
 80015ca:	483d      	ldr	r0, [pc, #244]	; (80016c0 <ILI9341_Draw_Colour_Burst+0x124>)
 80015cc:	f003 fa22 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2101      	movs	r1, #1
 80015d4:	483b      	ldr	r0, [pc, #236]	; (80016c4 <ILI9341_Draw_Colour_Burst+0x128>)
 80015d6:	f003 fa1d 	bl	8004a14 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80015e4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80015e6:	4623      	mov	r3, r4
 80015e8:	3b01      	subs	r3, #1
 80015ea:	61fb      	str	r3, [r7, #28]
 80015ec:	4620      	mov	r0, r4
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	00cb      	lsls	r3, r1, #3
 80015fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001600:	00c2      	lsls	r2, r0, #3
 8001602:	4620      	mov	r0, r4
 8001604:	f04f 0100 	mov.w	r1, #0
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	00cb      	lsls	r3, r1, #3
 8001612:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001616:	00c2      	lsls	r2, r0, #3
 8001618:	1de3      	adds	r3, r4, #7
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	ebad 0d03 	sub.w	sp, sp, r3
 8001622:	466b      	mov	r3, sp
 8001624:	3300      	adds	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
 800162c:	e00e      	b.n	800164c <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	4413      	add	r3, r2
 8001634:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001638:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	3301      	adds	r3, #1
 800163e:	88fa      	ldrh	r2, [r7, #6]
 8001640:	b2d1      	uxtb	r1, r2
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	3302      	adds	r3, #2
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
 800164c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	429a      	cmp	r2, r3
 8001652:	d3ec      	bcc.n	800162e <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001662:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	fbb3 f2f2 	udiv	r2, r3, r2
 800166c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800166e:	fb01 f202 	mul.w	r2, r1, r2
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d010      	beq.n	800169e <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001680:	e009      	b.n	8001696 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001682:	69b9      	ldr	r1, [r7, #24]
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	b29a      	uxth	r2, r3
 8001688:	230a      	movs	r3, #10
 800168a:	480f      	ldr	r0, [pc, #60]	; (80016c8 <ILI9341_Draw_Colour_Burst+0x12c>)
 800168c:	f004 ffe9 	bl	8006662 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	3301      	adds	r3, #1
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3f1      	bcc.n	8001682 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	230a      	movs	r3, #10
 80016a6:	4808      	ldr	r0, [pc, #32]	; (80016c8 <ILI9341_Draw_Colour_Burst+0x12c>)
 80016a8:	f004 ffdb 	bl	8006662 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2101      	movs	r1, #1
 80016b0:	4804      	ldr	r0, [pc, #16]	; (80016c4 <ILI9341_Draw_Colour_Burst+0x128>)
 80016b2:	f003 f9af 	bl	8004a14 <HAL_GPIO_WritePin>
 80016b6:	46ad      	mov	sp, r5
}
 80016b8:	bf00      	nop
 80016ba:	3730      	adds	r7, #48	; 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bdb0      	pop	{r4, r5, r7, pc}
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020400 	.word	0x40020400
 80016c8:	2000031c 	.word	0x2000031c

080016cc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <ILI9341_Fill_Screen+0x44>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <ILI9341_Fill_Screen+0x48>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fd83 	bl	80011f0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <ILI9341_Fill_Screen+0x44>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <ILI9341_Fill_Screen+0x48>)
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	fb03 f302 	mul.w	r3, r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	4611      	mov	r1, r2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff4a 	bl	800159c <ILI9341_Draw_Colour_Burst>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000002 	.word	0x20000002
 8001714:	20000000 	.word	0x20000000

08001718 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	80bb      	strh	r3, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <ILI9341_Draw_Pixel+0x180>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	88fa      	ldrh	r2, [r7, #6]
 8001732:	429a      	cmp	r2, r3
 8001734:	f080 80ac 	bcs.w	8001890 <ILI9341_Draw_Pixel+0x178>
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <ILI9341_Draw_Pixel+0x184>)
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	88ba      	ldrh	r2, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	f080 80a5 	bcs.w	8001890 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001746:	2200      	movs	r2, #0
 8001748:	2110      	movs	r1, #16
 800174a:	4855      	ldr	r0, [pc, #340]	; (80018a0 <ILI9341_Draw_Pixel+0x188>)
 800174c:	f003 f962 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2101      	movs	r1, #1
 8001754:	4853      	ldr	r0, [pc, #332]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 8001756:	f003 f95d 	bl	8004a14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800175a:	202a      	movs	r0, #42	; 0x2a
 800175c:	f7ff fcf6 	bl	800114c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001760:	2201      	movs	r2, #1
 8001762:	2110      	movs	r1, #16
 8001764:	484e      	ldr	r0, [pc, #312]	; (80018a0 <ILI9341_Draw_Pixel+0x188>)
 8001766:	f003 f955 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800176a:	2201      	movs	r2, #1
 800176c:	2101      	movs	r1, #1
 800176e:	484d      	ldr	r0, [pc, #308]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 8001770:	f003 f950 	bl	8004a14 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001774:	2200      	movs	r2, #0
 8001776:	2101      	movs	r1, #1
 8001778:	484a      	ldr	r0, [pc, #296]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 800177a:	f003 f94b 	bl	8004a14 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	753b      	strb	r3, [r7, #20]
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	757b      	strb	r3, [r7, #21]
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	3301      	adds	r3, #1
 8001792:	121b      	asrs	r3, r3, #8
 8001794:	b2db      	uxtb	r3, r3
 8001796:	75bb      	strb	r3, [r7, #22]
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80017a2:	f107 0114 	add.w	r1, r7, #20
 80017a6:	2301      	movs	r3, #1
 80017a8:	2204      	movs	r2, #4
 80017aa:	483f      	ldr	r0, [pc, #252]	; (80018a8 <ILI9341_Draw_Pixel+0x190>)
 80017ac:	f004 ff59 	bl	8006662 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	2101      	movs	r1, #1
 80017b4:	483b      	ldr	r0, [pc, #236]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 80017b6:	f003 f92d 	bl	8004a14 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80017ba:	2200      	movs	r2, #0
 80017bc:	2110      	movs	r1, #16
 80017be:	4838      	ldr	r0, [pc, #224]	; (80018a0 <ILI9341_Draw_Pixel+0x188>)
 80017c0:	f003 f928 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80017c4:	2200      	movs	r2, #0
 80017c6:	2101      	movs	r1, #1
 80017c8:	4836      	ldr	r0, [pc, #216]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 80017ca:	f003 f923 	bl	8004a14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80017ce:	202b      	movs	r0, #43	; 0x2b
 80017d0:	f7ff fcbc 	bl	800114c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80017d4:	2201      	movs	r2, #1
 80017d6:	2110      	movs	r1, #16
 80017d8:	4831      	ldr	r0, [pc, #196]	; (80018a0 <ILI9341_Draw_Pixel+0x188>)
 80017da:	f003 f91b 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	4830      	ldr	r0, [pc, #192]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 80017e4:	f003 f916 	bl	8004a14 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2101      	movs	r1, #1
 80017ec:	482d      	ldr	r0, [pc, #180]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 80017ee:	f003 f911 	bl	8004a14 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	743b      	strb	r3, [r7, #16]
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	747b      	strb	r3, [r7, #17]
 8001802:	88bb      	ldrh	r3, [r7, #4]
 8001804:	3301      	adds	r3, #1
 8001806:	121b      	asrs	r3, r3, #8
 8001808:	b2db      	uxtb	r3, r3
 800180a:	74bb      	strb	r3, [r7, #18]
 800180c:	88bb      	ldrh	r3, [r7, #4]
 800180e:	b2db      	uxtb	r3, r3
 8001810:	3301      	adds	r3, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8001816:	f107 0110 	add.w	r1, r7, #16
 800181a:	2301      	movs	r3, #1
 800181c:	2204      	movs	r2, #4
 800181e:	4822      	ldr	r0, [pc, #136]	; (80018a8 <ILI9341_Draw_Pixel+0x190>)
 8001820:	f004 ff1f 	bl	8006662 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2101      	movs	r1, #1
 8001828:	481e      	ldr	r0, [pc, #120]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 800182a:	f003 f8f3 	bl	8004a14 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800182e:	2200      	movs	r2, #0
 8001830:	2110      	movs	r1, #16
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <ILI9341_Draw_Pixel+0x188>)
 8001834:	f003 f8ee 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001838:	2200      	movs	r2, #0
 800183a:	2101      	movs	r1, #1
 800183c:	4819      	ldr	r0, [pc, #100]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 800183e:	f003 f8e9 	bl	8004a14 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001842:	202c      	movs	r0, #44	; 0x2c
 8001844:	f7ff fc82 	bl	800114c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001848:	2201      	movs	r2, #1
 800184a:	2110      	movs	r1, #16
 800184c:	4814      	ldr	r0, [pc, #80]	; (80018a0 <ILI9341_Draw_Pixel+0x188>)
 800184e:	f003 f8e1 	bl	8004a14 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	4813      	ldr	r0, [pc, #76]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 8001858:	f003 f8dc 	bl	8004a14 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2101      	movs	r1, #1
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 8001862:	f003 f8d7 	bl	8004a14 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b29b      	uxth	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	733b      	strb	r3, [r7, #12]
 8001870:	887b      	ldrh	r3, [r7, #2]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001876:	f107 010c 	add.w	r1, r7, #12
 800187a:	2301      	movs	r3, #1
 800187c:	2202      	movs	r2, #2
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <ILI9341_Draw_Pixel+0x190>)
 8001880:	f004 feef 	bl	8006662 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001884:	2201      	movs	r2, #1
 8001886:	2101      	movs	r1, #1
 8001888:	4806      	ldr	r0, [pc, #24]	; (80018a4 <ILI9341_Draw_Pixel+0x18c>)
 800188a:	f003 f8c3 	bl	8004a14 <HAL_GPIO_WritePin>
 800188e:	e000      	b.n	8001892 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001890:	bf00      	nop
	
}
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000002 	.word	0x20000002
 800189c:	20000000 	.word	0x20000000
 80018a0:	40020800 	.word	0x40020800
 80018a4:	40020400 	.word	0x40020400
 80018a8:	2000031c 	.word	0x2000031c

080018ac <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4604      	mov	r4, r0
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	80fb      	strh	r3, [r7, #6]
 80018be:	4603      	mov	r3, r0
 80018c0:	80bb      	strh	r3, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	807b      	strh	r3, [r7, #2]
 80018c6:	4613      	mov	r3, r2
 80018c8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <ILI9341_Draw_Rectangle+0xb0>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	88fa      	ldrh	r2, [r7, #6]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d23d      	bcs.n	8001952 <ILI9341_Draw_Rectangle+0xa6>
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <ILI9341_Draw_Rectangle+0xb4>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	88ba      	ldrh	r2, [r7, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d237      	bcs.n	8001952 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a1c      	ldr	r2, [pc, #112]	; (800195c <ILI9341_Draw_Rectangle+0xb0>)
 80018ea:	8812      	ldrh	r2, [r2, #0]
 80018ec:	b292      	uxth	r2, r2
 80018ee:	4293      	cmp	r3, r2
 80018f0:	dd05      	ble.n	80018fe <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <ILI9341_Draw_Rectangle+0xb0>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	883b      	ldrh	r3, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <ILI9341_Draw_Rectangle+0xb4>)
 8001906:	8812      	ldrh	r2, [r2, #0]
 8001908:	b292      	uxth	r2, r2
 800190a:	4293      	cmp	r3, r2
 800190c:	dd05      	ble.n	800191a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <ILI9341_Draw_Rectangle+0xb4>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	4413      	add	r3, r2
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29c      	uxth	r4, r3
 8001926:	88ba      	ldrh	r2, [r7, #4]
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	4413      	add	r3, r2
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29b      	uxth	r3, r3
 8001932:	88b9      	ldrh	r1, [r7, #4]
 8001934:	88f8      	ldrh	r0, [r7, #6]
 8001936:	4622      	mov	r2, r4
 8001938:	f7ff fc5a 	bl	80011f0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800193c:	883b      	ldrh	r3, [r7, #0]
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	461a      	mov	r2, r3
 8001946:	8b3b      	ldrh	r3, [r7, #24]
 8001948:	4611      	mov	r1, r2
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fe26 	bl	800159c <ILI9341_Draw_Colour_Burst>
 8001950:	e000      	b.n	8001954 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001952:	bf00      	nop
}
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	bf00      	nop
 800195c:	20000002 	.word	0x20000002
 8001960:	20000000 	.word	0x20000000

08001964 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001964:	b590      	push	{r4, r7, lr}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4604      	mov	r4, r0
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4623      	mov	r3, r4
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	4603      	mov	r3, r0
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	460b      	mov	r3, r1
 800197c:	807b      	strh	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <ILI9341_Draw_Horizontal_Line+0x80>)
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	429a      	cmp	r2, r3
 800198c:	d225      	bcs.n	80019da <ILI9341_Draw_Horizontal_Line+0x76>
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <ILI9341_Draw_Horizontal_Line+0x84>)
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	88ba      	ldrh	r2, [r7, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d21f      	bcs.n	80019da <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800199a:	88fa      	ldrh	r2, [r7, #6]
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	4413      	add	r3, r2
 80019a0:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <ILI9341_Draw_Horizontal_Line+0x80>)
 80019a2:	8812      	ldrh	r2, [r2, #0]
 80019a4:	b292      	uxth	r2, r2
 80019a6:	4293      	cmp	r3, r2
 80019a8:	dd05      	ble.n	80019b6 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <ILI9341_Draw_Horizontal_Line+0x80>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80019b6:	88fa      	ldrh	r2, [r7, #6]
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	88b9      	ldrh	r1, [r7, #4]
 80019c6:	88f8      	ldrh	r0, [r7, #6]
 80019c8:	f7ff fc12 	bl	80011f0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	883b      	ldrh	r3, [r7, #0]
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fde2 	bl	800159c <ILI9341_Draw_Colour_Burst>
 80019d8:	e000      	b.n	80019dc <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80019da:	bf00      	nop
}
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd90      	pop	{r4, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000002 	.word	0x20000002
 80019e8:	20000000 	.word	0x20000000

080019ec <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 80019ec:	b590      	push	{r4, r7, lr}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4623      	mov	r3, r4
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	4603      	mov	r3, r0
 8001a00:	80bb      	strh	r3, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	807b      	strh	r3, [r7, #2]
 8001a06:	4613      	mov	r3, r2
 8001a08:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <ILI9341_Draw_Vertical_Line+0x80>)
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d225      	bcs.n	8001a62 <ILI9341_Draw_Vertical_Line+0x76>
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <ILI9341_Draw_Vertical_Line+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	88ba      	ldrh	r2, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d21f      	bcs.n	8001a62 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001a22:	88ba      	ldrh	r2, [r7, #4]
 8001a24:	887b      	ldrh	r3, [r7, #2]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <ILI9341_Draw_Vertical_Line+0x84>)
 8001a2a:	8812      	ldrh	r2, [r2, #0]
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	dd05      	ble.n	8001a3e <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8001a32:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <ILI9341_Draw_Vertical_Line+0x84>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 8001a3e:	88ba      	ldrh	r2, [r7, #4]
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	4413      	add	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	88fa      	ldrh	r2, [r7, #6]
 8001a4c:	88b9      	ldrh	r1, [r7, #4]
 8001a4e:	88f8      	ldrh	r0, [r7, #6]
 8001a50:	f7ff fbce 	bl	80011f0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8001a54:	887a      	ldrh	r2, [r7, #2]
 8001a56:	883b      	ldrh	r3, [r7, #0]
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fd9e 	bl	800159c <ILI9341_Draw_Colour_Burst>
 8001a60:	e000      	b.n	8001a64 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001a62:	bf00      	nop
}
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000002 	.word	0x20000002
 8001a70:	20000000 	.word	0x20000000

08001a74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	60da      	str	r2, [r3, #12]
 8001a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a90      	ldr	r2, [pc, #576]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b8e      	ldr	r3, [pc, #568]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	61bb      	str	r3, [r7, #24]
 8001aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	4b8a      	ldr	r3, [pc, #552]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a89      	ldr	r2, [pc, #548]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a82      	ldr	r2, [pc, #520]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b7c      	ldr	r3, [pc, #496]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a7b      	ldr	r2, [pc, #492]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b75      	ldr	r3, [pc, #468]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a74      	ldr	r2, [pc, #464]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001b04:	f043 0310 	orr.w	r3, r3, #16
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b6e      	ldr	r3, [pc, #440]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a6d      	ldr	r2, [pc, #436]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <MX_GPIO_Init+0x260>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TFT_DC_Pin|TFT_RST_Pin|Led_1_Pin|T_CS_Pin
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 614b 	mov.w	r1, #3248	; 0xcb0
 8001b38:	4867      	ldr	r0, [pc, #412]	; (8001cd8 <MX_GPIO_Init+0x264>)
 8001b3a:	f002 ff6b 	bl	8004a14 <HAL_GPIO_WritePin>
                          |T_MOSI_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|Signal_LED_Pin, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f241 0101 	movw	r1, #4097	; 0x1001
 8001b44:	4865      	ldr	r0, [pc, #404]	; (8001cdc <MX_GPIO_Init+0x268>)
 8001b46:	f002 ff65 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Load_out_3_Pin|Load_out_2_Pin|Load_out_1_Pin, GPIO_PIN_RESET);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001b50:	4863      	ldr	r0, [pc, #396]	; (8001ce0 <MX_GPIO_Init+0x26c>)
 8001b52:	f002 ff5f 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, D_SCK_Pin|Led_4_Pin|Led_3_Pin|Led_2_Pin, GPIO_PIN_RESET);
 8001b56:	2200      	movs	r2, #0
 8001b58:	f44f 412c 	mov.w	r1, #44032	; 0xac00
 8001b5c:	4861      	ldr	r0, [pc, #388]	; (8001ce4 <MX_GPIO_Init+0x270>)
 8001b5e:	f002 ff59 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_CLK_GPIO_Port, T_CLK_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b68:	485f      	ldr	r0, [pc, #380]	; (8001ce8 <MX_GPIO_Init+0x274>)
 8001b6a:	f002 ff53 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	4619      	mov	r1, r3
 8001b82:	4859      	ldr	r0, [pc, #356]	; (8001ce8 <MX_GPIO_Init+0x274>)
 8001b84:	f002 fd92 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = TFT_DC_Pin|TFT_RST_Pin|Led_1_Pin;
 8001b88:	23b0      	movs	r3, #176	; 0xb0
 8001b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	484e      	ldr	r0, [pc, #312]	; (8001cd8 <MX_GPIO_Init+0x264>)
 8001ba0:	f002 fd84 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|Signal_LED_Pin;
 8001ba4:	f241 0301 	movw	r3, #4097	; 0x1001
 8001ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4847      	ldr	r0, [pc, #284]	; (8001cdc <MX_GPIO_Init+0x268>)
 8001bbe:	f002 fd75 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Load_out_3_Pin|Load_out_2_Pin|Load_out_1_Pin;
 8001bc2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd4:	f107 031c 	add.w	r3, r7, #28
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4841      	ldr	r0, [pc, #260]	; (8001ce0 <MX_GPIO_Init+0x26c>)
 8001bdc:	f002 fd66 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Stop_sensor_1_Pin|Stop_sensor_2_Pin|Stop_sensor_3_Pin;
 8001be0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bea:	2302      	movs	r3, #2
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	483a      	ldr	r0, [pc, #232]	; (8001ce0 <MX_GPIO_Init+0x26c>)
 8001bf6:	f002 fd59 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Pressure_Pin;
 8001bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Pressure_GPIO_Port, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4833      	ldr	r0, [pc, #204]	; (8001cdc <MX_GPIO_Init+0x268>)
 8001c10:	f002 fd4c 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D_OUT_Pin|Btn_4_Pin|Btn_3_Pin|T_IRQ_Pin;
 8001c14:	f245 2301 	movw	r3, #20993	; 0x5201
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	482e      	ldr	r0, [pc, #184]	; (8001ce4 <MX_GPIO_Init+0x270>)
 8001c2a:	f002 fd3f 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = D_SCK_Pin|Led_4_Pin|Led_3_Pin|Led_2_Pin;
 8001c2e:	f44f 432c 	mov.w	r3, #44032	; 0xac00
 8001c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4827      	ldr	r0, [pc, #156]	; (8001ce4 <MX_GPIO_Init+0x270>)
 8001c48:	f002 fd30 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Btn_2_Pin|Btn_1_Pin|T_MISO_Pin;
 8001c4c:	f44f 538a 	mov.w	r3, #4416	; 0x1140
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	481d      	ldr	r0, [pc, #116]	; (8001cd8 <MX_GPIO_Init+0x264>)
 8001c62:	f002 fd23 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_CLK_Pin;
 8001c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(T_CLK_GPIO_Port, &GPIO_InitStruct);
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	481a      	ldr	r0, [pc, #104]	; (8001ce8 <MX_GPIO_Init+0x274>)
 8001c80:	f002 fd14 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_CS_Pin|T_MOSI_Pin;
 8001c84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c92:	2303      	movs	r3, #3
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <MX_GPIO_Init+0x264>)
 8001c9e:	f002 fd05 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Save_Pin|Menu_Pin|Minus_Pin|Plus_Pin;
 8001ca2:	f44f 734c 	mov.w	r3, #816	; 0x330
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4809      	ldr	r0, [pc, #36]	; (8001cdc <MX_GPIO_Init+0x268>)
 8001cb8:	f002 fcf8 	bl	80046ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2008      	movs	r0, #8
 8001cc2:	f002 fcbc 	bl	800463e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001cc6:	2008      	movs	r0, #8
 8001cc8:	f002 fcd5 	bl	8004676 <HAL_NVIC_EnableIRQ>

}
 8001ccc:	bf00      	nop
 8001cce:	3730      	adds	r7, #48	; 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020400 	.word	0x40020400
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	40020000 	.word	0x40020000

08001cec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <MX_I2C1_Init+0x54>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cf8:	4a12      	ldr	r2, [pc, #72]	; (8001d44 <MX_I2C1_Init+0x58>)
 8001cfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_I2C1_Init+0x50>)
 8001d2a:	f002 feb1 	bl	8004a90 <HAL_I2C_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d34:	f000 fa9c 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000208 	.word	0x20000208
 8001d40:	40005400 	.word	0x40005400
 8001d44:	000186a0 	.word	0x000186a0

08001d48 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d4e:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <MX_I2C2_Init+0x54>)
 8001d50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d54:	4a12      	ldr	r2, [pc, #72]	; (8001da0 <MX_I2C2_Init+0x58>)
 8001d56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d78:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <MX_I2C2_Init+0x50>)
 8001d86:	f002 fe83 	bl	8004a90 <HAL_I2C_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d90:	f000 fa6e 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000025c 	.word	0x2000025c
 8001d9c:	40005800 	.word	0x40005800
 8001da0:	000186a0 	.word	0x000186a0

08001da4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <HAL_I2C_MspInit+0xe8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12c      	bne.n	8001e20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a30      	ldr	r2, [pc, #192]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001de2:	23c0      	movs	r3, #192	; 0xc0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de6:	2312      	movs	r3, #18
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001df2:	2304      	movs	r3, #4
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4825      	ldr	r0, [pc, #148]	; (8001e94 <HAL_I2C_MspInit+0xf0>)
 8001dfe:	f002 fc55 	bl	80046ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e1e:	e031      	b.n	8001e84 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_I2C_MspInit+0xf4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d12c      	bne.n	8001e84 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a17      	ldr	r2, [pc, #92]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e34:	f043 0302 	orr.w	r3, r3, #2
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	480c      	ldr	r0, [pc, #48]	; (8001e94 <HAL_I2C_MspInit+0xf0>)
 8001e64:	f002 fc22 	bl	80046ac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_I2C_MspInit+0xec>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40005800 	.word	0x40005800

08001e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea2:	f002 fa5b 	bl	800435c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea6:	f000 f979 	bl	800219c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eaa:	f7ff fde3 	bl	8001a74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eae:	f7ff ff1d 	bl	8001cec <MX_I2C1_Init>
  MX_SPI1_Init();
 8001eb2:	f001 fe33 	bl	8003b1c <MX_SPI1_Init>
  MX_I2C2_Init();
 8001eb6:	f7ff ff47 	bl	8001d48 <MX_I2C2_Init>
  MX_UART4_Init();
 8001eba:	f002 f9b3 	bl	8004224 <MX_UART4_Init>
  MX_TIM3_Init();
 8001ebe:	f002 f89f 	bl	8004000 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001ec2:	f001 ffff 	bl	8003ec4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ec6:	f002 f84d 	bl	8003f64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  ILI9341_Init();
 8001eca:	f7ff fa59 	bl	8001380 <ILI9341_Init>
  ILI9341_Fill_Screen(BLUE );
 8001ece:	201f      	movs	r0, #31
 8001ed0:	f7ff fbfc 	bl	80016cc <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7ff f9f5 	bl	80012c4 <ILI9341_Set_Rotation>
  ILI9341_Draw_Text("Ready to start", 20, 100, WHITE, 3, BLUE);
 8001eda:	231f      	movs	r3, #31
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2303      	movs	r3, #3
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee6:	2264      	movs	r2, #100	; 0x64
 8001ee8:	2114      	movs	r1, #20
 8001eea:	488d      	ldr	r0, [pc, #564]	; (8002120 <main+0x284>)
 8001eec:	f7ff f8f0 	bl	80010d0 <ILI9341_Draw_Text>

  load_var(&volume_1_1,1);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	488c      	ldr	r0, [pc, #560]	; (8002124 <main+0x288>)
 8001ef4:	f000 f9f4 	bl	80022e0 <load_var>
  load_var(&volume_1_2,2);
 8001ef8:	2102      	movs	r1, #2
 8001efa:	488b      	ldr	r0, [pc, #556]	; (8002128 <main+0x28c>)
 8001efc:	f000 f9f0 	bl	80022e0 <load_var>
  load_var(&k_volume_1,3);
 8001f00:	2103      	movs	r1, #3
 8001f02:	488a      	ldr	r0, [pc, #552]	; (800212c <main+0x290>)
 8001f04:	f000 f9ec 	bl	80022e0 <load_var>
  load_var(&gas_time_1,4);
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4889      	ldr	r0, [pc, #548]	; (8002130 <main+0x294>)
 8001f0c:	f000 f9e8 	bl	80022e0 <load_var>
  load_var(&drainage_time_1,5);
 8001f10:	2105      	movs	r1, #5
 8001f12:	4888      	ldr	r0, [pc, #544]	; (8002134 <main+0x298>)
 8001f14:	f000 f9e4 	bl	80022e0 <load_var>

  load_var(&volume_2_1,6);
 8001f18:	2106      	movs	r1, #6
 8001f1a:	4887      	ldr	r0, [pc, #540]	; (8002138 <main+0x29c>)
 8001f1c:	f000 f9e0 	bl	80022e0 <load_var>
  load_var(&volume_2_2,7);
 8001f20:	2107      	movs	r1, #7
 8001f22:	4886      	ldr	r0, [pc, #536]	; (800213c <main+0x2a0>)
 8001f24:	f000 f9dc 	bl	80022e0 <load_var>
  load_var(&k_volume_2,8);
 8001f28:	2108      	movs	r1, #8
 8001f2a:	4885      	ldr	r0, [pc, #532]	; (8002140 <main+0x2a4>)
 8001f2c:	f000 f9d8 	bl	80022e0 <load_var>
  load_var(&gas_time_2,109);
 8001f30:	216d      	movs	r1, #109	; 0x6d
 8001f32:	4884      	ldr	r0, [pc, #528]	; (8002144 <main+0x2a8>)
 8001f34:	f000 f9d4 	bl	80022e0 <load_var>
  load_var(&drainage_time_2,110);
 8001f38:	216e      	movs	r1, #110	; 0x6e
 8001f3a:	4883      	ldr	r0, [pc, #524]	; (8002148 <main+0x2ac>)
 8001f3c:	f000 f9d0 	bl	80022e0 <load_var>

  load_var(&volume_3_1,11);
 8001f40:	210b      	movs	r1, #11
 8001f42:	4882      	ldr	r0, [pc, #520]	; (800214c <main+0x2b0>)
 8001f44:	f000 f9cc 	bl	80022e0 <load_var>
  load_var(&volume_3_2,12);
 8001f48:	210c      	movs	r1, #12
 8001f4a:	4881      	ldr	r0, [pc, #516]	; (8002150 <main+0x2b4>)
 8001f4c:	f000 f9c8 	bl	80022e0 <load_var>
  load_var(&k_volume_3,13);
 8001f50:	210d      	movs	r1, #13
 8001f52:	4880      	ldr	r0, [pc, #512]	; (8002154 <main+0x2b8>)
 8001f54:	f000 f9c4 	bl	80022e0 <load_var>
  load_var(&gas_time_3,14);
 8001f58:	210e      	movs	r1, #14
 8001f5a:	487f      	ldr	r0, [pc, #508]	; (8002158 <main+0x2bc>)
 8001f5c:	f000 f9c0 	bl	80022e0 <load_var>
  load_var(&drainage_time_3,15);
 8001f60:	210f      	movs	r1, #15
 8001f62:	487e      	ldr	r0, [pc, #504]	; (800215c <main+0x2c0>)
 8001f64:	f000 f9bc 	bl	80022e0 <load_var>

  load_var(&volume_4_1,16);
 8001f68:	2110      	movs	r1, #16
 8001f6a:	487d      	ldr	r0, [pc, #500]	; (8002160 <main+0x2c4>)
 8001f6c:	f000 f9b8 	bl	80022e0 <load_var>
  load_var(&volume_4_2,17);
 8001f70:	2111      	movs	r1, #17
 8001f72:	487c      	ldr	r0, [pc, #496]	; (8002164 <main+0x2c8>)
 8001f74:	f000 f9b4 	bl	80022e0 <load_var>
  load_var(&k_volume_4,18);
 8001f78:	2112      	movs	r1, #18
 8001f7a:	487b      	ldr	r0, [pc, #492]	; (8002168 <main+0x2cc>)
 8001f7c:	f000 f9b0 	bl	80022e0 <load_var>
  load_var(&gas_time_4,19);
 8001f80:	2113      	movs	r1, #19
 8001f82:	487a      	ldr	r0, [pc, #488]	; (800216c <main+0x2d0>)
 8001f84:	f000 f9ac 	bl	80022e0 <load_var>
  load_var(&drainage_time_4,20);
 8001f88:	2114      	movs	r1, #20
 8001f8a:	4879      	ldr	r0, [pc, #484]	; (8002170 <main+0x2d4>)
 8001f8c:	f000 f9a8 	bl	80022e0 <load_var>

  cast_8_to_16(volume_1_1, volume_1_2, &volume_1);
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <main+0x288>)
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	4a64      	ldr	r2, [pc, #400]	; (8002128 <main+0x28c>)
 8001f96:	8811      	ldrh	r1, [r2, #0]
 8001f98:	4a76      	ldr	r2, [pc, #472]	; (8002174 <main+0x2d8>)
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f9fe 	bl	800239c <cast_8_to_16>
  cast_8_to_16(volume_2_1, volume_2_2, &volume_2);
 8001fa0:	4b65      	ldr	r3, [pc, #404]	; (8002138 <main+0x29c>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	4a65      	ldr	r2, [pc, #404]	; (800213c <main+0x2a0>)
 8001fa6:	8811      	ldrh	r1, [r2, #0]
 8001fa8:	4a73      	ldr	r2, [pc, #460]	; (8002178 <main+0x2dc>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f9f6 	bl	800239c <cast_8_to_16>
  cast_8_to_16(volume_3_1, volume_3_2, &volume_3);
 8001fb0:	4b66      	ldr	r3, [pc, #408]	; (800214c <main+0x2b0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	4a66      	ldr	r2, [pc, #408]	; (8002150 <main+0x2b4>)
 8001fb6:	8811      	ldrh	r1, [r2, #0]
 8001fb8:	4a70      	ldr	r2, [pc, #448]	; (800217c <main+0x2e0>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f9ee 	bl	800239c <cast_8_to_16>
  cast_8_to_16(volume_4_1, volume_4_2, &volume_4);
 8001fc0:	4b67      	ldr	r3, [pc, #412]	; (8002160 <main+0x2c4>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	4a67      	ldr	r2, [pc, #412]	; (8002164 <main+0x2c8>)
 8001fc6:	8811      	ldrh	r1, [r2, #0]
 8001fc8:	4a6d      	ldr	r2, [pc, #436]	; (8002180 <main+0x2e4>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 f9e6 	bl	800239c <cast_8_to_16>
	  if (HAL_GPIO_ReadPin(GPIOA, Sensor_Pin)==1)
	  {
		  HAL_GPIO_TogglePin(GPIOB, Signal_LED_Pin);
	  }
	  */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8)==0)
 8001fd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd4:	486b      	ldr	r0, [pc, #428]	; (8002184 <main+0x2e8>)
 8001fd6:	f002 fd05 	bl	80049e4 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11a      	bne.n	8002016 <main+0x17a>
	  	  		{
		  	  	  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	  		  	  ILI9341_Draw_Text("Button 1 ok", 10, 10, WHITE, 2, BLUE);
 8001fe0:	231f      	movs	r3, #31
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	220a      	movs	r2, #10
 8001fee:	210a      	movs	r1, #10
 8001ff0:	4865      	ldr	r0, [pc, #404]	; (8002188 <main+0x2ec>)
 8001ff2:	f7ff f86d 	bl	80010d0 <ILI9341_Draw_Text>
	  		  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	4862      	ldr	r0, [pc, #392]	; (8002184 <main+0x2e8>)
 8001ffc:	f002 fd0a 	bl	8004a14 <HAL_GPIO_WritePin>
	  		  	  //pwm_test();
	  		  	  //gas();
	  		  	  filling_cycle(volume_1, k_volume_1, gas_time_1, drainage_time_1);
 8002000:	4b5c      	ldr	r3, [pc, #368]	; (8002174 <main+0x2d8>)
 8002002:	8818      	ldrh	r0, [r3, #0]
 8002004:	4b49      	ldr	r3, [pc, #292]	; (800212c <main+0x290>)
 8002006:	8819      	ldrh	r1, [r3, #0]
 8002008:	4b49      	ldr	r3, [pc, #292]	; (8002130 <main+0x294>)
 800200a:	881a      	ldrh	r2, [r3, #0]
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <main+0x298>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	f001 fd54 	bl	8003abc <filling_cycle>
 8002014:	e004      	b.n	8002020 <main+0x184>
	  		  	  //HAL_Delay(1000);
	  	  		} else {
	  	  			//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
	  	  			//ILI9341_Fill_Screen(BLUE );
	  	  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	485a      	ldr	r0, [pc, #360]	; (8002184 <main+0x2e8>)
 800201c:	f002 fcfa 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  		}
	  	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)==0)
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	4858      	ldr	r0, [pc, #352]	; (8002184 <main+0x2e8>)
 8002024:	f002 fcde 	bl	80049e4 <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d11b      	bne.n	8002066 <main+0x1ca>
	  	  	  		{
	  	  		  	  ILI9341_Draw_Text("Button 2 ok", 10, 10, WHITE, 2, BLUE);
 800202e:	231f      	movs	r3, #31
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2302      	movs	r3, #2
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203a:	220a      	movs	r2, #10
 800203c:	210a      	movs	r1, #10
 800203e:	4853      	ldr	r0, [pc, #332]	; (800218c <main+0x2f0>)
 8002040:	f7ff f846 	bl	80010d0 <ILI9341_Draw_Text>
	  	  		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800204a:	4851      	ldr	r0, [pc, #324]	; (8002190 <main+0x2f4>)
 800204c:	f002 fce2 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  		  	  filling_cycle(volume_2, k_volume_2, gas_time_2, drainage_time_2);
 8002050:	4b49      	ldr	r3, [pc, #292]	; (8002178 <main+0x2dc>)
 8002052:	8818      	ldrh	r0, [r3, #0]
 8002054:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <main+0x2a4>)
 8002056:	8819      	ldrh	r1, [r3, #0]
 8002058:	4b3a      	ldr	r3, [pc, #232]	; (8002144 <main+0x2a8>)
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <main+0x2ac>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	f001 fd2c 	bl	8003abc <filling_cycle>
 8002064:	e005      	b.n	8002072 <main+0x1d6>
	  	  		  	//HAL_Delay(1000);
	  	  	  		} else {
	  	  	  			//ILI9341_Fill_Screen(BLUE );
	  	  	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800206c:	4848      	ldr	r0, [pc, #288]	; (8002190 <main+0x2f4>)
 800206e:	f002 fcd1 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  	  		}
	  	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14)==0)
 8002072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002076:	4846      	ldr	r0, [pc, #280]	; (8002190 <main+0x2f4>)
 8002078:	f002 fcb4 	bl	80049e4 <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11b      	bne.n	80020ba <main+0x21e>
	  	  	  		{
	  	  		  	  ILI9341_Draw_Text("Button 3 ok", 10, 10, WHITE, 2, BLUE);
 8002082:	231f      	movs	r3, #31
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2302      	movs	r3, #2
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800208e:	220a      	movs	r2, #10
 8002090:	210a      	movs	r1, #10
 8002092:	4840      	ldr	r0, [pc, #256]	; (8002194 <main+0x2f8>)
 8002094:	f7ff f81c 	bl	80010d0 <ILI9341_Draw_Text>
	  	  		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800209e:	483c      	ldr	r0, [pc, #240]	; (8002190 <main+0x2f4>)
 80020a0:	f002 fcb8 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  		  	  filling_cycle(volume_3, k_volume_3, gas_time_3, drainage_time_3);
 80020a4:	4b35      	ldr	r3, [pc, #212]	; (800217c <main+0x2e0>)
 80020a6:	8818      	ldrh	r0, [r3, #0]
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <main+0x2b8>)
 80020aa:	8819      	ldrh	r1, [r3, #0]
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <main+0x2bc>)
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	4b2a      	ldr	r3, [pc, #168]	; (800215c <main+0x2c0>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	f001 fd02 	bl	8003abc <filling_cycle>
 80020b8:	e005      	b.n	80020c6 <main+0x22a>
	  	  		  	//HAL_Delay(1000);
	  	  	  		} else {
	  	  	  			//ILI9341_Fill_Screen(BLUE );
	  	  	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80020ba:	2200      	movs	r2, #0
 80020bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c0:	4833      	ldr	r0, [pc, #204]	; (8002190 <main+0x2f4>)
 80020c2:	f002 fca7 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  	  		}
	  	  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==0)
 80020c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020ca:	4831      	ldr	r0, [pc, #196]	; (8002190 <main+0x2f4>)
 80020cc:	f002 fc8a 	bl	80049e4 <HAL_GPIO_ReadPin>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11b      	bne.n	800210e <main+0x272>
	  	  	  		{
	  		  	  	  //ILI9341_Reset();
	  	  		  	  ILI9341_Draw_Text("Button 4 ok", 10, 10, WHITE, 2, BLUE);
 80020d6:	231f      	movs	r3, #31
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2302      	movs	r3, #2
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e2:	220a      	movs	r2, #10
 80020e4:	210a      	movs	r1, #10
 80020e6:	482c      	ldr	r0, [pc, #176]	; (8002198 <main+0x2fc>)
 80020e8:	f7fe fff2 	bl	80010d0 <ILI9341_Draw_Text>
	  	  		  	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f2:	4827      	ldr	r0, [pc, #156]	; (8002190 <main+0x2f4>)
 80020f4:	f002 fc8e 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  		  	  filling_cycle(volume_4, k_volume_4, gas_time_4, drainage_time_4);
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <main+0x2e4>)
 80020fa:	8818      	ldrh	r0, [r3, #0]
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <main+0x2cc>)
 80020fe:	8819      	ldrh	r1, [r3, #0]
 8002100:	4b1a      	ldr	r3, [pc, #104]	; (800216c <main+0x2d0>)
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <main+0x2d4>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f001 fcd8 	bl	8003abc <filling_cycle>
 800210c:	e005      	b.n	800211a <main+0x27e>
	  	  		  	//HAL_Delay(1000);
	  	  	  		} else {
	  	  	  			//ILI9341_Fill_Screen(BLUE );
	  	  	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002114:	481e      	ldr	r0, [pc, #120]	; (8002190 <main+0x2f4>)
 8002116:	f002 fc7d 	bl	8004a14 <HAL_GPIO_WritePin>
	  	  	  		}

	  	  //if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0)
	  	  switch_menu();
 800211a:	f001 f891 	bl	8003240 <switch_menu>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8)==0)
 800211e:	e757      	b.n	8001fd0 <main+0x134>
 8002120:	0800adf8 	.word	0x0800adf8
 8002124:	200002f0 	.word	0x200002f0
 8002128:	20000312 	.word	0x20000312
 800212c:	20000310 	.word	0x20000310
 8002130:	200002ee 	.word	0x200002ee
 8002134:	200002d0 	.word	0x200002d0
 8002138:	2000030a 	.word	0x2000030a
 800213c:	200002d2 	.word	0x200002d2
 8002140:	200002c2 	.word	0x200002c2
 8002144:	20000318 	.word	0x20000318
 8002148:	200002ea 	.word	0x200002ea
 800214c:	200002b2 	.word	0x200002b2
 8002150:	200002ce 	.word	0x200002ce
 8002154:	20000314 	.word	0x20000314
 8002158:	200002f2 	.word	0x200002f2
 800215c:	200002bc 	.word	0x200002bc
 8002160:	200002c0 	.word	0x200002c0
 8002164:	2000030e 	.word	0x2000030e
 8002168:	200002ec 	.word	0x200002ec
 800216c:	200002c8 	.word	0x200002c8
 8002170:	200002c6 	.word	0x200002c6
 8002174:	200002e8 	.word	0x200002e8
 8002178:	200002cc 	.word	0x200002cc
 800217c:	20000302 	.word	0x20000302
 8002180:	200002fe 	.word	0x200002fe
 8002184:	40020800 	.word	0x40020800
 8002188:	0800ae08 	.word	0x0800ae08
 800218c:	0800ae14 	.word	0x0800ae14
 8002190:	40020c00 	.word	0x40020c00
 8002194:	0800ae20 	.word	0x0800ae20
 8002198:	0800ae2c 	.word	0x0800ae2c

0800219c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b094      	sub	sp, #80	; 0x50
 80021a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021a2:	f107 0320 	add.w	r3, r7, #32
 80021a6:	2230      	movs	r2, #48	; 0x30
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f005 ff7a 	bl	80080a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	4b28      	ldr	r3, [pc, #160]	; (8002268 <SystemClock_Config+0xcc>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <SystemClock_Config+0xcc>)
 80021ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6413      	str	r3, [r2, #64]	; 0x40
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <SystemClock_Config+0xcc>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <SystemClock_Config+0xd0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <SystemClock_Config+0xd0>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ea:	6013      	str	r3, [r2, #0]
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <SystemClock_Config+0xd0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021f8:	2301      	movs	r3, #1
 80021fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002202:	2302      	movs	r3, #2
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002206:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800220c:	2308      	movs	r3, #8
 800220e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002210:	23a8      	movs	r3, #168	; 0xa8
 8002212:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002214:	2302      	movs	r3, #2
 8002216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002218:	2307      	movs	r3, #7
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800221c:	f107 0320 	add.w	r3, r7, #32
 8002220:	4618      	mov	r0, r3
 8002222:	f003 fd23 	bl	8005c6c <HAL_RCC_OscConfig>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800222c:	f000 f820 	bl	8002270 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002230:	230f      	movs	r3, #15
 8002232:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002234:	2302      	movs	r3, #2
 8002236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800223c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002240:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002246:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	2105      	movs	r1, #5
 800224e:	4618      	mov	r0, r3
 8002250:	f003 ff84 	bl	800615c <HAL_RCC_ClockConfig>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800225a:	f000 f809 	bl	8002270 <Error_Handler>
  }
}
 800225e:	bf00      	nop
 8002260:	3750      	adds	r7, #80	; 0x50
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	40007000 	.word	0x40007000

08002270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002274:	b672      	cpsid	i
}
 8002276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002278:	e7fe      	b.n	8002278 <Error_Handler+0x8>
	...

0800227c <save_var>:
 *      Author: Alexander
 */
#include "menu.h"

void save_var (uint16_t var, uint16_t Addr)  // example of mem address 1,2,3,4
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af04      	add	r7, sp, #16
 8002282:	4603      	mov	r3, r0
 8002284:	460a      	mov	r2, r1
 8002286:	80fb      	strh	r3, [r7, #6]
 8002288:	4613      	mov	r3, r2
 800228a:	80bb      	strh	r3, [r7, #4]

	uint8_t data=var;
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	72bb      	strb	r3, [r7, #10]
	// HAL expects address to be shifted one bit to the left
	uint16_t devAddr = (0x50 << 1);
 8002292:	23a0      	movs	r3, #160	; 0xa0
 8002294:	81fb      	strh	r3, [r7, #14]
	uint16_t memAddr = Addr;
 8002296:	88bb      	ldrh	r3, [r7, #4]
 8002298:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status;

	HAL_I2C_Mem_Write(&hi2c2, devAddr, memAddr, 2,
 800229a:	89ba      	ldrh	r2, [r7, #12]
 800229c:	89f9      	ldrh	r1, [r7, #14]
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	2301      	movs	r3, #1
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	f107 030a 	add.w	r3, r7, #10
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2302      	movs	r3, #2
 80022b0:	480a      	ldr	r0, [pc, #40]	; (80022dc <save_var+0x60>)
 80022b2:	f002 fd31 	bl	8004d18 <HAL_I2C_Mem_Write>
		 &data, 1, HAL_MAX_DELAY);

	    for(;;) { // wait...
	        status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1,
 80022b6:	89f9      	ldrh	r1, [r7, #14]
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	2201      	movs	r2, #1
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <save_var+0x60>)
 80022c0:	f003 f84a 	bl	8005358 <HAL_I2C_IsDeviceReady>
 80022c4:	4603      	mov	r3, r0
 80022c6:	72fb      	strb	r3, [r7, #11]
	                                        HAL_MAX_DELAY);
	        if(status == HAL_OK)
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d000      	beq.n	80022d0 <save_var+0x54>
	        status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1,
 80022ce:	e7f2      	b.n	80022b6 <save_var+0x3a>
	            break;
 80022d0:	bf00      	nop
	    }
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	2000025c 	.word	0x2000025c

080022e0 <load_var>:

void load_var(uint16_t *var, uint16_t Addr) // example of mem address 1,2,3,4
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	807b      	strh	r3, [r7, #2]
	uint8_t data;
	// HAL expects address to be shifted one bit to the left
	uint16_t devAddr = (0x50 << 1);
 80022ec:	23a0      	movs	r3, #160	; 0xa0
 80022ee:	81fb      	strh	r3, [r7, #14]
	uint16_t memAddr = Addr;
 80022f0:	887b      	ldrh	r3, [r7, #2]
 80022f2:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c2, devAddr, memAddr, 2,
 80022f4:	89ba      	ldrh	r2, [r7, #12]
 80022f6:	89f9      	ldrh	r1, [r7, #14]
 80022f8:	f04f 33ff 	mov.w	r3, #4294967295
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	2301      	movs	r3, #1
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	f107 030b 	add.w	r3, r7, #11
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2302      	movs	r3, #2
 800230a:	4805      	ldr	r0, [pc, #20]	; (8002320 <load_var+0x40>)
 800230c:	f002 fdfe 	bl	8004f0c <HAL_I2C_Mem_Read>
			&data, 1, HAL_MAX_DELAY);
	*var=data;
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	b29a      	uxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	801a      	strh	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000025c 	.word	0x2000025c

08002324 <main_screen>:

void main_screen()
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af02      	add	r7, sp, #8
	ILI9341_Fill_Screen(BLUE );
 800232a:	201f      	movs	r0, #31
 800232c:	f7ff f9ce 	bl	80016cc <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("Ready to start", 20, 100, WHITE, 3, BLUE);
 8002330:	231f      	movs	r3, #31
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2303      	movs	r3, #3
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800233c:	2264      	movs	r2, #100	; 0x64
 800233e:	2114      	movs	r1, #20
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <main_screen+0x28>)
 8002342:	f7fe fec5 	bl	80010d0 <ILI9341_Draw_Text>

}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	0800ae38 	.word	0x0800ae38

08002350 <cast_16_to_8>:

void cast_16_to_8 (uint16_t var_16, uint16_t  *var_8_1, uint16_t *var_8_2)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	81fb      	strh	r3, [r7, #14]
	uint16_t i=0;
 800235e:	2300      	movs	r3, #0
 8002360:	82fb      	strh	r3, [r7, #22]
	*var_8_1=var_16/255;
 8002362:	89fb      	ldrh	r3, [r7, #14]
 8002364:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <cast_16_to_8+0x48>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	09db      	lsrs	r3, r3, #7
 800236c:	b29a      	uxth	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	801a      	strh	r2, [r3, #0]
	i=*var_8_1*255;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	0212      	lsls	r2, r2, #8
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	82fb      	strh	r3, [r7, #22]
	*var_8_2=var_16-i;
 800237e:	89fa      	ldrh	r2, [r7, #14]
 8002380:	8afb      	ldrh	r3, [r7, #22]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	801a      	strh	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	80808081 	.word	0x80808081

0800239c <cast_8_to_16>:

void cast_8_to_16(uint16_t var_8_1, uint16_t var_8_2, uint16_t *var_16)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	603a      	str	r2, [r7, #0]
 80023a6:	80fb      	strh	r3, [r7, #6]
 80023a8:	460b      	mov	r3, r1
 80023aa:	80bb      	strh	r3, [r7, #4]
	uint16_t i=0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	81fb      	strh	r3, [r7, #14]
	i=var_8_1*255;
 80023b0:	88fb      	ldrh	r3, [r7, #6]
 80023b2:	461a      	mov	r2, r3
 80023b4:	0212      	lsls	r2, r2, #8
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	81fb      	strh	r3, [r7, #14]
	*var_16=i+var_8_2;
 80023ba:	89fa      	ldrh	r2, [r7, #14]
 80023bc:	88bb      	ldrh	r3, [r7, #4]
 80023be:	4413      	add	r3, r2
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	801a      	strh	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <menu>:



void menu(uint16_t volume, uint8_t k_volume, uint8_t gas_time, uint8_t drainage_time)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b091      	sub	sp, #68	; 0x44
 80023d8:	af02      	add	r7, sp, #8
 80023da:	4604      	mov	r4, r0
 80023dc:	4608      	mov	r0, r1
 80023de:	4611      	mov	r1, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	4623      	mov	r3, r4
 80023e4:	80fb      	strh	r3, [r7, #6]
 80023e6:	4603      	mov	r3, r0
 80023e8:	717b      	strb	r3, [r7, #5]
 80023ea:	460b      	mov	r3, r1
 80023ec:	713b      	strb	r3, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	70fb      	strb	r3, [r7, #3]
	ILI9341_Fill_Screen(BLUE );
 80023f2:	201f      	movs	r0, #31
 80023f4:	f7ff f96a 	bl	80016cc <ILI9341_Fill_Screen>
	ILI9341_Draw_Text("MENU", 100, 20, WHITE, 3, BLUE);
 80023f8:	231f      	movs	r3, #31
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	2303      	movs	r3, #3
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002404:	2214      	movs	r2, #20
 8002406:	2164      	movs	r1, #100	; 0x64
 8002408:	4850      	ldr	r0, [pc, #320]	; (800254c <menu+0x178>)
 800240a:	f7fe fe61 	bl	80010d0 <ILI9341_Draw_Text>
	volume=volume;
	char volume_buf[10];
	sprintf(volume_buf, "%.d", volume);
 800240e:	88fa      	ldrh	r2, [r7, #6]
 8002410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002414:	494e      	ldr	r1, [pc, #312]	; (8002550 <menu+0x17c>)
 8002416:	4618      	mov	r0, r3
 8002418:	f006 fab6 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Volume", 10, 80, WHITE, 2, BLUE);
 800241c:	231f      	movs	r3, #31
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2302      	movs	r3, #2
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002428:	2250      	movs	r2, #80	; 0x50
 800242a:	210a      	movs	r1, #10
 800242c:	4849      	ldr	r0, [pc, #292]	; (8002554 <menu+0x180>)
 800242e:	f7fe fe4f 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(volume_buf, 180, 80, WHITE, 2, BLUE);
 8002432:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002436:	231f      	movs	r3, #31
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	2302      	movs	r3, #2
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002442:	2250      	movs	r2, #80	; 0x50
 8002444:	21b4      	movs	r1, #180	; 0xb4
 8002446:	f7fe fe43 	bl	80010d0 <ILI9341_Draw_Text>
	char k_volume_buf[10];
	sprintf(k_volume_buf, "%.d", k_volume);
 800244a:	797a      	ldrb	r2, [r7, #5]
 800244c:	f107 0320 	add.w	r3, r7, #32
 8002450:	493f      	ldr	r1, [pc, #252]	; (8002550 <menu+0x17c>)
 8002452:	4618      	mov	r0, r3
 8002454:	f006 fa98 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Volume shift", 10, 100, WHITE, 2, BLUE);
 8002458:	231f      	movs	r3, #31
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	2302      	movs	r3, #2
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002464:	2264      	movs	r2, #100	; 0x64
 8002466:	210a      	movs	r1, #10
 8002468:	483b      	ldr	r0, [pc, #236]	; (8002558 <menu+0x184>)
 800246a:	f7fe fe31 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(k_volume_buf, 180, 100, WHITE, 2, BLUE);
 800246e:	f107 0020 	add.w	r0, r7, #32
 8002472:	231f      	movs	r3, #31
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2302      	movs	r3, #2
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247e:	2264      	movs	r2, #100	; 0x64
 8002480:	21b4      	movs	r1, #180	; 0xb4
 8002482:	f7fe fe25 	bl	80010d0 <ILI9341_Draw_Text>
	char gas_time_buf[10];
	sprintf(gas_time_buf, "%.d", gas_time);
 8002486:	793a      	ldrb	r2, [r7, #4]
 8002488:	f107 0314 	add.w	r3, r7, #20
 800248c:	4930      	ldr	r1, [pc, #192]	; (8002550 <menu+0x17c>)
 800248e:	4618      	mov	r0, r3
 8002490:	f006 fa7a 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Gas Time", 10, 120, WHITE, 2, BLUE);
 8002494:	231f      	movs	r3, #31
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2302      	movs	r3, #2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a0:	2278      	movs	r2, #120	; 0x78
 80024a2:	210a      	movs	r1, #10
 80024a4:	482d      	ldr	r0, [pc, #180]	; (800255c <menu+0x188>)
 80024a6:	f7fe fe13 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(gas_time_buf, 180, 120, WHITE, 2, BLUE);
 80024aa:	f107 0014 	add.w	r0, r7, #20
 80024ae:	231f      	movs	r3, #31
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	2302      	movs	r3, #2
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ba:	2278      	movs	r2, #120	; 0x78
 80024bc:	21b4      	movs	r1, #180	; 0xb4
 80024be:	f7fe fe07 	bl	80010d0 <ILI9341_Draw_Text>
	char drainage_time_buf[10];
	sprintf(drainage_time_buf, "%.d", drainage_time);
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	4921      	ldr	r1, [pc, #132]	; (8002550 <menu+0x17c>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f006 fa5c 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Drainage time", 10, 140, WHITE, 2, BLUE);
 80024d0:	231f      	movs	r3, #31
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	2302      	movs	r3, #2
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024dc:	228c      	movs	r2, #140	; 0x8c
 80024de:	210a      	movs	r1, #10
 80024e0:	481f      	ldr	r0, [pc, #124]	; (8002560 <menu+0x18c>)
 80024e2:	f7fe fdf5 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(drainage_time_buf, 180, 140, WHITE, 2, BLUE);
 80024e6:	f107 0008 	add.w	r0, r7, #8
 80024ea:	231f      	movs	r3, #31
 80024ec:	9301      	str	r3, [sp, #4]
 80024ee:	2302      	movs	r3, #2
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	228c      	movs	r2, #140	; 0x8c
 80024f8:	21b4      	movs	r1, #180	; 0xb4
 80024fa:	f7fe fde9 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("-", 10, 175, WHITE, 4, BLUE);
 80024fe:	231f      	movs	r3, #31
 8002500:	9301      	str	r3, [sp, #4]
 8002502:	2304      	movs	r3, #4
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800250a:	22af      	movs	r2, #175	; 0xaf
 800250c:	210a      	movs	r1, #10
 800250e:	4815      	ldr	r0, [pc, #84]	; (8002564 <menu+0x190>)
 8002510:	f7fe fdde 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("+", 280, 175, WHITE, 4, BLUE);
 8002514:	231f      	movs	r3, #31
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2304      	movs	r3, #4
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002520:	22af      	movs	r2, #175	; 0xaf
 8002522:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002526:	4810      	ldr	r0, [pc, #64]	; (8002568 <menu+0x194>)
 8002528:	f7fe fdd2 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Switch page", 60, 180, WHITE, 3, BLUE);
 800252c:	231f      	movs	r3, #31
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2303      	movs	r3, #3
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002538:	22b4      	movs	r2, #180	; 0xb4
 800253a:	213c      	movs	r1, #60	; 0x3c
 800253c:	480b      	ldr	r0, [pc, #44]	; (800256c <menu+0x198>)
 800253e:	f7fe fdc7 	bl	80010d0 <ILI9341_Draw_Text>


	//char page_buf[10];
	//sprintf(page_buf, "%.d", page);
	//ILI9341_Draw_Text(page_buf, 180, 180, WHITE, 2, BLUE);
}
 8002542:	bf00      	nop
 8002544:	373c      	adds	r7, #60	; 0x3c
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop
 800254c:	0800ae48 	.word	0x0800ae48
 8002550:	0800ae50 	.word	0x0800ae50
 8002554:	0800ae54 	.word	0x0800ae54
 8002558:	0800ae5c 	.word	0x0800ae5c
 800255c:	0800ae6c 	.word	0x0800ae6c
 8002560:	0800ae78 	.word	0x0800ae78
 8002564:	0800ae88 	.word	0x0800ae88
 8002568:	0800ae8c 	.word	0x0800ae8c
 800256c:	0800ae90 	.word	0x0800ae90

08002570 <change_var>:
	ILI9341_Draw_Text(liters_per_min_buf, 150, 120, WHITE, 2, BLUE);
	ILI9341_Draw_Text("L/m", 200, 120, WHITE, 2, BLUE);
}

void change_var(uint16_t *i)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	//while(1)

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==0 && menu_pressed==0 && page!=0)
 8002578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800257c:	4819      	ldr	r0, [pc, #100]	; (80025e4 <change_var+0x74>)
 800257e:	f002 fa31 	bl	80049e4 <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d110      	bne.n	80025aa <change_var+0x3a>
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <change_var+0x78>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <change_var+0x3a>
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <change_var+0x7c>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <change_var+0x3a>
		{
			*i=*i+1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	801a      	strh	r2, [r3, #0]

			HAL_Delay(150);
 80025a4:	2096      	movs	r0, #150	; 0x96
 80025a6:	f001 ff4b 	bl	8004440 <HAL_Delay>

		}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)==0 && menu_pressed==0 && page!=0)
 80025aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <change_var+0x74>)
 80025b0:	f002 fa18 	bl	80049e4 <HAL_GPIO_ReadPin>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d110      	bne.n	80025dc <change_var+0x6c>
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <change_var+0x78>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <change_var+0x6c>
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <change_var+0x7c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <change_var+0x6c>
		{
			*i=*i-1;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	801a      	strh	r2, [r3, #0]

			HAL_Delay(150);
 80025d6:	2096      	movs	r0, #150	; 0x96
 80025d8:	f001 ff32 	bl	8004440 <HAL_Delay>

		}

}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40020400 	.word	0x40020400
 80025e8:	200002b0 	.word	0x200002b0
 80025ec:	20000307 	.word	0x20000307

080025f0 <choose_var>:



void choose_var()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0b2      	sub	sp, #200	; 0xc8
 80025f4:	af02      	add	r7, sp, #8
	if(page==1 && var == 1 && menu_pressed==0)
 80025f6:	4bbb      	ldr	r3, [pc, #748]	; (80028e4 <choose_var+0x2f4>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d13c      	bne.n	8002678 <choose_var+0x88>
 80025fe:	4bba      	ldr	r3, [pc, #744]	; (80028e8 <choose_var+0x2f8>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d138      	bne.n	8002678 <choose_var+0x88>
 8002606:	4bb9      	ldr	r3, [pc, #740]	; (80028ec <choose_var+0x2fc>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d134      	bne.n	8002678 <choose_var+0x88>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, GREEN);
 800260e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2361      	movs	r3, #97	; 0x61
 8002616:	f240 1231 	movw	r2, #305	; 0x131
 800261a:	214d      	movs	r1, #77	; 0x4d
 800261c:	200a      	movs	r0, #10
 800261e:	f7fe fc3f 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&volume_1);
 8002622:	48b3      	ldr	r0, [pc, #716]	; (80028f0 <choose_var+0x300>)
 8002624:	f7ff ffa4 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", volume_1);
 8002628:	4bb1      	ldr	r3, [pc, #708]	; (80028f0 <choose_var+0x300>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	461a      	mov	r2, r3
 800262e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002632:	49b0      	ldr	r1, [pc, #704]	; (80028f4 <choose_var+0x304>)
 8002634:	4618      	mov	r0, r3
 8002636:	f006 f9a7 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 80, WHITE, 2, BLUE);
 800263a:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 800263e:	231f      	movs	r3, #31
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800264a:	2250      	movs	r2, #80	; 0x50
 800264c:	21b4      	movs	r1, #180	; 0xb4
 800264e:	f7fe fd3f 	bl	80010d0 <ILI9341_Draw_Text>
		cast_16_to_8(volume_1, &volume_1_1, &volume_1_2);
 8002652:	4ba7      	ldr	r3, [pc, #668]	; (80028f0 <choose_var+0x300>)
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	4aa8      	ldr	r2, [pc, #672]	; (80028f8 <choose_var+0x308>)
 8002658:	49a8      	ldr	r1, [pc, #672]	; (80028fc <choose_var+0x30c>)
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fe78 	bl	8002350 <cast_16_to_8>
		save_var(volume_1_1, 1);
 8002660:	4ba6      	ldr	r3, [pc, #664]	; (80028fc <choose_var+0x30c>)
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fe08 	bl	800227c <save_var>
		save_var(volume_1_2, 2);
 800266c:	4ba2      	ldr	r3, [pc, #648]	; (80028f8 <choose_var+0x308>)
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	2102      	movs	r1, #2
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fe02 	bl	800227c <save_var>
	}
	if(page==1 && var == 2 && menu_pressed==0)
 8002678:	4b9a      	ldr	r3, [pc, #616]	; (80028e4 <choose_var+0x2f4>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d12f      	bne.n	80026e0 <choose_var+0xf0>
 8002680:	4b99      	ldr	r3, [pc, #612]	; (80028e8 <choose_var+0x2f8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d12b      	bne.n	80026e0 <choose_var+0xf0>
 8002688:	4b98      	ldr	r3, [pc, #608]	; (80028ec <choose_var+0x2fc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d127      	bne.n	80026e0 <choose_var+0xf0>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, GREEN);
 8002690:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2375      	movs	r3, #117	; 0x75
 8002698:	f240 1231 	movw	r2, #305	; 0x131
 800269c:	2162      	movs	r1, #98	; 0x62
 800269e:	200a      	movs	r0, #10
 80026a0:	f7fe fbfe 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&k_volume_1);
 80026a4:	4896      	ldr	r0, [pc, #600]	; (8002900 <choose_var+0x310>)
 80026a6:	f7ff ff63 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", k_volume_1);
 80026aa:	4b95      	ldr	r3, [pc, #596]	; (8002900 <choose_var+0x310>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80026b4:	498f      	ldr	r1, [pc, #572]	; (80028f4 <choose_var+0x304>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f006 f966 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 100, WHITE, 2, BLUE);
 80026bc:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80026c0:	231f      	movs	r3, #31
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2302      	movs	r3, #2
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026cc:	2264      	movs	r2, #100	; 0x64
 80026ce:	21b4      	movs	r1, #180	; 0xb4
 80026d0:	f7fe fcfe 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(k_volume_1,3);
 80026d4:	4b8a      	ldr	r3, [pc, #552]	; (8002900 <choose_var+0x310>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	2103      	movs	r1, #3
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fdce 	bl	800227c <save_var>

	}
	if(page==1 && var == 3 && menu_pressed==0)
 80026e0:	4b80      	ldr	r3, [pc, #512]	; (80028e4 <choose_var+0x2f4>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d12f      	bne.n	8002748 <choose_var+0x158>
 80026e8:	4b7f      	ldr	r3, [pc, #508]	; (80028e8 <choose_var+0x2f8>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b03      	cmp	r3, #3
 80026ee:	d12b      	bne.n	8002748 <choose_var+0x158>
 80026f0:	4b7e      	ldr	r3, [pc, #504]	; (80028ec <choose_var+0x2fc>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d127      	bne.n	8002748 <choose_var+0x158>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, GREEN);
 80026f8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	2389      	movs	r3, #137	; 0x89
 8002700:	f240 1231 	movw	r2, #305	; 0x131
 8002704:	2176      	movs	r1, #118	; 0x76
 8002706:	200a      	movs	r0, #10
 8002708:	f7fe fbca 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&gas_time_1);
 800270c:	487d      	ldr	r0, [pc, #500]	; (8002904 <choose_var+0x314>)
 800270e:	f7ff ff2f 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", gas_time_1);
 8002712:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <choose_var+0x314>)
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800271c:	4975      	ldr	r1, [pc, #468]	; (80028f4 <choose_var+0x304>)
 800271e:	4618      	mov	r0, r3
 8002720:	f006 f932 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 120, WHITE, 2, BLUE);
 8002724:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002728:	231f      	movs	r3, #31
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2302      	movs	r3, #2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002734:	2278      	movs	r2, #120	; 0x78
 8002736:	21b4      	movs	r1, #180	; 0xb4
 8002738:	f7fe fcca 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(gas_time_1,4);
 800273c:	4b71      	ldr	r3, [pc, #452]	; (8002904 <choose_var+0x314>)
 800273e:	881b      	ldrh	r3, [r3, #0]
 8002740:	2104      	movs	r1, #4
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fd9a 	bl	800227c <save_var>
	}
	if(page==1 && var == 4 && menu_pressed==0)
 8002748:	4b66      	ldr	r3, [pc, #408]	; (80028e4 <choose_var+0x2f4>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d12f      	bne.n	80027b0 <choose_var+0x1c0>
 8002750:	4b65      	ldr	r3, [pc, #404]	; (80028e8 <choose_var+0x2f8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d12b      	bne.n	80027b0 <choose_var+0x1c0>
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <choose_var+0x2fc>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d127      	bne.n	80027b0 <choose_var+0x1c0>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, GREEN);
 8002760:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	239d      	movs	r3, #157	; 0x9d
 8002768:	f240 1231 	movw	r2, #305	; 0x131
 800276c:	218a      	movs	r1, #138	; 0x8a
 800276e:	200a      	movs	r0, #10
 8002770:	f7fe fb96 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&drainage_time_1);
 8002774:	4864      	ldr	r0, [pc, #400]	; (8002908 <choose_var+0x318>)
 8002776:	f7ff fefb 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", drainage_time_1);
 800277a:	4b63      	ldr	r3, [pc, #396]	; (8002908 <choose_var+0x318>)
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002784:	495b      	ldr	r1, [pc, #364]	; (80028f4 <choose_var+0x304>)
 8002786:	4618      	mov	r0, r3
 8002788:	f006 f8fe 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 140, WHITE, 2, BLUE);
 800278c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8002790:	231f      	movs	r3, #31
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800279c:	228c      	movs	r2, #140	; 0x8c
 800279e:	21b4      	movs	r1, #180	; 0xb4
 80027a0:	f7fe fc96 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(drainage_time_1,5);
 80027a4:	4b58      	ldr	r3, [pc, #352]	; (8002908 <choose_var+0x318>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	2105      	movs	r1, #5
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fd66 	bl	800227c <save_var>
	}
	if(page==2 && var == 1 && menu_pressed==0)
 80027b0:	4b4c      	ldr	r3, [pc, #304]	; (80028e4 <choose_var+0x2f4>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d13c      	bne.n	8002832 <choose_var+0x242>
 80027b8:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <choose_var+0x2f8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d138      	bne.n	8002832 <choose_var+0x242>
 80027c0:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <choose_var+0x2fc>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d134      	bne.n	8002832 <choose_var+0x242>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, GREEN);
 80027c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2361      	movs	r3, #97	; 0x61
 80027d0:	f240 1231 	movw	r2, #305	; 0x131
 80027d4:	214d      	movs	r1, #77	; 0x4d
 80027d6:	200a      	movs	r0, #10
 80027d8:	f7fe fb62 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&volume_2);
 80027dc:	484b      	ldr	r0, [pc, #300]	; (800290c <choose_var+0x31c>)
 80027de:	f7ff fec7 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", volume_2);
 80027e2:	4b4a      	ldr	r3, [pc, #296]	; (800290c <choose_var+0x31c>)
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027ec:	4941      	ldr	r1, [pc, #260]	; (80028f4 <choose_var+0x304>)
 80027ee:	4618      	mov	r0, r3
 80027f0:	f006 f8ca 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 80, WHITE, 2, BLUE);
 80027f4:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80027f8:	231f      	movs	r3, #31
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	2302      	movs	r3, #2
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002804:	2250      	movs	r2, #80	; 0x50
 8002806:	21b4      	movs	r1, #180	; 0xb4
 8002808:	f7fe fc62 	bl	80010d0 <ILI9341_Draw_Text>
		cast_16_to_8(volume_2, &volume_2_1, &volume_2_2);
 800280c:	4b3f      	ldr	r3, [pc, #252]	; (800290c <choose_var+0x31c>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <choose_var+0x320>)
 8002812:	4940      	ldr	r1, [pc, #256]	; (8002914 <choose_var+0x324>)
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fd9b 	bl	8002350 <cast_16_to_8>
		save_var(volume_2_1, 6);
 800281a:	4b3e      	ldr	r3, [pc, #248]	; (8002914 <choose_var+0x324>)
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	2106      	movs	r1, #6
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fd2b 	bl	800227c <save_var>
		save_var(volume_2_2, 7);
 8002826:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <choose_var+0x320>)
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	2107      	movs	r1, #7
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fd25 	bl	800227c <save_var>
	}
	if(page==2 && var == 2 && menu_pressed==0)
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <choose_var+0x2f4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d12f      	bne.n	800289a <choose_var+0x2aa>
 800283a:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <choose_var+0x2f8>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d12b      	bne.n	800289a <choose_var+0x2aa>
 8002842:	4b2a      	ldr	r3, [pc, #168]	; (80028ec <choose_var+0x2fc>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d127      	bne.n	800289a <choose_var+0x2aa>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, GREEN);
 800284a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2375      	movs	r3, #117	; 0x75
 8002852:	f240 1231 	movw	r2, #305	; 0x131
 8002856:	2162      	movs	r1, #98	; 0x62
 8002858:	200a      	movs	r0, #10
 800285a:	f7fe fb21 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&k_volume_2);
 800285e:	482e      	ldr	r0, [pc, #184]	; (8002918 <choose_var+0x328>)
 8002860:	f7ff fe86 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", k_volume_2);
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <choose_var+0x328>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800286e:	4921      	ldr	r1, [pc, #132]	; (80028f4 <choose_var+0x304>)
 8002870:	4618      	mov	r0, r3
 8002872:	f006 f889 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 100, WHITE, 2, BLUE);
 8002876:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800287a:	231f      	movs	r3, #31
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2302      	movs	r3, #2
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002886:	2264      	movs	r2, #100	; 0x64
 8002888:	21b4      	movs	r1, #180	; 0xb4
 800288a:	f7fe fc21 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(k_volume_2,8);
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <choose_var+0x328>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2108      	movs	r1, #8
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fcf1 	bl	800227c <save_var>

	}
	if(page==2 && var == 3 && menu_pressed==0)
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <choose_var+0x2f4>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d14e      	bne.n	8002940 <choose_var+0x350>
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <choose_var+0x2f8>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d14a      	bne.n	8002940 <choose_var+0x350>
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <choose_var+0x2fc>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d146      	bne.n	8002940 <choose_var+0x350>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, GREEN);
 80028b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2389      	movs	r3, #137	; 0x89
 80028ba:	f240 1231 	movw	r2, #305	; 0x131
 80028be:	2176      	movs	r1, #118	; 0x76
 80028c0:	200a      	movs	r0, #10
 80028c2:	f7fe faed 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&gas_time_2);
 80028c6:	4815      	ldr	r0, [pc, #84]	; (800291c <choose_var+0x32c>)
 80028c8:	f7ff fe52 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", gas_time_2);
 80028cc:	4b13      	ldr	r3, [pc, #76]	; (800291c <choose_var+0x32c>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d6:	4907      	ldr	r1, [pc, #28]	; (80028f4 <choose_var+0x304>)
 80028d8:	4618      	mov	r0, r3
 80028da:	f006 f855 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 120, WHITE, 2, BLUE);
 80028de:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80028e2:	e01d      	b.n	8002920 <choose_var+0x330>
 80028e4:	20000307 	.word	0x20000307
 80028e8:	20000306 	.word	0x20000306
 80028ec:	200002b0 	.word	0x200002b0
 80028f0:	200002e8 	.word	0x200002e8
 80028f4:	0800ae50 	.word	0x0800ae50
 80028f8:	20000312 	.word	0x20000312
 80028fc:	200002f0 	.word	0x200002f0
 8002900:	20000310 	.word	0x20000310
 8002904:	200002ee 	.word	0x200002ee
 8002908:	200002d0 	.word	0x200002d0
 800290c:	200002cc 	.word	0x200002cc
 8002910:	200002d2 	.word	0x200002d2
 8002914:	2000030a 	.word	0x2000030a
 8002918:	200002c2 	.word	0x200002c2
 800291c:	20000318 	.word	0x20000318
 8002920:	231f      	movs	r3, #31
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	2302      	movs	r3, #2
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292c:	2278      	movs	r2, #120	; 0x78
 800292e:	21b4      	movs	r1, #180	; 0xb4
 8002930:	f7fe fbce 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(gas_time_2,109);
 8002934:	4bba      	ldr	r3, [pc, #744]	; (8002c20 <choose_var+0x630>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	216d      	movs	r1, #109	; 0x6d
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fc9e 	bl	800227c <save_var>
	}
	if(page==2 && var == 4 && menu_pressed==0)
 8002940:	4bb8      	ldr	r3, [pc, #736]	; (8002c24 <choose_var+0x634>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d12f      	bne.n	80029a8 <choose_var+0x3b8>
 8002948:	4bb7      	ldr	r3, [pc, #732]	; (8002c28 <choose_var+0x638>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d12b      	bne.n	80029a8 <choose_var+0x3b8>
 8002950:	4bb6      	ldr	r3, [pc, #728]	; (8002c2c <choose_var+0x63c>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d127      	bne.n	80029a8 <choose_var+0x3b8>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, GREEN);
 8002958:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	239d      	movs	r3, #157	; 0x9d
 8002960:	f240 1231 	movw	r2, #305	; 0x131
 8002964:	218a      	movs	r1, #138	; 0x8a
 8002966:	200a      	movs	r0, #10
 8002968:	f7fe fa9a 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&drainage_time_2);
 800296c:	48b0      	ldr	r0, [pc, #704]	; (8002c30 <choose_var+0x640>)
 800296e:	f7ff fdff 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", drainage_time_2);
 8002972:	4baf      	ldr	r3, [pc, #700]	; (8002c30 <choose_var+0x640>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800297c:	49ad      	ldr	r1, [pc, #692]	; (8002c34 <choose_var+0x644>)
 800297e:	4618      	mov	r0, r3
 8002980:	f006 f802 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 140, WHITE, 2, BLUE);
 8002984:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8002988:	231f      	movs	r3, #31
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	2302      	movs	r3, #2
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002994:	228c      	movs	r2, #140	; 0x8c
 8002996:	21b4      	movs	r1, #180	; 0xb4
 8002998:	f7fe fb9a 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(drainage_time_2,110);
 800299c:	4ba4      	ldr	r3, [pc, #656]	; (8002c30 <choose_var+0x640>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	216e      	movs	r1, #110	; 0x6e
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fc6a 	bl	800227c <save_var>
	}
	if(page==3 && var == 1 && menu_pressed==0)
 80029a8:	4b9e      	ldr	r3, [pc, #632]	; (8002c24 <choose_var+0x634>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d13c      	bne.n	8002a2a <choose_var+0x43a>
 80029b0:	4b9d      	ldr	r3, [pc, #628]	; (8002c28 <choose_var+0x638>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d138      	bne.n	8002a2a <choose_var+0x43a>
 80029b8:	4b9c      	ldr	r3, [pc, #624]	; (8002c2c <choose_var+0x63c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d134      	bne.n	8002a2a <choose_var+0x43a>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, GREEN);
 80029c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2361      	movs	r3, #97	; 0x61
 80029c8:	f240 1231 	movw	r2, #305	; 0x131
 80029cc:	214d      	movs	r1, #77	; 0x4d
 80029ce:	200a      	movs	r0, #10
 80029d0:	f7fe fa66 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&volume_3);
 80029d4:	4898      	ldr	r0, [pc, #608]	; (8002c38 <choose_var+0x648>)
 80029d6:	f7ff fdcb 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", volume_3);
 80029da:	4b97      	ldr	r3, [pc, #604]	; (8002c38 <choose_var+0x648>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029e4:	4993      	ldr	r1, [pc, #588]	; (8002c34 <choose_var+0x644>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f005 ffce 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 80, WHITE, 2, BLUE);
 80029ec:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80029f0:	231f      	movs	r3, #31
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fc:	2250      	movs	r2, #80	; 0x50
 80029fe:	21b4      	movs	r1, #180	; 0xb4
 8002a00:	f7fe fb66 	bl	80010d0 <ILI9341_Draw_Text>
		cast_16_to_8(volume_3, &volume_3_1, &volume_3_2);
 8002a04:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <choose_var+0x648>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	4a8c      	ldr	r2, [pc, #560]	; (8002c3c <choose_var+0x64c>)
 8002a0a:	498d      	ldr	r1, [pc, #564]	; (8002c40 <choose_var+0x650>)
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fc9f 	bl	8002350 <cast_16_to_8>
		save_var(volume_3_1, 11);
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <choose_var+0x650>)
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	210b      	movs	r1, #11
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fc2f 	bl	800227c <save_var>
		save_var(volume_3_2, 12);
 8002a1e:	4b87      	ldr	r3, [pc, #540]	; (8002c3c <choose_var+0x64c>)
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	210c      	movs	r1, #12
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff fc29 	bl	800227c <save_var>
	}
	if(page==3 && var == 2 && menu_pressed==0)
 8002a2a:	4b7e      	ldr	r3, [pc, #504]	; (8002c24 <choose_var+0x634>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d12f      	bne.n	8002a92 <choose_var+0x4a2>
 8002a32:	4b7d      	ldr	r3, [pc, #500]	; (8002c28 <choose_var+0x638>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d12b      	bne.n	8002a92 <choose_var+0x4a2>
 8002a3a:	4b7c      	ldr	r3, [pc, #496]	; (8002c2c <choose_var+0x63c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d127      	bne.n	8002a92 <choose_var+0x4a2>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, GREEN);
 8002a42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2375      	movs	r3, #117	; 0x75
 8002a4a:	f240 1231 	movw	r2, #305	; 0x131
 8002a4e:	2162      	movs	r1, #98	; 0x62
 8002a50:	200a      	movs	r0, #10
 8002a52:	f7fe fa25 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&k_volume_3);
 8002a56:	487b      	ldr	r0, [pc, #492]	; (8002c44 <choose_var+0x654>)
 8002a58:	f7ff fd8a 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", k_volume_3);
 8002a5c:	4b79      	ldr	r3, [pc, #484]	; (8002c44 <choose_var+0x654>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002a66:	4973      	ldr	r1, [pc, #460]	; (8002c34 <choose_var+0x644>)
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f005 ff8d 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 100, WHITE, 2, BLUE);
 8002a6e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002a72:	231f      	movs	r3, #31
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	2302      	movs	r3, #2
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7e:	2264      	movs	r2, #100	; 0x64
 8002a80:	21b4      	movs	r1, #180	; 0xb4
 8002a82:	f7fe fb25 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(k_volume_3,13);
 8002a86:	4b6f      	ldr	r3, [pc, #444]	; (8002c44 <choose_var+0x654>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	210d      	movs	r1, #13
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fbf5 	bl	800227c <save_var>

	}
	if(page==3 && var == 3 && menu_pressed==0)
 8002a92:	4b64      	ldr	r3, [pc, #400]	; (8002c24 <choose_var+0x634>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d12f      	bne.n	8002afa <choose_var+0x50a>
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <choose_var+0x638>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d12b      	bne.n	8002afa <choose_var+0x50a>
 8002aa2:	4b62      	ldr	r3, [pc, #392]	; (8002c2c <choose_var+0x63c>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d127      	bne.n	8002afa <choose_var+0x50a>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, GREEN);
 8002aaa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2389      	movs	r3, #137	; 0x89
 8002ab2:	f240 1231 	movw	r2, #305	; 0x131
 8002ab6:	2176      	movs	r1, #118	; 0x76
 8002ab8:	200a      	movs	r0, #10
 8002aba:	f7fe f9f1 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&gas_time_3);
 8002abe:	4862      	ldr	r0, [pc, #392]	; (8002c48 <choose_var+0x658>)
 8002ac0:	f7ff fd56 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", gas_time_3);
 8002ac4:	4b60      	ldr	r3, [pc, #384]	; (8002c48 <choose_var+0x658>)
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ace:	4959      	ldr	r1, [pc, #356]	; (8002c34 <choose_var+0x644>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f005 ff59 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 120, WHITE, 2, BLUE);
 8002ad6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8002ada:	231f      	movs	r3, #31
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2302      	movs	r3, #2
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	2278      	movs	r2, #120	; 0x78
 8002ae8:	21b4      	movs	r1, #180	; 0xb4
 8002aea:	f7fe faf1 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(gas_time_3,14);
 8002aee:	4b56      	ldr	r3, [pc, #344]	; (8002c48 <choose_var+0x658>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	210e      	movs	r1, #14
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fbc1 	bl	800227c <save_var>
	}
	if(page==3 && var == 4 && menu_pressed==0)
 8002afa:	4b4a      	ldr	r3, [pc, #296]	; (8002c24 <choose_var+0x634>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d12f      	bne.n	8002b62 <choose_var+0x572>
 8002b02:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <choose_var+0x638>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d12b      	bne.n	8002b62 <choose_var+0x572>
 8002b0a:	4b48      	ldr	r3, [pc, #288]	; (8002c2c <choose_var+0x63c>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d127      	bne.n	8002b62 <choose_var+0x572>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, GREEN);
 8002b12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	239d      	movs	r3, #157	; 0x9d
 8002b1a:	f240 1231 	movw	r2, #305	; 0x131
 8002b1e:	218a      	movs	r1, #138	; 0x8a
 8002b20:	200a      	movs	r0, #10
 8002b22:	f7fe f9bd 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&drainage_time_3);
 8002b26:	4849      	ldr	r0, [pc, #292]	; (8002c4c <choose_var+0x65c>)
 8002b28:	f7ff fd22 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", drainage_time_3);
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <choose_var+0x65c>)
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b36:	493f      	ldr	r1, [pc, #252]	; (8002c34 <choose_var+0x644>)
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f005 ff25 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 140, WHITE, 2, BLUE);
 8002b3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002b42:	231f      	movs	r3, #31
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	2302      	movs	r3, #2
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4e:	228c      	movs	r2, #140	; 0x8c
 8002b50:	21b4      	movs	r1, #180	; 0xb4
 8002b52:	f7fe fabd 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(drainage_time_3,15);
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <choose_var+0x65c>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fb8d 	bl	800227c <save_var>
	}
	if(page==4 && var == 1 && menu_pressed==0)
 8002b62:	4b30      	ldr	r3, [pc, #192]	; (8002c24 <choose_var+0x634>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d13c      	bne.n	8002be4 <choose_var+0x5f4>
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <choose_var+0x638>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d138      	bne.n	8002be4 <choose_var+0x5f4>
 8002b72:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <choose_var+0x63c>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d134      	bne.n	8002be4 <choose_var+0x5f4>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, GREEN);
 8002b7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2361      	movs	r3, #97	; 0x61
 8002b82:	f240 1231 	movw	r2, #305	; 0x131
 8002b86:	214d      	movs	r1, #77	; 0x4d
 8002b88:	200a      	movs	r0, #10
 8002b8a:	f7fe f989 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&volume_4);
 8002b8e:	4830      	ldr	r0, [pc, #192]	; (8002c50 <choose_var+0x660>)
 8002b90:	f7ff fcee 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", volume_4);
 8002b94:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <choose_var+0x660>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b9e:	4925      	ldr	r1, [pc, #148]	; (8002c34 <choose_var+0x644>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f005 fef1 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 80, WHITE, 2, BLUE);
 8002ba6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002baa:	231f      	movs	r3, #31
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2302      	movs	r3, #2
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	2250      	movs	r2, #80	; 0x50
 8002bb8:	21b4      	movs	r1, #180	; 0xb4
 8002bba:	f7fe fa89 	bl	80010d0 <ILI9341_Draw_Text>
		cast_16_to_8(volume_4, &volume_4_1, &volume_4_2);
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <choose_var+0x660>)
 8002bc0:	881b      	ldrh	r3, [r3, #0]
 8002bc2:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <choose_var+0x664>)
 8002bc4:	4924      	ldr	r1, [pc, #144]	; (8002c58 <choose_var+0x668>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fbc2 	bl	8002350 <cast_16_to_8>
		save_var(volume_4_1, 16);
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <choose_var+0x668>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2110      	movs	r1, #16
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fb52 	bl	800227c <save_var>
		save_var(volume_4_2, 17);
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <choose_var+0x664>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2111      	movs	r1, #17
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fb4c 	bl	800227c <save_var>
	}
	if(page==4 && var == 2 && menu_pressed==0)
 8002be4:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <choose_var+0x634>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b04      	cmp	r3, #4
 8002bea:	d151      	bne.n	8002c90 <choose_var+0x6a0>
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <choose_var+0x638>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d14d      	bne.n	8002c90 <choose_var+0x6a0>
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <choose_var+0x63c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d149      	bne.n	8002c90 <choose_var+0x6a0>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, GREEN);
 8002bfc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2375      	movs	r3, #117	; 0x75
 8002c04:	f240 1231 	movw	r2, #305	; 0x131
 8002c08:	2162      	movs	r1, #98	; 0x62
 8002c0a:	200a      	movs	r0, #10
 8002c0c:	f7fe f948 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&k_volume_4);
 8002c10:	4812      	ldr	r0, [pc, #72]	; (8002c5c <choose_var+0x66c>)
 8002c12:	f7ff fcad 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", k_volume_4);
 8002c16:	4b11      	ldr	r3, [pc, #68]	; (8002c5c <choose_var+0x66c>)
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	e020      	b.n	8002c60 <choose_var+0x670>
 8002c1e:	bf00      	nop
 8002c20:	20000318 	.word	0x20000318
 8002c24:	20000307 	.word	0x20000307
 8002c28:	20000306 	.word	0x20000306
 8002c2c:	200002b0 	.word	0x200002b0
 8002c30:	200002ea 	.word	0x200002ea
 8002c34:	0800ae50 	.word	0x0800ae50
 8002c38:	20000302 	.word	0x20000302
 8002c3c:	200002ce 	.word	0x200002ce
 8002c40:	200002b2 	.word	0x200002b2
 8002c44:	20000314 	.word	0x20000314
 8002c48:	200002f2 	.word	0x200002f2
 8002c4c:	200002bc 	.word	0x200002bc
 8002c50:	200002fe 	.word	0x200002fe
 8002c54:	2000030e 	.word	0x2000030e
 8002c58:	200002c0 	.word	0x200002c0
 8002c5c:	200002ec 	.word	0x200002ec
 8002c60:	f107 0318 	add.w	r3, r7, #24
 8002c64:	493f      	ldr	r1, [pc, #252]	; (8002d64 <choose_var+0x774>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f005 fe8e 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 100, WHITE, 2, BLUE);
 8002c6c:	f107 0018 	add.w	r0, r7, #24
 8002c70:	231f      	movs	r3, #31
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	2302      	movs	r3, #2
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7c:	2264      	movs	r2, #100	; 0x64
 8002c7e:	21b4      	movs	r1, #180	; 0xb4
 8002c80:	f7fe fa26 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(k_volume_4,18);
 8002c84:	4b38      	ldr	r3, [pc, #224]	; (8002d68 <choose_var+0x778>)
 8002c86:	881b      	ldrh	r3, [r3, #0]
 8002c88:	2112      	movs	r1, #18
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff faf6 	bl	800227c <save_var>

	}
	if(page==4 && var == 3 && menu_pressed==0)
 8002c90:	4b36      	ldr	r3, [pc, #216]	; (8002d6c <choose_var+0x77c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d12f      	bne.n	8002cf8 <choose_var+0x708>
 8002c98:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <choose_var+0x780>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d12b      	bne.n	8002cf8 <choose_var+0x708>
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <choose_var+0x784>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d127      	bne.n	8002cf8 <choose_var+0x708>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, GREEN);
 8002ca8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2389      	movs	r3, #137	; 0x89
 8002cb0:	f240 1231 	movw	r2, #305	; 0x131
 8002cb4:	2176      	movs	r1, #118	; 0x76
 8002cb6:	200a      	movs	r0, #10
 8002cb8:	f7fe f8f2 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&gas_time_4);
 8002cbc:	482e      	ldr	r0, [pc, #184]	; (8002d78 <choose_var+0x788>)
 8002cbe:	f7ff fc57 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", gas_time_4);
 8002cc2:	4b2d      	ldr	r3, [pc, #180]	; (8002d78 <choose_var+0x788>)
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4925      	ldr	r1, [pc, #148]	; (8002d64 <choose_var+0x774>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f005 fe5a 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 120, WHITE, 2, BLUE);
 8002cd4:	f107 000c 	add.w	r0, r7, #12
 8002cd8:	231f      	movs	r3, #31
 8002cda:	9301      	str	r3, [sp, #4]
 8002cdc:	2302      	movs	r3, #2
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce4:	2278      	movs	r2, #120	; 0x78
 8002ce6:	21b4      	movs	r1, #180	; 0xb4
 8002ce8:	f7fe f9f2 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(gas_time_4,19);
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <choose_var+0x788>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	2113      	movs	r1, #19
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fac2 	bl	800227c <save_var>
	}
	if(page==4 && var == 4 && menu_pressed==0)
 8002cf8:	4b1c      	ldr	r3, [pc, #112]	; (8002d6c <choose_var+0x77c>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d12d      	bne.n	8002d5c <choose_var+0x76c>
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <choose_var+0x780>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d129      	bne.n	8002d5c <choose_var+0x76c>
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <choose_var+0x784>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d125      	bne.n	8002d5c <choose_var+0x76c>
	{
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, GREEN);
 8002d10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	239d      	movs	r3, #157	; 0x9d
 8002d18:	f240 1231 	movw	r2, #305	; 0x131
 8002d1c:	218a      	movs	r1, #138	; 0x8a
 8002d1e:	200a      	movs	r0, #10
 8002d20:	f7fe f8be 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		change_var(&drainage_time_4);
 8002d24:	4815      	ldr	r0, [pc, #84]	; (8002d7c <choose_var+0x78c>)
 8002d26:	f7ff fc23 	bl	8002570 <change_var>
		char menu_buf[10];
		sprintf(menu_buf, "%.d", drainage_time_4);
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <choose_var+0x78c>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	463b      	mov	r3, r7
 8002d32:	490c      	ldr	r1, [pc, #48]	; (8002d64 <choose_var+0x774>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fe27 	bl	8008988 <siprintf>
		ILI9341_Draw_Text(menu_buf, 180, 140, WHITE, 2, BLUE);
 8002d3a:	4638      	mov	r0, r7
 8002d3c:	231f      	movs	r3, #31
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	2302      	movs	r3, #2
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d48:	228c      	movs	r2, #140	; 0x8c
 8002d4a:	21b4      	movs	r1, #180	; 0xb4
 8002d4c:	f7fe f9c0 	bl	80010d0 <ILI9341_Draw_Text>
		save_var(drainage_time_4,20);
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <choose_var+0x78c>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	2114      	movs	r1, #20
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fa90 	bl	800227c <save_var>
	}
}
 8002d5c:	bf00      	nop
 8002d5e:	37c0      	adds	r7, #192	; 0xc0
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	0800ae50 	.word	0x0800ae50
 8002d68:	200002ec 	.word	0x200002ec
 8002d6c:	20000307 	.word	0x20000307
 8002d70:	20000306 	.word	0x20000306
 8002d74:	200002b0 	.word	0x200002b0
 8002d78:	200002c8 	.word	0x200002c8
 8002d7c:	200002c6 	.word	0x200002c6

08002d80 <switch_page>:

void switch_page ()
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af02      	add	r7, sp, #8
	switch(page)
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <switch_page+0xe4>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d849      	bhi.n	8002e24 <switch_page+0xa4>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <switch_page+0x18>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dad 	.word	0x08002dad
 8002d9c:	08002dc9 	.word	0x08002dc9
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002e01 	.word	0x08002e01
 8002da8:	08002e1d 	.word	0x08002e1d
	{
	case 1:
	menu(volume_1,k_volume_1,gas_time_1,drainage_time_1); break;
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <switch_page+0xe8>)
 8002dae:	8818      	ldrh	r0, [r3, #0]
 8002db0:	4b2e      	ldr	r3, [pc, #184]	; (8002e6c <switch_page+0xec>)
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b2d9      	uxtb	r1, r3
 8002db6:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <switch_page+0xf0>)
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b2d      	ldr	r3, [pc, #180]	; (8002e74 <switch_page+0xf4>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f7ff fb07 	bl	80023d4 <menu>
 8002dc6:	e02e      	b.n	8002e26 <switch_page+0xa6>
	case 2:
	menu(volume_2,k_volume_2,gas_time_2,drainage_time_2); break;
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <switch_page+0xf8>)
 8002dca:	8818      	ldrh	r0, [r3, #0]
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	; (8002e7c <switch_page+0xfc>)
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b2d9      	uxtb	r1, r3
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <switch_page+0x100>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <switch_page+0x104>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f7ff faf9 	bl	80023d4 <menu>
 8002de2:	e020      	b.n	8002e26 <switch_page+0xa6>
	case 3:
	menu(volume_3,k_volume_3,gas_time_3,drainage_time_3); break;
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <switch_page+0x108>)
 8002de6:	8818      	ldrh	r0, [r3, #0]
 8002de8:	4b28      	ldr	r3, [pc, #160]	; (8002e8c <switch_page+0x10c>)
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b2d9      	uxtb	r1, r3
 8002dee:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <switch_page+0x110>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <switch_page+0x114>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f7ff faeb 	bl	80023d4 <menu>
 8002dfe:	e012      	b.n	8002e26 <switch_page+0xa6>
	case 4:
	menu(volume_4,k_volume_4,gas_time_4,drainage_time_4); break;
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <switch_page+0x118>)
 8002e02:	8818      	ldrh	r0, [r3, #0]
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <switch_page+0x11c>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b2d9      	uxtb	r1, r3
 8002e0a:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <switch_page+0x120>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <switch_page+0x124>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	f7ff fadd 	bl	80023d4 <menu>
 8002e1a:	e004      	b.n	8002e26 <switch_page+0xa6>
	case 5:
	page=0; break;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <switch_page+0xe4>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e000      	b.n	8002e26 <switch_page+0xa6>
	default:
	break;
 8002e24:	bf00      	nop
	}
	if(page>=5) page=5;
 8002e26:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <switch_page+0xe4>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d902      	bls.n	8002e34 <switch_page+0xb4>
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <switch_page+0xe4>)
 8002e30:	2205      	movs	r2, #5
 8002e32:	701a      	strb	r2, [r3, #0]
	if(page==0)
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <switch_page+0xe4>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d110      	bne.n	8002e5e <switch_page+0xde>
	{
		var=5;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <switch_page+0x128>)
 8002e3e:	2205      	movs	r2, #5
 8002e40:	701a      	strb	r2, [r3, #0]
		ILI9341_Fill_Screen(BLUE );
 8002e42:	201f      	movs	r0, #31
 8002e44:	f7fe fc42 	bl	80016cc <ILI9341_Fill_Screen>
		ILI9341_Draw_Text("Ready to start", 20, 100, WHITE, 3, BLUE);
 8002e48:	231f      	movs	r3, #31
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e54:	2264      	movs	r2, #100	; 0x64
 8002e56:	2114      	movs	r1, #20
 8002e58:	4814      	ldr	r0, [pc, #80]	; (8002eac <switch_page+0x12c>)
 8002e5a:	f7fe f939 	bl	80010d0 <ILI9341_Draw_Text>
	}
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000307 	.word	0x20000307
 8002e68:	200002e8 	.word	0x200002e8
 8002e6c:	20000310 	.word	0x20000310
 8002e70:	200002ee 	.word	0x200002ee
 8002e74:	200002d0 	.word	0x200002d0
 8002e78:	200002cc 	.word	0x200002cc
 8002e7c:	200002c2 	.word	0x200002c2
 8002e80:	20000318 	.word	0x20000318
 8002e84:	200002ea 	.word	0x200002ea
 8002e88:	20000302 	.word	0x20000302
 8002e8c:	20000314 	.word	0x20000314
 8002e90:	200002f2 	.word	0x200002f2
 8002e94:	200002bc 	.word	0x200002bc
 8002e98:	200002fe 	.word	0x200002fe
 8002e9c:	200002ec 	.word	0x200002ec
 8002ea0:	200002c8 	.word	0x200002c8
 8002ea4:	200002c6 	.word	0x200002c6
 8002ea8:	20000306 	.word	0x20000306
 8002eac:	0800ae38 	.word	0x0800ae38

08002eb0 <switch_var>:

void switch_var()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af02      	add	r7, sp, #8
	switch(var)
 8002eb6:	4b87      	ldr	r3, [pc, #540]	; (80030d4 <switch_var+0x224>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	f200 80fe 	bhi.w	80030be <switch_var+0x20e>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <switch_var+0x18>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002f51 	.word	0x08002f51
 8002ed0:	08002faf 	.word	0x08002faf
 8002ed4:	0800300d 	.word	0x0800300d
 8002ed8:	0800307d 	.word	0x0800307d
 8002edc:	080030b7 	.word	0x080030b7
	{
	case 1:
		//ILI9341_Fill_Screen(BLUE );
		//menu(volume_1,k_volume_1,gas_time_1,drainage_time_1);
		ILI9341_Draw_Hollow_Rectangle_Coord(90, 17, 180, 47, WHITE);
 8002ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	232f      	movs	r3, #47	; 0x2f
 8002ee8:	22b4      	movs	r2, #180	; 0xb4
 8002eea:	2111      	movs	r1, #17
 8002eec:	205a      	movs	r0, #90	; 0x5a
 8002eee:	f7fd ffd7 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, WHITE);
 8002ef2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2361      	movs	r3, #97	; 0x61
 8002efa:	f240 1231 	movw	r2, #305	; 0x131
 8002efe:	214d      	movs	r1, #77	; 0x4d
 8002f00:	200a      	movs	r0, #10
 8002f02:	f7fd ffcd 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, BLUE);
 8002f06:	231f      	movs	r3, #31
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2375      	movs	r3, #117	; 0x75
 8002f0c:	f240 1231 	movw	r2, #305	; 0x131
 8002f10:	2162      	movs	r1, #98	; 0x62
 8002f12:	200a      	movs	r0, #10
 8002f14:	f7fd ffc4 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, BLUE);
 8002f18:	231f      	movs	r3, #31
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2389      	movs	r3, #137	; 0x89
 8002f1e:	f240 1231 	movw	r2, #305	; 0x131
 8002f22:	2176      	movs	r1, #118	; 0x76
 8002f24:	200a      	movs	r0, #10
 8002f26:	f7fd ffbb 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, BLUE);
 8002f2a:	231f      	movs	r3, #31
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	239d      	movs	r3, #157	; 0x9d
 8002f30:	f240 1231 	movw	r2, #305	; 0x131
 8002f34:	218a      	movs	r1, #138	; 0x8a
 8002f36:	200a      	movs	r0, #10
 8002f38:	f7fd ffb2 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(5, 175, 305, 210, BLUE);
 8002f3c:	231f      	movs	r3, #31
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	23d2      	movs	r3, #210	; 0xd2
 8002f42:	f240 1231 	movw	r2, #305	; 0x131
 8002f46:	21af      	movs	r1, #175	; 0xaf
 8002f48:	2005      	movs	r0, #5
 8002f4a:	f7fd ffa9 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		//change_var(volume_1);
		break;
 8002f4e:	e0b7      	b.n	80030c0 <switch_var+0x210>
	case 2:
		//ILI9341_Fill_Screen(BLUE );
		//menu(volume_1,k_volume_1,gas_time_1,drainage_time_1);
		ILI9341_Draw_Hollow_Rectangle_Coord(90, 17, 180, 47, WHITE);
 8002f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	232f      	movs	r3, #47	; 0x2f
 8002f58:	22b4      	movs	r2, #180	; 0xb4
 8002f5a:	2111      	movs	r1, #17
 8002f5c:	205a      	movs	r0, #90	; 0x5a
 8002f5e:	f7fd ff9f 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, BLUE);
 8002f62:	231f      	movs	r3, #31
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2361      	movs	r3, #97	; 0x61
 8002f68:	f240 1231 	movw	r2, #305	; 0x131
 8002f6c:	214d      	movs	r1, #77	; 0x4d
 8002f6e:	200a      	movs	r0, #10
 8002f70:	f7fd ff96 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, WHITE);
 8002f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2375      	movs	r3, #117	; 0x75
 8002f7c:	f240 1231 	movw	r2, #305	; 0x131
 8002f80:	2162      	movs	r1, #98	; 0x62
 8002f82:	200a      	movs	r0, #10
 8002f84:	f7fd ff8c 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, BLUE);
 8002f88:	231f      	movs	r3, #31
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	2389      	movs	r3, #137	; 0x89
 8002f8e:	f240 1231 	movw	r2, #305	; 0x131
 8002f92:	2176      	movs	r1, #118	; 0x76
 8002f94:	200a      	movs	r0, #10
 8002f96:	f7fd ff83 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, BLUE);
 8002f9a:	231f      	movs	r3, #31
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	239d      	movs	r3, #157	; 0x9d
 8002fa0:	f240 1231 	movw	r2, #305	; 0x131
 8002fa4:	218a      	movs	r1, #138	; 0x8a
 8002fa6:	200a      	movs	r0, #10
 8002fa8:	f7fd ff7a 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		break;
 8002fac:	e088      	b.n	80030c0 <switch_var+0x210>
	case 3:
		//ILI9341_Fill_Screen(BLUE );
		//menu(volume_1,k_volume_1,gas_time_1,drainage_time_1);
		ILI9341_Draw_Hollow_Rectangle_Coord(90, 17, 180, 47, WHITE);
 8002fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	232f      	movs	r3, #47	; 0x2f
 8002fb6:	22b4      	movs	r2, #180	; 0xb4
 8002fb8:	2111      	movs	r1, #17
 8002fba:	205a      	movs	r0, #90	; 0x5a
 8002fbc:	f7fd ff70 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, BLUE);
 8002fc0:	231f      	movs	r3, #31
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	2361      	movs	r3, #97	; 0x61
 8002fc6:	f240 1231 	movw	r2, #305	; 0x131
 8002fca:	214d      	movs	r1, #77	; 0x4d
 8002fcc:	200a      	movs	r0, #10
 8002fce:	f7fd ff67 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, BLUE);
 8002fd2:	231f      	movs	r3, #31
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2375      	movs	r3, #117	; 0x75
 8002fd8:	f240 1231 	movw	r2, #305	; 0x131
 8002fdc:	2162      	movs	r1, #98	; 0x62
 8002fde:	200a      	movs	r0, #10
 8002fe0:	f7fd ff5e 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, WHITE);
 8002fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	2389      	movs	r3, #137	; 0x89
 8002fec:	f240 1231 	movw	r2, #305	; 0x131
 8002ff0:	2176      	movs	r1, #118	; 0x76
 8002ff2:	200a      	movs	r0, #10
 8002ff4:	f7fd ff54 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, BLUE);
 8002ff8:	231f      	movs	r3, #31
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	239d      	movs	r3, #157	; 0x9d
 8002ffe:	f240 1231 	movw	r2, #305	; 0x131
 8003002:	218a      	movs	r1, #138	; 0x8a
 8003004:	200a      	movs	r0, #10
 8003006:	f7fd ff4b 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		break;
 800300a:	e059      	b.n	80030c0 <switch_var+0x210>
	case 4:
		//ILI9341_Fill_Screen(BLUE );
		//menu(volume_1,k_volume_1,gas_time_1,drainage_time_1);
		ILI9341_Draw_Hollow_Rectangle_Coord(90, 17, 180, 47, WHITE);
 800300c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	232f      	movs	r3, #47	; 0x2f
 8003014:	22b4      	movs	r2, #180	; 0xb4
 8003016:	2111      	movs	r1, #17
 8003018:	205a      	movs	r0, #90	; 0x5a
 800301a:	f7fd ff41 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, BLUE);
 800301e:	231f      	movs	r3, #31
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2361      	movs	r3, #97	; 0x61
 8003024:	f240 1231 	movw	r2, #305	; 0x131
 8003028:	214d      	movs	r1, #77	; 0x4d
 800302a:	200a      	movs	r0, #10
 800302c:	f7fd ff38 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, BLUE);
 8003030:	231f      	movs	r3, #31
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2375      	movs	r3, #117	; 0x75
 8003036:	f240 1231 	movw	r2, #305	; 0x131
 800303a:	2162      	movs	r1, #98	; 0x62
 800303c:	200a      	movs	r0, #10
 800303e:	f7fd ff2f 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, BLUE);
 8003042:	231f      	movs	r3, #31
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2389      	movs	r3, #137	; 0x89
 8003048:	f240 1231 	movw	r2, #305	; 0x131
 800304c:	2176      	movs	r1, #118	; 0x76
 800304e:	200a      	movs	r0, #10
 8003050:	f7fd ff26 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, WHITE);
 8003054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	239d      	movs	r3, #157	; 0x9d
 800305c:	f240 1231 	movw	r2, #305	; 0x131
 8003060:	218a      	movs	r1, #138	; 0x8a
 8003062:	200a      	movs	r0, #10
 8003064:	f7fd ff1c 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(5, 175, 305, 210, BLUE);
 8003068:	231f      	movs	r3, #31
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	23d2      	movs	r3, #210	; 0xd2
 800306e:	f240 1231 	movw	r2, #305	; 0x131
 8003072:	21af      	movs	r1, #175	; 0xaf
 8003074:	2005      	movs	r0, #5
 8003076:	f7fd ff13 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		break;
 800307a:	e021      	b.n	80030c0 <switch_var+0x210>
	case 5:
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, BLUE);
 800307c:	231f      	movs	r3, #31
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2361      	movs	r3, #97	; 0x61
 8003082:	f240 1231 	movw	r2, #305	; 0x131
 8003086:	214d      	movs	r1, #77	; 0x4d
 8003088:	200a      	movs	r0, #10
 800308a:	f7fd ff09 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, BLUE);
 800308e:	231f      	movs	r3, #31
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	239d      	movs	r3, #157	; 0x9d
 8003094:	f240 1231 	movw	r2, #305	; 0x131
 8003098:	218a      	movs	r1, #138	; 0x8a
 800309a:	200a      	movs	r0, #10
 800309c:	f7fd ff00 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(5, 175, 305, 210, WHITE);
 80030a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	23d2      	movs	r3, #210	; 0xd2
 80030a8:	f240 1231 	movw	r2, #305	; 0x131
 80030ac:	21af      	movs	r1, #175	; 0xaf
 80030ae:	2005      	movs	r0, #5
 80030b0:	f7fd fef6 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		break;
 80030b4:	e004      	b.n	80030c0 <switch_var+0x210>
	case 6:
		var=0; break;
 80030b6:	4b07      	ldr	r3, [pc, #28]	; (80030d4 <switch_var+0x224>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	e000      	b.n	80030c0 <switch_var+0x210>
	default:
		break;
 80030be:	bf00      	nop
	}
	if(var>=6) var=6;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <switch_var+0x224>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d902      	bls.n	80030ce <switch_var+0x21e>
 80030c8:	4b02      	ldr	r3, [pc, #8]	; (80030d4 <switch_var+0x224>)
 80030ca:	2206      	movs	r2, #6
 80030cc:	701a      	strb	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000306 	.word	0x20000306

080030d8 <switch_to_var>:

void switch_to_var ()
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af02      	add	r7, sp, #8
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0 && menu_pressed==0 && page!=0)
 80030de:	2120      	movs	r1, #32
 80030e0:	4834      	ldr	r0, [pc, #208]	; (80031b4 <switch_to_var+0xdc>)
 80030e2:	f001 fc7f 	bl	80049e4 <HAL_GPIO_ReadPin>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d116      	bne.n	800311a <switch_to_var+0x42>
 80030ec:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <switch_to_var+0xe0>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d112      	bne.n	800311a <switch_to_var+0x42>
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <switch_to_var+0xe4>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <switch_to_var+0x42>
	{
		menu_pressed=1;
 80030fc:	4b2e      	ldr	r3, [pc, #184]	; (80031b8 <switch_to_var+0xe0>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Hollow_Rectangle_Coord(90, 17, 180, 47, WHITE);
 8003102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	232f      	movs	r3, #47	; 0x2f
 800310a:	22b4      	movs	r2, #180	; 0xb4
 800310c:	2111      	movs	r1, #17
 800310e:	205a      	movs	r0, #90	; 0x5a
 8003110:	f7fd fec6 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		HAL_Delay(150);
 8003114:	2096      	movs	r0, #150	; 0x96
 8003116:	f001 f993 	bl	8004440 <HAL_Delay>
	}
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0 && menu_pressed==1 && page!=0)
 800311a:	2120      	movs	r1, #32
 800311c:	4825      	ldr	r0, [pc, #148]	; (80031b4 <switch_to_var+0xdc>)
 800311e:	f001 fc61 	bl	80049e4 <HAL_GPIO_ReadPin>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d142      	bne.n	80031ae <switch_to_var+0xd6>
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <switch_to_var+0xe0>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d13e      	bne.n	80031ae <switch_to_var+0xd6>
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <switch_to_var+0xe4>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d03a      	beq.n	80031ae <switch_to_var+0xd6>
	{
		menu_pressed=0;
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <switch_to_var+0xe0>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(150);
 800313e:	2096      	movs	r0, #150	; 0x96
 8003140:	f001 f97e 	bl	8004440 <HAL_Delay>
		ILI9341_Draw_Hollow_Rectangle_Coord(90, 17, 180, 47, BLUE);
 8003144:	231f      	movs	r3, #31
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	232f      	movs	r3, #47	; 0x2f
 800314a:	22b4      	movs	r2, #180	; 0xb4
 800314c:	2111      	movs	r1, #17
 800314e:	205a      	movs	r0, #90	; 0x5a
 8003150:	f7fd fea6 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 77, 305, 97, BLUE);
 8003154:	231f      	movs	r3, #31
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2361      	movs	r3, #97	; 0x61
 800315a:	f240 1231 	movw	r2, #305	; 0x131
 800315e:	214d      	movs	r1, #77	; 0x4d
 8003160:	200a      	movs	r0, #10
 8003162:	f7fd fe9d 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 98, 305, 117, BLUE);
 8003166:	231f      	movs	r3, #31
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2375      	movs	r3, #117	; 0x75
 800316c:	f240 1231 	movw	r2, #305	; 0x131
 8003170:	2162      	movs	r1, #98	; 0x62
 8003172:	200a      	movs	r0, #10
 8003174:	f7fd fe94 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 118, 305, 137, BLUE);
 8003178:	231f      	movs	r3, #31
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2389      	movs	r3, #137	; 0x89
 800317e:	f240 1231 	movw	r2, #305	; 0x131
 8003182:	2176      	movs	r1, #118	; 0x76
 8003184:	200a      	movs	r0, #10
 8003186:	f7fd fe8b 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(10, 138, 305, 157, BLUE);
 800318a:	231f      	movs	r3, #31
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	239d      	movs	r3, #157	; 0x9d
 8003190:	f240 1231 	movw	r2, #305	; 0x131
 8003194:	218a      	movs	r1, #138	; 0x8a
 8003196:	200a      	movs	r0, #10
 8003198:	f7fd fe82 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
		ILI9341_Draw_Hollow_Rectangle_Coord(5, 175, 305, 210, BLUE);
 800319c:	231f      	movs	r3, #31
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	23d2      	movs	r3, #210	; 0xd2
 80031a2:	f240 1231 	movw	r2, #305	; 0x131
 80031a6:	21af      	movs	r1, #175	; 0xaf
 80031a8:	2005      	movs	r0, #5
 80031aa:	f7fd fe79 	bl	8000ea0 <ILI9341_Draw_Hollow_Rectangle_Coord>
	}

}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40020400 	.word	0x40020400
 80031b8:	200002b0 	.word	0x200002b0
 80031bc:	20000307 	.word	0x20000307

080031c0 <menu_change>:

void menu_change ()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==0 && menu_pressed==1 && page!=0)
 80031c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031c8:	4819      	ldr	r0, [pc, #100]	; (8003230 <menu_change+0x70>)
 80031ca:	f001 fc0b 	bl	80049e4 <HAL_GPIO_ReadPin>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10f      	bne.n	80031f4 <menu_change+0x34>
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <menu_change+0x74>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d10b      	bne.n	80031f4 <menu_change+0x34>
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <menu_change+0x78>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <menu_change+0x34>
	{
		var++;
 80031e4:	4b15      	ldr	r3, [pc, #84]	; (800323c <menu_change+0x7c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <menu_change+0x7c>)
 80031ee:	701a      	strb	r2, [r3, #0]
		switch_var();
 80031f0:	f7ff fe5e 	bl	8002eb0 <switch_var>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)==0 && menu_pressed==1 && page!=0)
 80031f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031f8:	480d      	ldr	r0, [pc, #52]	; (8003230 <menu_change+0x70>)
 80031fa:	f001 fbf3 	bl	80049e4 <HAL_GPIO_ReadPin>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <menu_change+0x64>
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <menu_change+0x74>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d10b      	bne.n	8003224 <menu_change+0x64>
 800320c:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <menu_change+0x78>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <menu_change+0x64>
		{
			var--;
 8003214:	4b09      	ldr	r3, [pc, #36]	; (800323c <menu_change+0x7c>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	3b01      	subs	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <menu_change+0x7c>)
 800321e:	701a      	strb	r2, [r3, #0]
			switch_var();
 8003220:	f7ff fe46 	bl	8002eb0 <switch_var>
	char var_buf[10];
	sprintf(var_buf, "%.d", var);
	ILI9341_Draw_Text(var_buf, 180, 160, WHITE, 2, BLUE);
	*/
	//if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)==0) break;
	HAL_Delay(100);
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	f001 f90b 	bl	8004440 <HAL_Delay>

}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40020400 	.word	0x40020400
 8003234:	200002b0 	.word	0x200002b0
 8003238:	20000307 	.word	0x20000307
 800323c:	20000306 	.word	0x20000306

08003240 <switch_menu>:




void switch_menu()
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	if(page==0)
 8003244:	4b22      	ldr	r3, [pc, #136]	; (80032d0 <switch_menu+0x90>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <switch_menu+0x12>
	{
	var=5;
 800324c:	4b21      	ldr	r3, [pc, #132]	; (80032d4 <switch_menu+0x94>)
 800324e:	2205      	movs	r2, #5
 8003250:	701a      	strb	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9)==0 && menu_pressed==0 && var==5)
 8003252:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003256:	4820      	ldr	r0, [pc, #128]	; (80032d8 <switch_menu+0x98>)
 8003258:	f001 fbc4 	bl	80049e4 <HAL_GPIO_ReadPin>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d112      	bne.n	8003288 <switch_menu+0x48>
 8003262:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <switch_menu+0x9c>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <switch_menu+0x48>
 800326a:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <switch_menu+0x94>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b05      	cmp	r3, #5
 8003270:	d10a      	bne.n	8003288 <switch_menu+0x48>
	{
		page++;
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <switch_menu+0x90>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	3301      	adds	r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <switch_menu+0x90>)
 800327c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800327e:	2064      	movs	r0, #100	; 0x64
 8003280:	f001 f8de 	bl	8004440 <HAL_Delay>
		switch_page ();
 8003284:	f7ff fd7c 	bl	8002d80 <switch_page>
	}
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)==0 && menu_pressed==0 && var==5)
 8003288:	f44f 7180 	mov.w	r1, #256	; 0x100
 800328c:	4812      	ldr	r0, [pc, #72]	; (80032d8 <switch_menu+0x98>)
 800328e:	f001 fba9 	bl	80049e4 <HAL_GPIO_ReadPin>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d112      	bne.n	80032be <switch_menu+0x7e>
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <switch_menu+0x9c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10e      	bne.n	80032be <switch_menu+0x7e>
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <switch_menu+0x94>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b05      	cmp	r3, #5
 80032a6:	d10a      	bne.n	80032be <switch_menu+0x7e>
	{
		page--;
 80032a8:	4b09      	ldr	r3, [pc, #36]	; (80032d0 <switch_menu+0x90>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <switch_menu+0x90>)
 80032b2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80032b4:	2064      	movs	r0, #100	; 0x64
 80032b6:	f001 f8c3 	bl	8004440 <HAL_Delay>
		switch_page ();
 80032ba:	f7ff fd61 	bl	8002d80 <switch_page>
 	}
	switch_to_var();
 80032be:	f7ff ff0b 	bl	80030d8 <switch_to_var>
	menu_change();
 80032c2:	f7ff ff7d 	bl	80031c0 <menu_change>
	choose_var();
 80032c6:	f7ff f993 	bl	80025f0 <choose_var>
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000307 	.word	0x20000307
 80032d4:	20000306 	.word	0x20000306
 80032d8:	40020400 	.word	0x40020400
 80032dc:	200002b0 	.word	0x200002b0

080032e0 <save>:


#include "pouring.h"

void save ()
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af04      	add	r7, sp, #16
	 //const char wmsg[] = "10";
	 //char rmsg[sizeof(wmsg)];


	uint8_t data=pwm_start_correction/100;
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <save+0x88>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	4a20      	ldr	r2, [pc, #128]	; (800336c <save+0x8c>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	095b      	lsrs	r3, r3, #5
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	72bb      	strb	r3, [r7, #10]
	// HAL expects address to be shifted one bit to the left
	uint16_t devAddr = (0x50 << 1);
 80032f8:	23a0      	movs	r3, #160	; 0xa0
 80032fa:	81fb      	strh	r3, [r7, #14]
	uint16_t memAddr = 0x0100;
 80032fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003300:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status;

	HAL_I2C_Mem_Write(&hi2c2, devAddr, memAddr, I2C_MEMADD_SIZE_16BIT,
 8003302:	89ba      	ldrh	r2, [r7, #12]
 8003304:	89f9      	ldrh	r1, [r7, #14]
 8003306:	f04f 33ff 	mov.w	r3, #4294967295
 800330a:	9302      	str	r3, [sp, #8]
 800330c:	2301      	movs	r3, #1
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	f107 030a 	add.w	r3, r7, #10
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2310      	movs	r3, #16
 8003318:	4815      	ldr	r0, [pc, #84]	; (8003370 <save+0x90>)
 800331a:	f001 fcfd 	bl	8004d18 <HAL_I2C_Mem_Write>
		 &data, 1, HAL_MAX_DELAY);

	    for(;;) { // wait...
	        status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1,
 800331e:	89f9      	ldrh	r1, [r7, #14]
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
 8003324:	2201      	movs	r2, #1
 8003326:	4812      	ldr	r0, [pc, #72]	; (8003370 <save+0x90>)
 8003328:	f002 f816 	bl	8005358 <HAL_I2C_IsDeviceReady>
 800332c:	4603      	mov	r3, r0
 800332e:	72fb      	strb	r3, [r7, #11]
	                                        HAL_MAX_DELAY);
	        if(status == HAL_OK)
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d000      	beq.n	8003338 <save+0x58>
	        status = HAL_I2C_IsDeviceReady(&hi2c2, devAddr, 1,
 8003336:	e7f2      	b.n	800331e <save+0x3e>
	            break;
 8003338:	bf00      	nop
	    }

	    char data_buf[10];
	    sprintf(data_buf, "%d", data);
 800333a:	7abb      	ldrb	r3, [r7, #10]
 800333c:	461a      	mov	r2, r3
 800333e:	463b      	mov	r3, r7
 8003340:	490c      	ldr	r1, [pc, #48]	; (8003374 <save+0x94>)
 8003342:	4618      	mov	r0, r3
 8003344:	f005 fb20 	bl	8008988 <siprintf>
	    ILI9341_Draw_Text(data_buf, 10, 10, WHITE, 2, BLUE);
 8003348:	4638      	mov	r0, r7
 800334a:	231f      	movs	r3, #31
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2302      	movs	r3, #2
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003356:	220a      	movs	r2, #10
 8003358:	210a      	movs	r1, #10
 800335a:	f7fd feb9 	bl	80010d0 <ILI9341_Draw_Text>

}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000030c 	.word	0x2000030c
 800336c:	51eb851f 	.word	0x51eb851f
 8003370:	2000025c 	.word	0x2000025c
 8003374:	0800aebc 	.word	0x0800aebc

08003378 <load>:

void load()
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af04      	add	r7, sp, #16
	uint8_t data;
	// HAL expects address to be shifted one bit to the left
	uint16_t devAddr = (0x50 << 1);
 800337e:	23a0      	movs	r3, #160	; 0xa0
 8003380:	81fb      	strh	r3, [r7, #14]
	uint16_t memAddr = 0x0100;
 8003382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003386:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c2, devAddr, memAddr, I2C_MEMADD_SIZE_16BIT,
 8003388:	89ba      	ldrh	r2, [r7, #12]
 800338a:	89f9      	ldrh	r1, [r7, #14]
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	9302      	str	r3, [sp, #8]
 8003392:	2301      	movs	r3, #1
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	f107 030b 	add.w	r3, r7, #11
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2310      	movs	r3, #16
 800339e:	4813      	ldr	r0, [pc, #76]	; (80033ec <load+0x74>)
 80033a0:	f001 fdb4 	bl	8004f0c <HAL_I2C_Mem_Read>
			&data, 1, HAL_MAX_DELAY);
	pwm_start_correction=data*100;
 80033a4:	7afb      	ldrb	r3, [r7, #11]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	0092      	lsls	r2, r2, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	461a      	mov	r2, r3
 80033b0:	0091      	lsls	r1, r2, #2
 80033b2:	461a      	mov	r2, r3
 80033b4:	460b      	mov	r3, r1
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <load+0x78>)
 80033be:	801a      	strh	r2, [r3, #0]

	char data_buf[10];
	sprintf(data_buf, "%d", data);
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	461a      	mov	r2, r3
 80033c4:	463b      	mov	r3, r7
 80033c6:	490b      	ldr	r1, [pc, #44]	; (80033f4 <load+0x7c>)
 80033c8:	4618      	mov	r0, r3
 80033ca:	f005 fadd 	bl	8008988 <siprintf>
	ILI9341_Draw_Text(data_buf, 10, 10, WHITE, 2, BLUE);
 80033ce:	4638      	mov	r0, r7
 80033d0:	231f      	movs	r3, #31
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2302      	movs	r3, #2
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033dc:	220a      	movs	r2, #10
 80033de:	210a      	movs	r1, #10
 80033e0:	f7fd fe76 	bl	80010d0 <ILI9341_Draw_Text>

}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	2000025c 	.word	0x2000025c
 80033f0:	2000030c 	.word	0x2000030c
 80033f4:	0800aebc 	.word	0x0800aebc

080033f8 <flow>:

void flow ()
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08e      	sub	sp, #56	; 0x38
 80033fc:	af02      	add	r7, sp, #8

	pulses_per_sec=pulses-last_pulses;
 80033fe:	4b63      	ldr	r3, [pc, #396]	; (800358c <flow+0x194>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29a      	uxth	r2, r3
 8003404:	4b62      	ldr	r3, [pc, #392]	; (8003590 <flow+0x198>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	b29a      	uxth	r2, r3
 800340c:	4b61      	ldr	r3, [pc, #388]	; (8003594 <flow+0x19c>)
 800340e:	801a      	strh	r2, [r3, #0]
	last_pulses=pulses;
 8003410:	4b5e      	ldr	r3, [pc, #376]	; (800358c <flow+0x194>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b29a      	uxth	r2, r3
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <flow+0x198>)
 8003418:	801a      	strh	r2, [r3, #0]
	liters_per_min=((float)pulses_per_sec/(float)ref_volume)/3*600/1000;
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <flow+0x19c>)
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003426:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <flow+0x1a0>)
 8003428:	edd3 7a00 	vldr	s15, [r3]
 800342c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003430:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003438:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800359c <flow+0x1a4>
 800343c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003440:	eddf 6a57 	vldr	s13, [pc, #348]	; 80035a0 <flow+0x1a8>
 8003444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003448:	4b56      	ldr	r3, [pc, #344]	; (80035a4 <flow+0x1ac>)
 800344a:	edc3 7a00 	vstr	s15, [r3]
	liters=pulses/ref_volume/1000;
 800344e:	4b4f      	ldr	r3, [pc, #316]	; (800358c <flow+0x194>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <flow+0x1a0>)
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003464:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80035a0 <flow+0x1a8>
 8003468:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800346c:	4b4e      	ldr	r3, [pc, #312]	; (80035a8 <flow+0x1b0>)
 800346e:	edc3 7a00 	vstr	s15, [r3]
	sprintf(flow_buf, "%d", pulses_per_sec);
	ILI9341_Draw_Text(flow_buf, 10, 80, WHITE, 2, BLUE);

*/
	char liters_buf[10];
	sprintf(liters_buf, "%.2f", liters);
 8003472:	4b4d      	ldr	r3, [pc, #308]	; (80035a8 <flow+0x1b0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f866 	bl	8000548 <__aeabi_f2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003484:	4949      	ldr	r1, [pc, #292]	; (80035ac <flow+0x1b4>)
 8003486:	f005 fa7f 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Volume:", 10, 140, WHITE, 2, BLUE);
 800348a:	231f      	movs	r3, #31
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003496:	228c      	movs	r2, #140	; 0x8c
 8003498:	210a      	movs	r1, #10
 800349a:	4845      	ldr	r0, [pc, #276]	; (80035b0 <flow+0x1b8>)
 800349c:	f7fd fe18 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(liters_buf, 150, 140, WHITE, 2, BLUE);
 80034a0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034a4:	231f      	movs	r3, #31
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034b0:	228c      	movs	r2, #140	; 0x8c
 80034b2:	2196      	movs	r1, #150	; 0x96
 80034b4:	f7fd fe0c 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("L", 200, 140, WHITE, 2, BLUE);
 80034b8:	231f      	movs	r3, #31
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	2302      	movs	r3, #2
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c4:	228c      	movs	r2, #140	; 0x8c
 80034c6:	21c8      	movs	r1, #200	; 0xc8
 80034c8:	483a      	ldr	r0, [pc, #232]	; (80035b4 <flow+0x1bc>)
 80034ca:	f7fd fe01 	bl	80010d0 <ILI9341_Draw_Text>


	char liters_per_min_buf[10];
	sprintf(liters_per_min_buf, "%.2f", liters_per_min);
 80034ce:	4b35      	ldr	r3, [pc, #212]	; (80035a4 <flow+0x1ac>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f838 	bl	8000548 <__aeabi_f2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	f107 0018 	add.w	r0, r7, #24
 80034e0:	4932      	ldr	r1, [pc, #200]	; (80035ac <flow+0x1b4>)
 80034e2:	f005 fa51 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Speed:", 10, 120, WHITE, 2, BLUE);
 80034e6:	231f      	movs	r3, #31
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f2:	2278      	movs	r2, #120	; 0x78
 80034f4:	210a      	movs	r1, #10
 80034f6:	4830      	ldr	r0, [pc, #192]	; (80035b8 <flow+0x1c0>)
 80034f8:	f7fd fdea 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(liters_per_min_buf, 150, 120, WHITE, 2, BLUE);
 80034fc:	f107 0018 	add.w	r0, r7, #24
 8003500:	231f      	movs	r3, #31
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	2302      	movs	r3, #2
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800350c:	2278      	movs	r2, #120	; 0x78
 800350e:	2196      	movs	r1, #150	; 0x96
 8003510:	f7fd fdde 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("L/m", 200, 120, WHITE, 2, BLUE);
 8003514:	231f      	movs	r3, #31
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003520:	2278      	movs	r2, #120	; 0x78
 8003522:	21c8      	movs	r1, #200	; 0xc8
 8003524:	4825      	ldr	r0, [pc, #148]	; (80035bc <flow+0x1c4>)
 8003526:	f7fd fdd3 	bl	80010d0 <ILI9341_Draw_Text>

	char pulses_buf[10];
	sprintf(pulses_buf, "%lu", pulses);
 800352a:	4b18      	ldr	r3, [pc, #96]	; (800358c <flow+0x194>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4923      	ldr	r1, [pc, #140]	; (80035c0 <flow+0x1c8>)
 8003534:	4618      	mov	r0, r3
 8003536:	f005 fa27 	bl	8008988 <siprintf>
	ILI9341_Draw_Text(pulses_buf, 150, 160, WHITE, 2, BLUE);
 800353a:	f107 000c 	add.w	r0, r7, #12
 800353e:	231f      	movs	r3, #31
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2302      	movs	r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800354a:	22a0      	movs	r2, #160	; 0xa0
 800354c:	2196      	movs	r1, #150	; 0x96
 800354e:	f7fd fdbf 	bl	80010d0 <ILI9341_Draw_Text>

	uint16_t end_vol=volume_1*k_volume_1;
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <flow+0x1cc>)
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <flow+0x1d0>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	fb12 f303 	smulbb	r3, r2, r3
 800355e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char test_buf[10];
	sprintf(test_buf, "%d", end_vol);
 8003560:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003562:	463b      	mov	r3, r7
 8003564:	4919      	ldr	r1, [pc, #100]	; (80035cc <flow+0x1d4>)
 8003566:	4618      	mov	r0, r3
 8003568:	f005 fa0e 	bl	8008988 <siprintf>
	ILI9341_Draw_Text(test_buf, 150, 180, WHITE, 2, BLUE);
 800356c:	4638      	mov	r0, r7
 800356e:	231f      	movs	r3, #31
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2302      	movs	r3, #2
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800357a:	22b4      	movs	r2, #180	; 0xb4
 800357c:	2196      	movs	r1, #150	; 0x96
 800357e:	f7fd fda7 	bl	80010d0 <ILI9341_Draw_Text>



}
 8003582:	bf00      	nop
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200002d8 	.word	0x200002d8
 8003590:	20000304 	.word	0x20000304
 8003594:	200002f4 	.word	0x200002f4
 8003598:	200002dc 	.word	0x200002dc
 800359c:	44160000 	.word	0x44160000
 80035a0:	447a0000 	.word	0x447a0000
 80035a4:	200002e4 	.word	0x200002e4
 80035a8:	200002b8 	.word	0x200002b8
 80035ac:	0800aec0 	.word	0x0800aec0
 80035b0:	0800aec8 	.word	0x0800aec8
 80035b4:	0800aed0 	.word	0x0800aed0
 80035b8:	0800aed4 	.word	0x0800aed4
 80035bc:	0800aedc 	.word	0x0800aedc
 80035c0:	0800aee0 	.word	0x0800aee0
 80035c4:	200002e8 	.word	0x200002e8
 80035c8:	20000310 	.word	0x20000310
 80035cc:	0800aebc 	.word	0x0800aebc

080035d0 <pwm_valve>:



void pwm_valve()
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
	if (liters_per_min<=pouring_speed)
 80035d6:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <pwm_valve+0xf0>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e2:	4b38      	ldr	r3, [pc, #224]	; (80036c4 <pwm_valve+0xf4>)
 80035e4:	edd3 7a00 	vldr	s15, [r3]
 80035e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f0:	db0e      	blt.n	8003610 <pwm_valve+0x40>
	{
		PWM-=step;
 80035f2:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <pwm_valve+0xf8>)
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	4b35      	ldr	r3, [pc, #212]	; (80036cc <pwm_valve+0xfc>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <pwm_valve+0xf8>)
 8003600:	801a      	strh	r2, [r3, #0]
		if(PWM<=50)
 8003602:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <pwm_valve+0xf8>)
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b32      	cmp	r3, #50	; 0x32
 8003608:	d802      	bhi.n	8003610 <pwm_valve+0x40>
		{
			PWM=50;
 800360a:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <pwm_valve+0xf8>)
 800360c:	2232      	movs	r2, #50	; 0x32
 800360e:	801a      	strh	r2, [r3, #0]
		}
	}
	if (liters_per_min>=pouring_speed)
 8003610:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <pwm_valve+0xf0>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800361c:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <pwm_valve+0xf4>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	d811      	bhi.n	8003650 <pwm_valve+0x80>
	{
		PWM+=step;
 800362c:	4b26      	ldr	r3, [pc, #152]	; (80036c8 <pwm_valve+0xf8>)
 800362e:	881a      	ldrh	r2, [r3, #0]
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <pwm_valve+0xfc>)
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	4413      	add	r3, r2
 8003636:	b29a      	uxth	r2, r3
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <pwm_valve+0xf8>)
 800363a:	801a      	strh	r2, [r3, #0]
		if(PWM>=9999)
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <pwm_valve+0xf8>)
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	f242 720e 	movw	r2, #9998	; 0x270e
 8003644:	4293      	cmp	r3, r2
 8003646:	d903      	bls.n	8003650 <pwm_valve+0x80>
		{
			PWM=9999;
 8003648:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <pwm_valve+0xf8>)
 800364a:	f242 720f 	movw	r2, #9999	; 0x270f
 800364e:	801a      	strh	r2, [r3, #0]
		}
	}
	TIM3->CCR4=PWM;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <pwm_valve+0xf8>)
 8003652:	881a      	ldrh	r2, [r3, #0]
 8003654:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <pwm_valve+0x100>)
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
	uint8_t duty_cycle;
	duty_cycle=PWM/100;
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <pwm_valve+0xf8>)
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	4a1d      	ldr	r2, [pc, #116]	; (80036d4 <pwm_valve+0x104>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	b29b      	uxth	r3, r3
 8003666:	73fb      	strb	r3, [r7, #15]
	char pwm_buf[10];
	sprintf(pwm_buf, "%d", duty_cycle);
 8003668:	7bfa      	ldrb	r2, [r7, #15]
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	491a      	ldr	r1, [pc, #104]	; (80036d8 <pwm_valve+0x108>)
 800366e:	4618      	mov	r0, r3
 8003670:	f005 f98a 	bl	8008988 <siprintf>
	ILI9341_Draw_Text("Duty cycle:", 10, 100, WHITE, 2, BLUE);
 8003674:	231f      	movs	r3, #31
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2302      	movs	r3, #2
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003680:	2264      	movs	r2, #100	; 0x64
 8003682:	210a      	movs	r1, #10
 8003684:	4815      	ldr	r0, [pc, #84]	; (80036dc <pwm_valve+0x10c>)
 8003686:	f7fd fd23 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(pwm_buf, 150, 100, WHITE, 2, BLUE);
 800368a:	1d38      	adds	r0, r7, #4
 800368c:	231f      	movs	r3, #31
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003698:	2264      	movs	r2, #100	; 0x64
 800369a:	2196      	movs	r1, #150	; 0x96
 800369c:	f7fd fd18 	bl	80010d0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("%", 180, 100, WHITE, 2, BLUE);
 80036a0:	231f      	movs	r3, #31
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2302      	movs	r3, #2
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80036ac:	2264      	movs	r2, #100	; 0x64
 80036ae:	21b4      	movs	r1, #180	; 0xb4
 80036b0:	480b      	ldr	r0, [pc, #44]	; (80036e0 <pwm_valve+0x110>)
 80036b2:	f7fd fd0d 	bl	80010d0 <ILI9341_Draw_Text>
}
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200002ca 	.word	0x200002ca
 80036c4:	200002e4 	.word	0x200002e4
 80036c8:	200002fc 	.word	0x200002fc
 80036cc:	20000308 	.word	0x20000308
 80036d0:	40000400 	.word	0x40000400
 80036d4:	51eb851f 	.word	0x51eb851f
 80036d8:	0800aebc 	.word	0x0800aebc
 80036dc:	0800aee4 	.word	0x0800aee4
 80036e0:	0800aef0 	.word	0x0800aef0

080036e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d107      	bne.n	8003706 <HAL_TIM_PeriodElapsedCallback+0x22>
        {
        	ms++;
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4b0f      	ldr	r3, [pc, #60]	; (800373c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003700:	801a      	strh	r2, [r3, #0]
        	time();
 8003702:	f000 f823 	bl	800374c <time>
        }
        if(htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370e:	d10e      	bne.n	800372e <HAL_TIM_PeriodElapsedCallback+0x4a>
                {
        			flow();
 8003710:	f7ff fe72 	bl	80033f8 <flow>
        			if(sec>=start_control_time || optimum_speed)
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d903      	bls.n	800372a <HAL_TIM_PeriodElapsedCallback+0x46>
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_TIM_PeriodElapsedCallback+0x4a>
        			{
        			pwm_valve();
 800372a:	f7ff ff51 	bl	80035d0 <pwm_valve>
        			}
                }
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	200002c4 	.word	0x200002c4
 8003740:	200002be 	.word	0x200002be
 8003744:	20000300 	.word	0x20000300
 8003748:	2000031a 	.word	0x2000031a

0800374c <time>:

void time()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
	//uint16_t sec=0;
	if(ms>=999)
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <time+0x54>)
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	f240 32e6 	movw	r2, #998	; 0x3e6
 800375a:	4293      	cmp	r3, r2
 800375c:	d91b      	bls.n	8003796 <time+0x4a>
	{
		sec++;
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <time+0x58>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	3301      	adds	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <time+0x58>)
 8003768:	801a      	strh	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOB, Signal_LED_Pin);
		ms=0;
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <time+0x54>)
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]

	char sec_buf[10];
	sprintf(sec_buf, "%d", sec);
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <time+0x58>)
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <time+0x5c>)
 800377a:	4618      	mov	r0, r3
 800377c:	f005 f904 	bl	8008988 <siprintf>
	ILI9341_Draw_Text(sec_buf, 210, 10, WHITE, 2, BLUE);
 8003780:	1d38      	adds	r0, r7, #4
 8003782:	231f      	movs	r3, #31
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	2302      	movs	r3, #2
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800378e:	220a      	movs	r2, #10
 8003790:	21d2      	movs	r1, #210	; 0xd2
 8003792:	f7fd fc9d 	bl	80010d0 <ILI9341_Draw_Text>


	}
}
 8003796:	bf00      	nop
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	200002c4 	.word	0x200002c4
 80037a4:	20000300 	.word	0x20000300
 80037a8:	0800aebc 	.word	0x0800aebc

080037ac <error_check>:



void error_check(uint16_t gas_time)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	80fb      	strh	r3, [r7, #6]
	if(pulses<=10 && sec-gas_time>2)										// check flow
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <error_check+0x64>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b0a      	cmp	r3, #10
 80037bc:	d80d      	bhi.n	80037da <error_check+0x2e>
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <error_check+0x68>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	dd06      	ble.n	80037da <error_check+0x2e>
	{
		start_pulse_error=1;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <error_check+0x6c>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
		error_recovery=1;
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <error_check+0x70>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e002      	b.n	80037e0 <error_check+0x34>
	} else
	{
		start_pulse_error=0;
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <error_check+0x6c>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
	}
	if (liters_per_min>=pouring_speed) 										//check if speed optimal
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <error_check+0x74>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <error_check+0x78>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	d900      	bls.n	80037fe <error_check+0x52>
	{
		optimum_speed=1;
	}

}
 80037fc:	e002      	b.n	8003804 <error_check+0x58>
		optimum_speed=1;
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <error_check+0x7c>)
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	200002d8 	.word	0x200002d8
 8003814:	20000300 	.word	0x20000300
 8003818:	200002e0 	.word	0x200002e0
 800381c:	200002bf 	.word	0x200002bf
 8003820:	200002ca 	.word	0x200002ca
 8003824:	200002e4 	.word	0x200002e4
 8003828:	2000031a 	.word	0x2000031a

0800382c <error_hendler>:

void error_hendler()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
	if (start_pulse_error==1)
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <error_hendler+0x34>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <error_hendler+0x10>
	{
		pwm_valve();
 8003838:	f7ff feca 	bl	80035d0 <pwm_valve>
	}
	if(error_recovery==1 && start_pulse_error==0)
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <error_hendler+0x38>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10a      	bne.n	800385a <error_hendler+0x2e>
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <error_hendler+0x34>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <error_hendler+0x2e>
	{
		PWM=pwm_start_correction;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <error_hendler+0x3c>)
 800384e:	881a      	ldrh	r2, [r3, #0]
 8003850:	4b06      	ldr	r3, [pc, #24]	; (800386c <error_hendler+0x40>)
 8003852:	801a      	strh	r2, [r3, #0]
		error_recovery=0;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <error_hendler+0x38>)
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
	}

}
 800385a:	bf00      	nop
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	200002e0 	.word	0x200002e0
 8003864:	200002bf 	.word	0x200002bf
 8003868:	2000030c 	.word	0x2000030c
 800386c:	200002fc 	.word	0x200002fc

08003870 <start_sequence>:


void start_sequence(uint16_t k_volume, uint16_t gas_time)											// do start stuff
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	460a      	mov	r2, r1
 800387a:	80fb      	strh	r3, [r7, #6]
 800387c:	4613      	mov	r3, r2
 800387e:	80bb      	strh	r3, [r7, #4]
	HAL_TIM_Base_Start_IT(&htim1);
 8003880:	4823      	ldr	r0, [pc, #140]	; (8003910 <start_sequence+0xa0>)
 8003882:	f003 f945 	bl	8006b10 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003886:	210c      	movs	r1, #12
 8003888:	4822      	ldr	r0, [pc, #136]	; (8003914 <start_sequence+0xa4>)
 800388a:	f003 fa39 	bl	8006d00 <HAL_TIM_PWM_Start>

	ILI9341_Fill_Screen(BLUE);
 800388e:	201f      	movs	r0, #31
 8003890:	f7fd ff1c 	bl	80016cc <ILI9341_Fill_Screen>

	load();
 8003894:	f7ff fd70 	bl	8003378 <load>
	//load_var(k_volume_1, 2);
	//gas_time=5;
	//drainage_time=5;
	PWM=5000;
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <start_sequence+0xa8>)
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	801a      	strh	r2, [r3, #0]
	//volume=100;
	pouring_speed=1;
 80038a0:	4b1e      	ldr	r3, [pc, #120]	; (800391c <start_sequence+0xac>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
	step=50;
 80038a6:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <start_sequence+0xb0>)
 80038a8:	2232      	movs	r2, #50	; 0x32
 80038aa:	801a      	strh	r2, [r3, #0]
	//k_volume=68;

	start_control_time=gas_time+2;
 80038ac:	88bb      	ldrh	r3, [r7, #4]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	3302      	adds	r3, #2
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <start_sequence+0xb4>)
 80038b6:	701a      	strb	r2, [r3, #0]

	ref_volume=100*(float)k_volume/1000;									// check if pwm is nominal
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003928 <start_sequence+0xb8>
 80038c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038ca:	eddf 6a18 	vldr	s13, [pc, #96]	; 800392c <start_sequence+0xbc>
 80038ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d2:	4b17      	ldr	r3, [pc, #92]	; (8003930 <start_sequence+0xc0>)
 80038d4:	edc3 7a00 	vstr	s15, [r3]

	if(pwm_start_correction>=8500)
 80038d8:	4b16      	ldr	r3, [pc, #88]	; (8003934 <start_sequence+0xc4>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	f242 1233 	movw	r2, #8499	; 0x2133
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d903      	bls.n	80038ec <start_sequence+0x7c>
	{
		pwm_start_correction=8500;
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <start_sequence+0xc4>)
 80038e6:	f242 1234 	movw	r2, #8500	; 0x2134
 80038ea:	801a      	strh	r2, [r3, #0]
	}
	if(pwm_start_correction<=3000)
 80038ec:	4b11      	ldr	r3, [pc, #68]	; (8003934 <start_sequence+0xc4>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d803      	bhi.n	8003900 <start_sequence+0x90>
		{
			pwm_start_correction=3000;
 80038f8:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <start_sequence+0xc4>)
 80038fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038fe:	801a      	strh	r2, [r3, #0]
		}


	PWM=pwm_start_correction;											// set start pwm
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <start_sequence+0xc4>)
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <start_sequence+0xa8>)
 8003906:	801a      	strh	r2, [r3, #0]



}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200003bc 	.word	0x200003bc
 8003914:	20000374 	.word	0x20000374
 8003918:	200002fc 	.word	0x200002fc
 800391c:	200002ca 	.word	0x200002ca
 8003920:	20000308 	.word	0x20000308
 8003924:	200002be 	.word	0x200002be
 8003928:	42c80000 	.word	0x42c80000
 800392c:	447a0000 	.word	0x447a0000
 8003930:	200002dc 	.word	0x200002dc
 8003934:	2000030c 	.word	0x2000030c

08003938 <stop_sequence>:
void stop_sequence()													// do stop stuff
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	liters_per_min=0;
 800393c:	4b11      	ldr	r3, [pc, #68]	; (8003984 <stop_sequence+0x4c>)
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
	pulses_per_sec=0;
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <stop_sequence+0x50>)
 8003946:	2200      	movs	r2, #0
 8003948:	801a      	strh	r2, [r3, #0]
	ref_volume=0;
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <stop_sequence+0x54>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
	start_control_time=0;
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <stop_sequence+0x58>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
	optimum_speed=0;
 8003958:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <stop_sequence+0x5c>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]

	error_recovery=0;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <stop_sequence+0x60>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]

	pwm_start_correction=PWM;
 8003964:	4b0d      	ldr	r3, [pc, #52]	; (800399c <stop_sequence+0x64>)
 8003966:	881a      	ldrh	r2, [r3, #0]
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <stop_sequence+0x68>)
 800396a:	801a      	strh	r2, [r3, #0]

	save();
 800396c:	f7ff fcb8 	bl	80032e0 <save>

	HAL_TIM_Base_Stop_IT(&htim1);
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <stop_sequence+0x6c>)
 8003972:	f003 f93d 	bl	8006bf0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8003976:	210c      	movs	r1, #12
 8003978:	480b      	ldr	r0, [pc, #44]	; (80039a8 <stop_sequence+0x70>)
 800397a:	f003 fa89 	bl	8006e90 <HAL_TIM_PWM_Stop>
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200002e4 	.word	0x200002e4
 8003988:	200002f4 	.word	0x200002f4
 800398c:	200002dc 	.word	0x200002dc
 8003990:	200002be 	.word	0x200002be
 8003994:	2000031a 	.word	0x2000031a
 8003998:	200002bf 	.word	0x200002bf
 800399c:	200002fc 	.word	0x200002fc
 80039a0:	2000030c 	.word	0x2000030c
 80039a4:	200003bc 	.word	0x200003bc
 80039a8:	20000374 	.word	0x20000374

080039ac <gas>:

void gas(uint16_t gas_time)													// start gas sequence
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, Load_out_2_Pin, GPIO_PIN_SET);					// Open EPK1
 80039b6:	2201      	movs	r2, #1
 80039b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039bc:	4810      	ldr	r0, [pc, #64]	; (8003a00 <gas+0x54>)
 80039be:	f001 f829 	bl	8004a14 <HAL_GPIO_WritePin>
	TIM3->CCR4=9999;														// Close drainage
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <gas+0x58>)
 80039c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80039c8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(gas_time*1000);
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fd33 	bl	8004440 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, Load_out_2_Pin, GPIO_PIN_RESET);				//Close EPK1
 80039da:	2200      	movs	r2, #0
 80039dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039e0:	4807      	ldr	r0, [pc, #28]	; (8003a00 <gas+0x54>)
 80039e2:	f001 f817 	bl	8004a14 <HAL_GPIO_WritePin>
	TIM3->CCR4=PWM;															//start drainage control
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <gas+0x5c>)
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <gas+0x58>)
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOE, Load_out_3_Pin, GPIO_PIN_SET);                 //Open EGK1
 80039ee:	2201      	movs	r2, #1
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	4803      	ldr	r0, [pc, #12]	; (8003a00 <gas+0x54>)
 80039f4:	f001 f80e 	bl	8004a14 <HAL_GPIO_WritePin>
}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	200002fc 	.word	0x200002fc

08003a0c <pouring>:

void pouring (uint16_t volume, uint16_t k_volume, uint16_t gas_time)								// start pouring sequence
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	80fb      	strh	r3, [r7, #6]
 8003a16:	460b      	mov	r3, r1
 8003a18:	80bb      	strh	r3, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	807b      	strh	r3, [r7, #2]

	pulses=0;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <pouring+0x5c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8003a24:	4811      	ldr	r0, [pc, #68]	; (8003a6c <pouring+0x60>)
 8003a26:	f003 f873 	bl	8006b10 <HAL_TIM_Base_Start_IT>

	do
	{
		error_check(gas_time);
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff febd 	bl	80037ac <error_check>
		error_hendler();
 8003a32:	f7ff fefb 	bl	800382c <error_hendler>


	} while (pulses<=volume*k_volume/10);                                   // i dont know why /10 is needed somehow volume is 10 times bigger than needed
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	88ba      	ldrh	r2, [r7, #4]
 8003a3a:	fb02 f303 	mul.w	r3, r2, r3
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	; (8003a70 <pouring+0x64>)
 8003a40:	fb82 1203 	smull	r1, r2, r2, r3
 8003a44:	1092      	asrs	r2, r2, #2
 8003a46:	17db      	asrs	r3, r3, #31
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <pouring+0x5c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d2ea      	bcs.n	8003a2a <pouring+0x1e>
	pulses=0;
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <pouring+0x5c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8003a5a:	4804      	ldr	r0, [pc, #16]	; (8003a6c <pouring+0x60>)
 8003a5c:	f003 f8c8 	bl	8006bf0 <HAL_TIM_Base_Stop_IT>

}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200002d8 	.word	0x200002d8
 8003a6c:	20000404 	.word	0x20000404
 8003a70:	66666667 	.word	0x66666667

08003a74 <drainage>:

void drainage(uint16_t drainage_time)										// start drainage sequence
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, Load_out_3_Pin, GPIO_PIN_RESET);				//Close EGK1
 8003a7e:	2200      	movs	r2, #0
 8003a80:	2180      	movs	r1, #128	; 0x80
 8003a82:	480b      	ldr	r0, [pc, #44]	; (8003ab0 <drainage+0x3c>)
 8003a84:	f000 ffc6 	bl	8004a14 <HAL_GPIO_WritePin>
	TIM3->CCR4=PWM;															//start drainage control
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <drainage+0x40>)
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <drainage+0x44>)
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(drainage_time*1000);
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a96:	fb02 f303 	mul.w	r3, r2, r3
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fcd0 	bl	8004440 <HAL_Delay>
	TIM3->CCR4=0;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <drainage+0x44>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	200002fc 	.word	0x200002fc
 8003ab8:	40000400 	.word	0x40000400

08003abc <filling_cycle>:

void filling_cycle(uint16_t volume, uint16_t k_volume, uint16_t gas_time, uint16_t drainage_time)		//full cycle of pouring
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4623      	mov	r3, r4
 8003acc:	80fb      	strh	r3, [r7, #6]
 8003ace:	4603      	mov	r3, r0
 8003ad0:	80bb      	strh	r3, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	807b      	strh	r3, [r7, #2]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	803b      	strh	r3, [r7, #0]

	//load();
	  start_sequence(k_volume, gas_time);
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	88bb      	ldrh	r3, [r7, #4]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff fec5 	bl	8003870 <start_sequence>
	  gas(gas_time);
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5f 	bl	80039ac <gas>
	  pouring(volume, k_volume,drainage_time);
 8003aee:	883a      	ldrh	r2, [r7, #0]
 8003af0:	88b9      	ldrh	r1, [r7, #4]
 8003af2:	88fb      	ldrh	r3, [r7, #6]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff ff89 	bl	8003a0c <pouring>
	  drainage(drainage_time);
 8003afa:	883b      	ldrh	r3, [r7, #0]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ffb9 	bl	8003a74 <drainage>
	  stop_sequence();
 8003b02:	f7ff ff19 	bl	8003938 <stop_sequence>
	  //save();

	  sec=0;
 8003b06:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <filling_cycle+0x5c>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	801a      	strh	r2, [r3, #0]
	  main_screen();
 8003b0c:	f7fe fc0a 	bl	8002324 <main_screen>
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd90      	pop	{r4, r7, pc}
 8003b18:	20000300 	.word	0x20000300

08003b1c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <MX_SPI1_Init+0x68>)
 8003b24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b34:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b46:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b68:	220a      	movs	r2, #10
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b6c:	4804      	ldr	r0, [pc, #16]	; (8003b80 <MX_SPI1_Init+0x64>)
 8003b6e:	f002 fcef 	bl	8006550 <HAL_SPI_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b78:	f7fe fb7a 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	2000031c 	.word	0x2000031c
 8003b84:	40013000 	.word	0x40013000

08003b88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <HAL_SPI_MspInit+0x84>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d12b      	bne.n	8003c02 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_SPI_MspInit+0x88>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_SPI_MspInit+0x88>)
 8003bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_SPI_MspInit+0x88>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b11      	ldr	r3, [pc, #68]	; (8003c10 <HAL_SPI_MspInit+0x88>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a10      	ldr	r2, [pc, #64]	; (8003c10 <HAL_SPI_MspInit+0x88>)
 8003bd0:	f043 0301 	orr.w	r3, r3, #1
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_SPI_MspInit+0x88>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003be2:	23e0      	movs	r3, #224	; 0xe0
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bf2:	2305      	movs	r3, #5
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4805      	ldr	r0, [pc, #20]	; (8003c14 <HAL_SPI_MspInit+0x8c>)
 8003bfe:	f000 fd55 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003c02:	bf00      	nop
 8003c04:	3728      	adds	r7, #40	; 0x28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40013000 	.word	0x40013000
 8003c10:	40023800 	.word	0x40023800
 8003c14:	40020000 	.word	0x40020000

08003c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <HAL_MspInit+0x4c>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <HAL_MspInit+0x4c>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <HAL_MspInit+0x4c>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_MspInit+0x4c>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <HAL_MspInit+0x4c>)
 8003c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c48:	6413      	str	r3, [r2, #64]	; 0x40
 8003c4a:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_MspInit+0x4c>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800

08003c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c6c:	e7fe      	b.n	8003c6c <NMI_Handler+0x4>

08003c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c72:	e7fe      	b.n	8003c72 <HardFault_Handler+0x4>

08003c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c78:	e7fe      	b.n	8003c78 <MemManage_Handler+0x4>

08003c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c7e:	e7fe      	b.n	8003c7e <BusFault_Handler+0x4>

08003c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c84:	e7fe      	b.n	8003c84 <UsageFault_Handler+0x4>

08003c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c86:	b480      	push	{r7}
 8003c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ca6:	bf00      	nop
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cb4:	f000 fba4 	bl	8004400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	pulses++;
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <EXTI2_IRQHandler+0x18>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <EXTI2_IRQHandler+0x18>)
 8003cc8:	6013      	str	r3, [r2, #0]
	//HAL_GPIO_TogglePin(GPIOB, Signal_LED_Pin);

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003cca:	2004      	movs	r0, #4
 8003ccc:	f000 febc 	bl	8004a48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200002d8 	.word	0x200002d8

08003cd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cdc:	4802      	ldr	r0, [pc, #8]	; (8003ce8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003cde:	f003 f947 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200003bc 	.word	0x200003bc

08003cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003cf0:	4802      	ldr	r0, [pc, #8]	; (8003cfc <TIM2_IRQHandler+0x10>)
 8003cf2:	f003 f93d 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003cf6:	bf00      	nop
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000404 	.word	0x20000404

08003d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003d04:	4802      	ldr	r0, [pc, #8]	; (8003d10 <TIM3_IRQHandler+0x10>)
 8003d06:	f003 f933 	bl	8006f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000374 	.word	0x20000374

08003d14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
	return 1;
 8003d18:	2301      	movs	r3, #1
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <_kill>:

int _kill(int pid, int sig)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d2e:	f004 f98f 	bl	8008050 <__errno>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2216      	movs	r2, #22
 8003d36:	601a      	str	r2, [r3, #0]
	return -1;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <_exit>:

void _exit (int status)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff ffe7 	bl	8003d24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d56:	e7fe      	b.n	8003d56 <_exit+0x12>

08003d58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	e00a      	b.n	8003d80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d6a:	f3af 8000 	nop.w
 8003d6e:	4601      	mov	r1, r0
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	60ba      	str	r2, [r7, #8]
 8003d76:	b2ca      	uxtb	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	dbf0      	blt.n	8003d6a <_read+0x12>
	}

return len;
 8003d88:	687b      	ldr	r3, [r7, #4]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	e009      	b.n	8003db8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	60ba      	str	r2, [r7, #8]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	3301      	adds	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	dbf1      	blt.n	8003da4 <_write+0x12>
	}
	return len;
 8003dc0:	687b      	ldr	r3, [r7, #4]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <_close>:

int _close(int file)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
	return -1;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
 8003dea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003df2:	605a      	str	r2, [r3, #4]
	return 0;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <_isatty>:

int _isatty(int file)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
	return 1;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
	return 0;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <_sbrk+0x5c>)
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <_sbrk+0x60>)
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <_sbrk+0x64>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <_sbrk+0x64>)
 8003e52:	4a12      	ldr	r2, [pc, #72]	; (8003e9c <_sbrk+0x68>)
 8003e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <_sbrk+0x64>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d207      	bcs.n	8003e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e64:	f004 f8f4 	bl	8008050 <__errno>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	220c      	movs	r2, #12
 8003e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e009      	b.n	8003e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <_sbrk+0x64>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <_sbrk+0x64>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	4a05      	ldr	r2, [pc, #20]	; (8003e98 <_sbrk+0x64>)
 8003e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20020000 	.word	0x20020000
 8003e94:	00000400 	.word	0x00000400
 8003e98:	200001fc 	.word	0x200001fc
 8003e9c:	200004a8 	.word	0x200004a8

08003ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <SystemInit+0x20>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <SystemInit+0x20>)
 8003eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eca:	f107 0308 	add.w	r3, r7, #8
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	605a      	str	r2, [r3, #4]
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed8:	463b      	mov	r3, r7
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ee0:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003ee2:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <MX_TIM1_Init+0x9c>)
 8003ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1679;
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003ee8:	f240 628f 	movw	r2, #1679	; 0x68f
 8003eec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003ef6:	2263      	movs	r2, #99	; 0x63
 8003ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003efa:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f0c:	4813      	ldr	r0, [pc, #76]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003f0e:	f002 fdaf 	bl	8006a70 <HAL_TIM_Base_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003f18:	f7fe f9aa 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	4619      	mov	r1, r3
 8003f28:	480c      	ldr	r0, [pc, #48]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003f2a:	f003 f9eb 	bl	8007304 <HAL_TIM_ConfigClockSource>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003f34:	f7fe f99c 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f40:	463b      	mov	r3, r7
 8003f42:	4619      	mov	r1, r3
 8003f44:	4805      	ldr	r0, [pc, #20]	; (8003f5c <MX_TIM1_Init+0x98>)
 8003f46:	f003 fddd 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003f50:	f7fe f98e 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f54:	bf00      	nop
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200003bc 	.word	0x200003bc
 8003f60:	40010000 	.word	0x40010000

08003f64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f78:	463b      	mov	r3, r7
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1679;
 8003f88:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f8a:	f240 628f 	movw	r2, #1679	; 0x68f
 8003f8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003f98:	f247 522f 	movw	r2, #29999	; 0x752f
 8003f9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9e:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa4:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003faa:	4814      	ldr	r0, [pc, #80]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fac:	f002 fd60 	bl	8006a70 <HAL_TIM_Base_Init>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003fb6:	f7fe f95b 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	480d      	ldr	r0, [pc, #52]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fc8:	f003 f99c 	bl	8007304 <HAL_TIM_ConfigClockSource>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003fd2:	f7fe f94d 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fde:	463b      	mov	r3, r7
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4806      	ldr	r0, [pc, #24]	; (8003ffc <MX_TIM2_Init+0x98>)
 8003fe4:	f003 fd8e 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003fee:	f7fe f93f 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000404 	.word	0x20000404

08004000 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08e      	sub	sp, #56	; 0x38
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004014:	f107 0320 	add.w	r3, r7, #32
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
 800402c:	615a      	str	r2, [r3, #20]
 800402e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004030:	4b2c      	ldr	r3, [pc, #176]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004032:	4a2d      	ldr	r2, [pc, #180]	; (80040e8 <MX_TIM3_Init+0xe8>)
 8004034:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8004036:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004038:	2253      	movs	r2, #83	; 0x53
 800403a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <MX_TIM3_Init+0xe4>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004044:	f242 7210 	movw	r2, #10000	; 0x2710
 8004048:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <MX_TIM3_Init+0xe4>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004052:	2200      	movs	r2, #0
 8004054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004056:	4823      	ldr	r0, [pc, #140]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004058:	f002 fd0a 	bl	8006a70 <HAL_TIM_Base_Init>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004062:	f7fe f905 	bl	8002270 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800406a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800406c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004070:	4619      	mov	r1, r3
 8004072:	481c      	ldr	r0, [pc, #112]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004074:	f003 f946 	bl	8007304 <HAL_TIM_ConfigClockSource>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800407e:	f7fe f8f7 	bl	8002270 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004082:	4818      	ldr	r0, [pc, #96]	; (80040e4 <MX_TIM3_Init+0xe4>)
 8004084:	f002 fde3 	bl	8006c4e <HAL_TIM_PWM_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800408e:	f7fe f8ef 	bl	8002270 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800409a:	f107 0320 	add.w	r3, r7, #32
 800409e:	4619      	mov	r1, r3
 80040a0:	4810      	ldr	r0, [pc, #64]	; (80040e4 <MX_TIM3_Init+0xe4>)
 80040a2:	f003 fd2f 	bl	8007b04 <HAL_TIMEx_MasterConfigSynchronization>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80040ac:	f7fe f8e0 	bl	8002270 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b0:	2360      	movs	r3, #96	; 0x60
 80040b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	220c      	movs	r2, #12
 80040c4:	4619      	mov	r1, r3
 80040c6:	4807      	ldr	r0, [pc, #28]	; (80040e4 <MX_TIM3_Init+0xe4>)
 80040c8:	f003 f85a 	bl	8007180 <HAL_TIM_PWM_ConfigChannel>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80040d2:	f7fe f8cd 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040d6:	4803      	ldr	r0, [pc, #12]	; (80040e4 <MX_TIM3_Init+0xe4>)
 80040d8:	f000 f86a 	bl	80041b0 <HAL_TIM_MspPostInit>

}
 80040dc:	bf00      	nop
 80040de:	3738      	adds	r7, #56	; 0x38
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20000374 	.word	0x20000374
 80040e8:	40000400 	.word	0x40000400

080040ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a2a      	ldr	r2, [pc, #168]	; (80041a4 <HAL_TIM_Base_MspInit+0xb8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d116      	bne.n	800412c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004106:	4a28      	ldr	r2, [pc, #160]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	6453      	str	r3, [r2, #68]	; 0x44
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	2100      	movs	r1, #0
 800411e:	2019      	movs	r0, #25
 8004120:	f000 fa8d 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004124:	2019      	movs	r0, #25
 8004126:	f000 faa6 	bl	8004676 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800412a:	e036      	b.n	800419a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d116      	bne.n	8004164 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004136:	2300      	movs	r3, #0
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	6413      	str	r3, [r2, #64]	; 0x40
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	613b      	str	r3, [r7, #16]
 8004150:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004152:	2200      	movs	r2, #0
 8004154:	2100      	movs	r1, #0
 8004156:	201c      	movs	r0, #28
 8004158:	f000 fa71 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800415c:	201c      	movs	r0, #28
 800415e:	f000 fa8a 	bl	8004676 <HAL_NVIC_EnableIRQ>
}
 8004162:	e01a      	b.n	800419a <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a10      	ldr	r2, [pc, #64]	; (80041ac <HAL_TIM_Base_MspInit+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d115      	bne.n	800419a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	4a0c      	ldr	r2, [pc, #48]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004178:	f043 0302 	orr.w	r3, r3, #2
 800417c:	6413      	str	r3, [r2, #64]	; 0x40
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_TIM_Base_MspInit+0xbc>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2100      	movs	r1, #0
 800418e:	201d      	movs	r0, #29
 8004190:	f000 fa55 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004194:	201d      	movs	r0, #29
 8004196:	f000 fa6e 	bl	8004676 <HAL_NVIC_EnableIRQ>
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40010000 	.word	0x40010000
 80041a8:	40023800 	.word	0x40023800
 80041ac:	40000400 	.word	0x40000400

080041b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	f107 030c 	add.w	r3, r7, #12
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a12      	ldr	r2, [pc, #72]	; (8004218 <HAL_TIM_MspPostInit+0x68>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d11d      	bne.n	800420e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_TIM_MspPostInit+0x6c>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4a10      	ldr	r2, [pc, #64]	; (800421c <HAL_TIM_MspPostInit+0x6c>)
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	6313      	str	r3, [r2, #48]	; 0x30
 80041e2:	4b0e      	ldr	r3, [pc, #56]	; (800421c <HAL_TIM_MspPostInit+0x6c>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80041ee:	2302      	movs	r3, #2
 80041f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f2:	2302      	movs	r3, #2
 80041f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fa:	2303      	movs	r3, #3
 80041fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041fe:	2302      	movs	r3, #2
 8004200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 030c 	add.w	r3, r7, #12
 8004206:	4619      	mov	r1, r3
 8004208:	4805      	ldr	r0, [pc, #20]	; (8004220 <HAL_TIM_MspPostInit+0x70>)
 800420a:	f000 fa4f 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800420e:	bf00      	nop
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40000400 	.word	0x40000400
 800421c:	40023800 	.word	0x40023800
 8004220:	40020400 	.word	0x40020400

08004224 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <MX_UART4_Init+0x4c>)
 800422a:	4a12      	ldr	r2, [pc, #72]	; (8004274 <MX_UART4_Init+0x50>)
 800422c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <MX_UART4_Init+0x4c>)
 8004230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004234:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004236:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <MX_UART4_Init+0x4c>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <MX_UART4_Init+0x4c>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <MX_UART4_Init+0x4c>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <MX_UART4_Init+0x4c>)
 800424a:	220c      	movs	r2, #12
 800424c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800424e:	4b08      	ldr	r3, [pc, #32]	; (8004270 <MX_UART4_Init+0x4c>)
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <MX_UART4_Init+0x4c>)
 8004256:	2200      	movs	r2, #0
 8004258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800425a:	4805      	ldr	r0, [pc, #20]	; (8004270 <MX_UART4_Init+0x4c>)
 800425c:	f003 fce2 	bl	8007c24 <HAL_UART_Init>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004266:	f7fe f803 	bl	8002270 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	2000044c 	.word	0x2000044c
 8004274:	40004c00 	.word	0x40004c00

08004278 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	60da      	str	r2, [r3, #12]
 800428e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a19      	ldr	r2, [pc, #100]	; (80042fc <HAL_UART_MspInit+0x84>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d12b      	bne.n	80042f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	4b18      	ldr	r3, [pc, #96]	; (8004300 <HAL_UART_MspInit+0x88>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a17      	ldr	r2, [pc, #92]	; (8004300 <HAL_UART_MspInit+0x88>)
 80042a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
 80042aa:	4b15      	ldr	r3, [pc, #84]	; (8004300 <HAL_UART_MspInit+0x88>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_UART_MspInit+0x88>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4a10      	ldr	r2, [pc, #64]	; (8004300 <HAL_UART_MspInit+0x88>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6313      	str	r3, [r2, #48]	; 0x30
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <HAL_UART_MspInit+0x88>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	60fb      	str	r3, [r7, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042d2:	2303      	movs	r3, #3
 80042d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d6:	2302      	movs	r3, #2
 80042d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042da:	2300      	movs	r3, #0
 80042dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042de:	2303      	movs	r3, #3
 80042e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80042e2:	2308      	movs	r3, #8
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4619      	mov	r1, r3
 80042ec:	4805      	ldr	r0, [pc, #20]	; (8004304 <HAL_UART_MspInit+0x8c>)
 80042ee:	f000 f9dd 	bl	80046ac <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80042f2:	bf00      	nop
 80042f4:	3728      	adds	r7, #40	; 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	40004c00 	.word	0x40004c00
 8004300:	40023800 	.word	0x40023800
 8004304:	40020000 	.word	0x40020000

08004308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004340 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800430c:	480d      	ldr	r0, [pc, #52]	; (8004344 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800430e:	490e      	ldr	r1, [pc, #56]	; (8004348 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004310:	4a0e      	ldr	r2, [pc, #56]	; (800434c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004314:	e002      	b.n	800431c <LoopCopyDataInit>

08004316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800431a:	3304      	adds	r3, #4

0800431c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800431c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800431e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004320:	d3f9      	bcc.n	8004316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004322:	4a0b      	ldr	r2, [pc, #44]	; (8004350 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004324:	4c0b      	ldr	r4, [pc, #44]	; (8004354 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004328:	e001      	b.n	800432e <LoopFillZerobss>

0800432a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800432a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800432c:	3204      	adds	r2, #4

0800432e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800432e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004330:	d3fb      	bcc.n	800432a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004332:	f7ff fdb5 	bl	8003ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004336:	f003 fe91 	bl	800805c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433a:	f7fd fdaf 	bl	8001e9c <main>
  bx  lr    
 800433e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004348:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800434c:	0800b53c 	.word	0x0800b53c
  ldr r2, =_sbss
 8004350:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004354:	200004a4 	.word	0x200004a4

08004358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004358:	e7fe      	b.n	8004358 <ADC_IRQHandler>
	...

0800435c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_Init+0x40>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0d      	ldr	r2, [pc, #52]	; (800439c <HAL_Init+0x40>)
 8004366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_Init+0x40>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0a      	ldr	r2, [pc, #40]	; (800439c <HAL_Init+0x40>)
 8004372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004376:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_Init+0x40>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a07      	ldr	r2, [pc, #28]	; (800439c <HAL_Init+0x40>)
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004384:	2003      	movs	r0, #3
 8004386:	f000 f94f 	bl	8004628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438a:	2000      	movs	r0, #0
 800438c:	f000 f808 	bl	80043a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004390:	f7ff fc42 	bl	8003c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023c00 	.word	0x40023c00

080043a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043a8:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_InitTick+0x54>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <HAL_InitTick+0x58>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	4619      	mov	r1, r3
 80043b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f967 	bl	8004692 <HAL_SYSTICK_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00e      	b.n	80043ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b0f      	cmp	r3, #15
 80043d2:	d80a      	bhi.n	80043ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d4:	2200      	movs	r2, #0
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	f000 f92f 	bl	800463e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e0:	4a06      	ldr	r2, [pc, #24]	; (80043fc <HAL_InitTick+0x5c>)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000004 	.word	0x20000004
 80043f8:	2000000c 	.word	0x2000000c
 80043fc:	20000008 	.word	0x20000008

08004400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_IncTick+0x20>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x24>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4413      	add	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_IncTick+0x24>)
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	2000000c 	.word	0x2000000c
 8004424:	20000490 	.word	0x20000490

08004428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return uwTick;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetTick+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000490 	.word	0x20000490

08004440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff ffee 	bl	8004428 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d005      	beq.n	8004466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800445a:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <HAL_Delay+0x44>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004466:	bf00      	nop
 8004468:	f7ff ffde 	bl	8004428 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d8f7      	bhi.n	8004468 <HAL_Delay+0x28>
  {
  }
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c

08004488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a4:	4013      	ands	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <__NVIC_SetPriorityGrouping+0x44>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60d3      	str	r3, [r2, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <__NVIC_GetPriorityGrouping+0x18>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	0a1b      	lsrs	r3, r3, #8
 80044da:	f003 0307 	and.w	r3, r3, #7
}
 80044de:	4618      	mov	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000ed00 	.word	0xe000ed00

080044ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	db0b      	blt.n	8004516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	f003 021f 	and.w	r2, r3, #31
 8004504:	4907      	ldr	r1, [pc, #28]	; (8004524 <__NVIC_EnableIRQ+0x38>)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	2001      	movs	r0, #1
 800450e:	fa00 f202 	lsl.w	r2, r0, r2
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
         );
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
	...

080045e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f4:	d301      	bcc.n	80045fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00f      	b.n	800461a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fa:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <SysTick_Config+0x40>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004602:	210f      	movs	r1, #15
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	f7ff ff8e 	bl	8004528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <SysTick_Config+0x40>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004612:	4b04      	ldr	r3, [pc, #16]	; (8004624 <SysTick_Config+0x40>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff29 	bl	8004488 <__NVIC_SetPriorityGrouping>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff3e 	bl	80044d0 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff8e 	bl	800457c <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5d 	bl	8004528 <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff31 	bl	80044ec <__NVIC_EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffa2 	bl	80045e4 <SysTick_Config>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e16b      	b.n	80049a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 815a 	bne.w	800499a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d017      	beq.n	800479c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b4 	beq.w	800499a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b60      	ldr	r3, [pc, #384]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4a5f      	ldr	r2, [pc, #380]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6453      	str	r3, [r2, #68]	; 0x44
 8004842:	4b5d      	ldr	r3, [pc, #372]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484e:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <HAL_GPIO_Init+0x310>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a52      	ldr	r2, [pc, #328]	; (80049c0 <HAL_GPIO_Init+0x314>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02b      	beq.n	80048d2 <HAL_GPIO_Init+0x226>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a51      	ldr	r2, [pc, #324]	; (80049c4 <HAL_GPIO_Init+0x318>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d025      	beq.n	80048ce <HAL_GPIO_Init+0x222>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <HAL_GPIO_Init+0x31c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01f      	beq.n	80048ca <HAL_GPIO_Init+0x21e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <HAL_GPIO_Init+0x320>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d019      	beq.n	80048c6 <HAL_GPIO_Init+0x21a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_GPIO_Init+0x216>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <HAL_GPIO_Init+0x328>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00d      	beq.n	80048be <HAL_GPIO_Init+0x212>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4c      	ldr	r2, [pc, #304]	; (80049d8 <HAL_GPIO_Init+0x32c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <HAL_GPIO_Init+0x20e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_GPIO_Init+0x330>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_GPIO_Init+0x20a>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00e      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048b6:	2308      	movs	r3, #8
 80048b8:	e00c      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ba:	2306      	movs	r3, #6
 80048bc:	e00a      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048be:	2305      	movs	r3, #5
 80048c0:	e008      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048c2:	2304      	movs	r3, #4
 80048c4:	e006      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e004      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048d2:	2300      	movs	r3, #0
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	f002 0203 	and.w	r2, r2, #3
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4093      	lsls	r3, r2
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_GPIO_Init+0x310>)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_GPIO_Init+0x334>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_GPIO_Init+0x334>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_GPIO_Init+0x334>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004994:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	f67f ae90 	bls.w	80046c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40020000 	.word	0x40020000
 80049c4:	40020400 	.word	0x40020400
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40021400 	.word	0x40021400
 80049d8:	40021800 	.word	0x40021800
 80049dc:	40021c00 	.word	0x40021c00
 80049e0:	40013c00 	.word	0x40013c00

080049e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	e001      	b.n	8004a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a30:	e003      	b.n	8004a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a52:	4b08      	ldr	r3, [pc, #32]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d006      	beq.n	8004a6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a5e:	4a05      	ldr	r2, [pc, #20]	; (8004a74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a60:	88fb      	ldrh	r3, [r7, #6]
 8004a62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f806 	bl	8004a78 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40013c00 	.word	0x40013c00

08004a78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
	...

08004a90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e12b      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7fd f974 	bl	8001da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2224      	movs	r2, #36	; 0x24
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ae2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004af4:	f001 fd04 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a81      	ldr	r2, [pc, #516]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d807      	bhi.n	8004b14 <HAL_I2C_Init+0x84>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4a80      	ldr	r2, [pc, #512]	; (8004d08 <HAL_I2C_Init+0x278>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	bf94      	ite	ls
 8004b0c:	2301      	movls	r3, #1
 8004b0e:	2300      	movhi	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	e006      	b.n	8004b22 <HAL_I2C_Init+0x92>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4a7d      	ldr	r2, [pc, #500]	; (8004d0c <HAL_I2C_Init+0x27c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	bf94      	ite	ls
 8004b1c:	2301      	movls	r3, #1
 8004b1e:	2300      	movhi	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0e7      	b.n	8004cfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a78      	ldr	r2, [pc, #480]	; (8004d10 <HAL_I2C_Init+0x280>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	0c9b      	lsrs	r3, r3, #18
 8004b34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a6a      	ldr	r2, [pc, #424]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d802      	bhi.n	8004b64 <HAL_I2C_Init+0xd4>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	e009      	b.n	8004b78 <HAL_I2C_Init+0xe8>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	4a69      	ldr	r2, [pc, #420]	; (8004d14 <HAL_I2C_Init+0x284>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	099b      	lsrs	r3, r3, #6
 8004b76:	3301      	adds	r3, #1
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	495c      	ldr	r1, [pc, #368]	; (8004d04 <HAL_I2C_Init+0x274>)
 8004b94:	428b      	cmp	r3, r1
 8004b96:	d819      	bhi.n	8004bcc <HAL_I2C_Init+0x13c>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e59      	subs	r1, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bac:	400b      	ands	r3, r1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_I2C_Init+0x138>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	1e59      	subs	r1, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc6:	e051      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	e04f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d111      	bne.n	8004bf8 <HAL_I2C_Init+0x168>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	440b      	add	r3, r1
 8004be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004be6:	3301      	adds	r3, #1
 8004be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e012      	b.n	8004c1e <HAL_I2C_Init+0x18e>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1e58      	subs	r0, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	0099      	lsls	r1, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c0e:	3301      	adds	r3, #1
 8004c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_I2C_Init+0x196>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e022      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10e      	bne.n	8004c4c <HAL_I2C_Init+0x1bc>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	1e58      	subs	r0, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6859      	ldr	r1, [r3, #4]
 8004c36:	460b      	mov	r3, r1
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	440b      	add	r3, r1
 8004c3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4a:	e00f      	b.n	8004c6c <HAL_I2C_Init+0x1dc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1e58      	subs	r0, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6859      	ldr	r1, [r3, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	440b      	add	r3, r1
 8004c5a:	0099      	lsls	r1, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c62:	3301      	adds	r3, #1
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	6809      	ldr	r1, [r1, #0]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6911      	ldr	r1, [r2, #16]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	000186a0 	.word	0x000186a0
 8004d08:	001e847f 	.word	0x001e847f
 8004d0c:	003d08ff 	.word	0x003d08ff
 8004d10:	431bde83 	.word	0x431bde83
 8004d14:	10624dd3 	.word	0x10624dd3

08004d18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	817b      	strh	r3, [r7, #10]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	813b      	strh	r3, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d32:	f7ff fb79 	bl	8004428 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	f040 80d9 	bne.w	8004ef8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	2319      	movs	r3, #25
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	496d      	ldr	r1, [pc, #436]	; (8004f04 <HAL_I2C_Mem_Write+0x1ec>)
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 fdad 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e0cc      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_I2C_Mem_Write+0x56>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e0c5      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d007      	beq.n	8004d94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2221      	movs	r2, #33	; 0x21
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2240      	movs	r2, #64	; 0x40
 8004db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a4d      	ldr	r2, [pc, #308]	; (8004f08 <HAL_I2C_Mem_Write+0x1f0>)
 8004dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dd6:	88f8      	ldrh	r0, [r7, #6]
 8004dd8:	893a      	ldrh	r2, [r7, #8]
 8004dda:	8979      	ldrh	r1, [r7, #10]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	9301      	str	r3, [sp, #4]
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	4603      	mov	r3, r0
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 fbe4 	bl	80055b4 <I2C_RequestMemoryWrite>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d052      	beq.n	8004e98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e081      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 fe2e 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d107      	bne.n	8004e1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e06b      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d11b      	bne.n	8004e98 <HAL_I2C_Mem_Write+0x180>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1aa      	bne.n	8004df6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fe1a 	bl	8005ade <I2C_WaitOnBTFFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d107      	bne.n	8004ec8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e016      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e000      	b.n	8004efa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ef8:	2302      	movs	r3, #2
  }
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	00100002 	.word	0x00100002
 8004f08:	ffff0000 	.word	0xffff0000

08004f0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	; 0x30
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	4608      	mov	r0, r1
 8004f16:	4611      	mov	r1, r2
 8004f18:	461a      	mov	r2, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	817b      	strh	r3, [r7, #10]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	813b      	strh	r3, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f26:	f7ff fa7f 	bl	8004428 <HAL_GetTick>
 8004f2a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	f040 8208 	bne.w	800534a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	2319      	movs	r3, #25
 8004f40:	2201      	movs	r2, #1
 8004f42:	497b      	ldr	r1, [pc, #492]	; (8005130 <HAL_I2C_Mem_Read+0x224>)
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fcb3 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e1fb      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2C_Mem_Read+0x56>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e1f4      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d007      	beq.n	8004f88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2222      	movs	r2, #34	; 0x22
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2240      	movs	r2, #64	; 0x40
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004fb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a5b      	ldr	r2, [pc, #364]	; (8005134 <HAL_I2C_Mem_Read+0x228>)
 8004fc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fca:	88f8      	ldrh	r0, [r7, #6]
 8004fcc:	893a      	ldrh	r2, [r7, #8]
 8004fce:	8979      	ldrh	r1, [r7, #10]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	4603      	mov	r3, r0
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 fb80 	bl	80056e0 <I2C_RequestMemoryRead>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1b0      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d113      	bne.n	800501a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	623b      	str	r3, [r7, #32]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	623b      	str	r3, [r7, #32]
 8005006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e184      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501e:	2b01      	cmp	r3, #1
 8005020:	d11b      	bne.n	800505a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e164      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505e:	2b02      	cmp	r3, #2
 8005060:	d11b      	bne.n	800509a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	e144      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050b0:	e138      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	f200 80f1 	bhi.w	800529e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d123      	bne.n	800510c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 fd49 	bl	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e139      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	3b01      	subs	r3, #1
 8005104:	b29a      	uxth	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	855a      	strh	r2, [r3, #42]	; 0x2a
 800510a:	e10b      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	2b02      	cmp	r3, #2
 8005112:	d14e      	bne.n	80051b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2200      	movs	r2, #0
 800511c:	4906      	ldr	r1, [pc, #24]	; (8005138 <HAL_I2C_Mem_Read+0x22c>)
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 fbc6 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e10e      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
 800512e:	bf00      	nop
 8005130:	00100002 	.word	0x00100002
 8005134:	ffff0000 	.word	0xffff0000
 8005138:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051b0:	e0b8      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2200      	movs	r2, #0
 80051ba:	4966      	ldr	r1, [pc, #408]	; (8005354 <HAL_I2C_Mem_Read+0x448>)
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 fb77 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e0bf      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005214:	2200      	movs	r2, #0
 8005216:	494f      	ldr	r1, [pc, #316]	; (8005354 <HAL_I2C_Mem_Read+0x448>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fb49 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e091      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800529c:	e042      	b.n	8005324 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fc5c 	bl	8005b60 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e04c      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	b2d2      	uxtb	r2, r2
 80052be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d118      	bne.n	8005324 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f aec2 	bne.w	80050b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e000      	b.n	800534c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
  }
}
 800534c:	4618      	mov	r0, r3
 800534e:	3728      	adds	r7, #40	; 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	00010004 	.word	0x00010004

08005358 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af02      	add	r7, sp, #8
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	460b      	mov	r3, r1
 8005366:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7ff f85e 	bl	8004428 <HAL_GetTick>
 800536c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800536e:	2301      	movs	r3, #1
 8005370:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b20      	cmp	r3, #32
 800537c:	f040 8111 	bne.w	80055a2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	2319      	movs	r3, #25
 8005386:	2201      	movs	r2, #1
 8005388:	4988      	ldr	r1, [pc, #544]	; (80055ac <HAL_I2C_IsDeviceReady+0x254>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa90 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	e104      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_I2C_IsDeviceReady+0x50>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0fd      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d007      	beq.n	80053ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f042 0201 	orr.w	r2, r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2224      	movs	r2, #36	; 0x24
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a70      	ldr	r2, [pc, #448]	; (80055b0 <HAL_I2C_IsDeviceReady+0x258>)
 80053f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005400:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2200      	movs	r2, #0
 800540a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fa4e 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00d      	beq.n	8005436 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d103      	bne.n	8005432 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e0b6      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005436:	897b      	ldrh	r3, [r7, #10]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005444:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005446:	f7fe ffef 	bl	8004428 <HAL_GetTick>
 800544a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	bf0c      	ite	eq
 800545a:	2301      	moveq	r3, #1
 800545c:	2300      	movne	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800547a:	e025      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fe ffd4 	bl	8004428 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <HAL_I2C_IsDeviceReady+0x13a>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	22a0      	movs	r2, #160	; 0xa0
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	bf0c      	ite	eq
 80054a8:	2301      	moveq	r3, #1
 80054aa:	2300      	movne	r3, #0
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2ba0      	cmp	r3, #160	; 0xa0
 80054d2:	d005      	beq.n	80054e0 <HAL_I2C_IsDeviceReady+0x188>
 80054d4:	7dfb      	ldrb	r3, [r7, #23]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <HAL_I2C_IsDeviceReady+0x188>
 80054da:	7dbb      	ldrb	r3, [r7, #22]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d0cd      	beq.n	800547c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d129      	bne.n	800554a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005504:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2319      	movs	r3, #25
 8005522:	2201      	movs	r2, #1
 8005524:	4921      	ldr	r1, [pc, #132]	; (80055ac <HAL_I2C_IsDeviceReady+0x254>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f9c2 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e036      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	e02c      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005558:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005562:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2319      	movs	r3, #25
 800556a:	2201      	movs	r2, #1
 800556c:	490f      	ldr	r1, [pc, #60]	; (80055ac <HAL_I2C_IsDeviceReady+0x254>)
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f99e 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e012      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	3301      	adds	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	f4ff af32 	bcc.w	80053f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80055a2:	2302      	movs	r3, #2
  }
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3720      	adds	r7, #32
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	00100002 	.word	0x00100002
 80055b0:	ffff0000 	.word	0xffff0000

080055b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	817b      	strh	r3, [r7, #10]
 80055c6:	460b      	mov	r3, r1
 80055c8:	813b      	strh	r3, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ea:	68f8      	ldr	r0, [r7, #12]
 80055ec:	f000 f960 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00d      	beq.n	8005612 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005604:	d103      	bne.n	800560e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e05f      	b.n	80056d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005612:	897b      	ldrh	r3, [r7, #10]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005620:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	492d      	ldr	r1, [pc, #180]	; (80056dc <I2C_RequestMemoryWrite+0x128>)
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f000 f998 	bl	800595e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e04c      	b.n	80056d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005638:	2300      	movs	r3, #0
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	6a39      	ldr	r1, [r7, #32]
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa02 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	2b04      	cmp	r3, #4
 8005664:	d107      	bne.n	8005676 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005674:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e02b      	b.n	80056d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d105      	bne.n	800568c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	b2da      	uxtb	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	611a      	str	r2, [r3, #16]
 800568a:	e021      	b.n	80056d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800568c:	893b      	ldrh	r3, [r7, #8]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	b29b      	uxth	r3, r3
 8005692:	b2da      	uxtb	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569c:	6a39      	ldr	r1, [r7, #32]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f9dc 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d107      	bne.n	80056c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e005      	b.n	80056d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056c6:	893b      	ldrh	r3, [r7, #8]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	00010002 	.word	0x00010002

080056e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	817b      	strh	r3, [r7, #10]
 80056f2:	460b      	mov	r3, r1
 80056f4:	813b      	strh	r3, [r7, #8]
 80056f6:	4613      	mov	r3, r2
 80056f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005708:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005718:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	2200      	movs	r2, #0
 8005722:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f8c2 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005740:	d103      	bne.n	800574a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e0aa      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800574e:	897b      	ldrh	r3, [r7, #10]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800575c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	4952      	ldr	r1, [pc, #328]	; (80058ac <I2C_RequestMemoryRead+0x1cc>)
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f8fa 	bl	800595e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e097      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	6a39      	ldr	r1, [r7, #32]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f964 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d107      	bne.n	80057b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e076      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d105      	bne.n	80057c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057bc:	893b      	ldrh	r3, [r7, #8]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	611a      	str	r2, [r3, #16]
 80057c6:	e021      	b.n	800580c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80057c8:	893b      	ldrh	r3, [r7, #8]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d8:	6a39      	ldr	r1, [r7, #32]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f93e 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d107      	bne.n	80057fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e050      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005802:	893b      	ldrh	r3, [r7, #8]
 8005804:	b2da      	uxtb	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800580c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800580e:	6a39      	ldr	r1, [r7, #32]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f923 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	2b04      	cmp	r3, #4
 8005822:	d107      	bne.n	8005834 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e035      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005846:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2200      	movs	r2, #0
 8005850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f82b 	bl	80058b0 <I2C_WaitOnFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00d      	beq.n	800587c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586e:	d103      	bne.n	8005878 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e013      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800587c:	897b      	ldrh	r3, [r7, #10]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	f043 0301 	orr.w	r3, r3, #1
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	6a3a      	ldr	r2, [r7, #32]
 8005890:	4906      	ldr	r1, [pc, #24]	; (80058ac <I2C_RequestMemoryRead+0x1cc>)
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f863 	bl	800595e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	00010002 	.word	0x00010002

080058b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058c0:	e025      	b.n	800590e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d021      	beq.n	800590e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ca:	f7fe fdad 	bl	8004428 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d302      	bcc.n	80058e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d116      	bne.n	800590e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2220      	movs	r2, #32
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f043 0220 	orr.w	r2, r3, #32
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e023      	b.n	8005956 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b01      	cmp	r3, #1
 8005916:	d10d      	bne.n	8005934 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	43da      	mvns	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	e00c      	b.n	800594e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	43da      	mvns	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf0c      	ite	eq
 8005946:	2301      	moveq	r3, #1
 8005948:	2300      	movne	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	429a      	cmp	r2, r3
 8005952:	d0b6      	beq.n	80058c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
 800596a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800596c:	e051      	b.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800597c:	d123      	bne.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005996:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f043 0204 	orr.w	r2, r3, #4
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e046      	b.n	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059cc:	d021      	beq.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059ce:	f7fe fd2b 	bl	8004428 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d302      	bcc.n	80059e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d116      	bne.n	8005a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	f043 0220 	orr.w	r2, r3, #32
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e020      	b.n	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d10c      	bne.n	8005a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf14      	ite	ne
 8005a2e:	2301      	movne	r3, #1
 8005a30:	2300      	moveq	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	e00b      	b.n	8005a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	43da      	mvns	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4013      	ands	r3, r2
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	bf14      	ite	ne
 8005a48:	2301      	movne	r3, #1
 8005a4a:	2300      	moveq	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d18d      	bne.n	800596e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a68:	e02d      	b.n	8005ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f8ce 	bl	8005c0c <I2C_IsAcknowledgeFailed>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e02d      	b.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d021      	beq.n	8005ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fe fcd1 	bl	8004428 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d116      	bne.n	8005ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e007      	b.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d1ca      	bne.n	8005a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005aea:	e02d      	b.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f88d 	bl	8005c0c <I2C_IsAcknowledgeFailed>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e02d      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d021      	beq.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b04:	f7fe fc90 	bl	8004428 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d116      	bne.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e007      	b.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d1ca      	bne.n	8005aec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b6c:	e042      	b.n	8005bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d119      	bne.n	8005bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0210 	mvn.w	r2, #16
 8005b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e029      	b.n	8005c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb0:	f7fe fc3a 	bl	8004428 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d116      	bne.n	8005bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e007      	b.n	8005c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d1b5      	bne.n	8005b6e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c22:	d11b      	bne.n	8005c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0204 	orr.w	r2, r3, #4
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e264      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d075      	beq.n	8005d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c8a:	4ba3      	ldr	r3, [pc, #652]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d00c      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c96:	4ba0      	ldr	r3, [pc, #640]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d112      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ca2:	4b9d      	ldr	r3, [pc, #628]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cae:	d10b      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb0:	4b99      	ldr	r3, [pc, #612]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d05b      	beq.n	8005d74 <HAL_RCC_OscConfig+0x108>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d157      	bne.n	8005d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e23f      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cd0:	d106      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x74>
 8005cd2:	4b91      	ldr	r3, [pc, #580]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a90      	ldr	r2, [pc, #576]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
 8005cde:	e01d      	b.n	8005d1c <HAL_RCC_OscConfig+0xb0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ce8:	d10c      	bne.n	8005d04 <HAL_RCC_OscConfig+0x98>
 8005cea:	4b8b      	ldr	r3, [pc, #556]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a8a      	ldr	r2, [pc, #552]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	4b88      	ldr	r3, [pc, #544]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a87      	ldr	r2, [pc, #540]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d00:	6013      	str	r3, [r2, #0]
 8005d02:	e00b      	b.n	8005d1c <HAL_RCC_OscConfig+0xb0>
 8005d04:	4b84      	ldr	r3, [pc, #528]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a83      	ldr	r2, [pc, #524]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	4b81      	ldr	r3, [pc, #516]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a80      	ldr	r2, [pc, #512]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d013      	beq.n	8005d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d24:	f7fe fb80 	bl	8004428 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fe fb7c 	bl	8004428 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e204      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b76      	ldr	r3, [pc, #472]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d0f0      	beq.n	8005d2c <HAL_RCC_OscConfig+0xc0>
 8005d4a:	e014      	b.n	8005d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4c:	f7fe fb6c 	bl	8004428 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d54:	f7fe fb68 	bl	8004428 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b64      	cmp	r3, #100	; 0x64
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e1f0      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d66:	4b6c      	ldr	r3, [pc, #432]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0xe8>
 8005d72:	e000      	b.n	8005d76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d063      	beq.n	8005e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d82:	4b65      	ldr	r3, [pc, #404]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00b      	beq.n	8005da6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d8e:	4b62      	ldr	r3, [pc, #392]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d96:	2b08      	cmp	r3, #8
 8005d98:	d11c      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d116      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da6:	4b5c      	ldr	r3, [pc, #368]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <HAL_RCC_OscConfig+0x152>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d001      	beq.n	8005dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e1c4      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbe:	4b56      	ldr	r3, [pc, #344]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4952      	ldr	r1, [pc, #328]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	e03a      	b.n	8005e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d020      	beq.n	8005e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ddc:	4b4f      	ldr	r3, [pc, #316]	; (8005f1c <HAL_RCC_OscConfig+0x2b0>)
 8005dde:	2201      	movs	r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fe fb21 	bl	8004428 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dea:	f7fe fb1d 	bl	8004428 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e1a5      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dfc:	4b46      	ldr	r3, [pc, #280]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d0f0      	beq.n	8005dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e08:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	4940      	ldr	r1, [pc, #256]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]
 8005e1c:	e015      	b.n	8005e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e1e:	4b3f      	ldr	r3, [pc, #252]	; (8005f1c <HAL_RCC_OscConfig+0x2b0>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e24:	f7fe fb00 	bl	8004428 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e2c:	f7fe fafc 	bl	8004428 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e184      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e3e:	4b36      	ldr	r3, [pc, #216]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d030      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <HAL_RCC_OscConfig+0x2b4>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e64:	f7fe fae0 	bl	8004428 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6c:	f7fe fadc 	bl	8004428 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e164      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e7e:	4b26      	ldr	r3, [pc, #152]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0x200>
 8005e8a:	e015      	b.n	8005eb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e8c:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <HAL_RCC_OscConfig+0x2b4>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e92:	f7fe fac9 	bl	8004428 <HAL_GetTick>
 8005e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e9a:	f7fe fac5 	bl	8004428 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d901      	bls.n	8005eac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e14d      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1f0      	bne.n	8005e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80a0 	beq.w	8006006 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eca:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	4a0e      	ldr	r2, [pc, #56]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eee:	60bb      	str	r3, [r7, #8]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <HAL_RCC_OscConfig+0x2b8>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d121      	bne.n	8005f46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f02:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <HAL_RCC_OscConfig+0x2b8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a07      	ldr	r2, [pc, #28]	; (8005f24 <HAL_RCC_OscConfig+0x2b8>)
 8005f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f0e:	f7fe fa8b 	bl	8004428 <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f14:	e011      	b.n	8005f3a <HAL_RCC_OscConfig+0x2ce>
 8005f16:	bf00      	nop
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	42470000 	.word	0x42470000
 8005f20:	42470e80 	.word	0x42470e80
 8005f24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f28:	f7fe fa7e 	bl	8004428 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e106      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3a:	4b85      	ldr	r3, [pc, #532]	; (8006150 <HAL_RCC_OscConfig+0x4e4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d0f0      	beq.n	8005f28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCC_OscConfig+0x2f0>
 8005f4e:	4b81      	ldr	r3, [pc, #516]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f52:	4a80      	ldr	r2, [pc, #512]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	6713      	str	r3, [r2, #112]	; 0x70
 8005f5a:	e01c      	b.n	8005f96 <HAL_RCC_OscConfig+0x32a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b05      	cmp	r3, #5
 8005f62:	d10c      	bne.n	8005f7e <HAL_RCC_OscConfig+0x312>
 8005f64:	4b7b      	ldr	r3, [pc, #492]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f68:	4a7a      	ldr	r2, [pc, #488]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f6a:	f043 0304 	orr.w	r3, r3, #4
 8005f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f70:	4b78      	ldr	r3, [pc, #480]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	4a77      	ldr	r2, [pc, #476]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7c:	e00b      	b.n	8005f96 <HAL_RCC_OscConfig+0x32a>
 8005f7e:	4b75      	ldr	r3, [pc, #468]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	4a74      	ldr	r2, [pc, #464]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	6713      	str	r3, [r2, #112]	; 0x70
 8005f8a:	4b72      	ldr	r3, [pc, #456]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a71      	ldr	r2, [pc, #452]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d015      	beq.n	8005fca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9e:	f7fe fa43 	bl	8004428 <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fe fa3f 	bl	8004428 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e0c5      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fbc:	4b65      	ldr	r3, [pc, #404]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0ee      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x33a>
 8005fc8:	e014      	b.n	8005ff4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fca:	f7fe fa2d 	bl	8004428 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fd2:	f7fe fa29 	bl	8004428 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e0af      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fe8:	4b5a      	ldr	r3, [pc, #360]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1ee      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff4:	7dfb      	ldrb	r3, [r7, #23]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d105      	bne.n	8006006 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffa:	4b56      	ldr	r3, [pc, #344]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	4a55      	ldr	r2, [pc, #340]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8006000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006004:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 809b 	beq.w	8006146 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006010:	4b50      	ldr	r3, [pc, #320]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f003 030c 	and.w	r3, r3, #12
 8006018:	2b08      	cmp	r3, #8
 800601a:	d05c      	beq.n	80060d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d141      	bne.n	80060a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006024:	4b4c      	ldr	r3, [pc, #304]	; (8006158 <HAL_RCC_OscConfig+0x4ec>)
 8006026:	2200      	movs	r2, #0
 8006028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602a:	f7fe f9fd 	bl	8004428 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006032:	f7fe f9f9 	bl	8004428 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e081      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006044:	4b43      	ldr	r3, [pc, #268]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1f0      	bne.n	8006032 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	019b      	lsls	r3, r3, #6
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	3b01      	subs	r3, #1
 800606a:	041b      	lsls	r3, r3, #16
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006072:	061b      	lsls	r3, r3, #24
 8006074:	4937      	ldr	r1, [pc, #220]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 8006076:	4313      	orrs	r3, r2
 8006078:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800607a:	4b37      	ldr	r3, [pc, #220]	; (8006158 <HAL_RCC_OscConfig+0x4ec>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006080:	f7fe f9d2 	bl	8004428 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006088:	f7fe f9ce 	bl	8004428 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e056      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609a:	4b2e      	ldr	r3, [pc, #184]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0x41c>
 80060a6:	e04e      	b.n	8006146 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a8:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <HAL_RCC_OscConfig+0x4ec>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ae:	f7fe f9bb 	bl	8004428 <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060b6:	f7fe f9b7 	bl	8004428 <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e03f      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c8:	4b22      	ldr	r3, [pc, #136]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <HAL_RCC_OscConfig+0x44a>
 80060d4:	e037      	b.n	8006146 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e032      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <HAL_RCC_OscConfig+0x4e8>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	699b      	ldr	r3, [r3, #24]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d028      	beq.n	8006142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d121      	bne.n	8006142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006108:	429a      	cmp	r2, r3
 800610a:	d11a      	bne.n	8006142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006112:	4013      	ands	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006118:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800611a:	4293      	cmp	r3, r2
 800611c:	d111      	bne.n	8006142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	085b      	lsrs	r3, r3, #1
 800612a:	3b01      	subs	r3, #1
 800612c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800612e:	429a      	cmp	r2, r3
 8006130:	d107      	bne.n	8006142 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d001      	beq.n	8006146 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3718      	adds	r7, #24
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40007000 	.word	0x40007000
 8006154:	40023800 	.word	0x40023800
 8006158:	42470060 	.word	0x42470060

0800615c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d101      	bne.n	8006170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0cc      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006170:	4b68      	ldr	r3, [pc, #416]	; (8006314 <HAL_RCC_ClockConfig+0x1b8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0307 	and.w	r3, r3, #7
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d90c      	bls.n	8006198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800617e:	4b65      	ldr	r3, [pc, #404]	; (8006314 <HAL_RCC_ClockConfig+0x1b8>)
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006186:	4b63      	ldr	r3, [pc, #396]	; (8006314 <HAL_RCC_ClockConfig+0x1b8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	429a      	cmp	r2, r3
 8006192:	d001      	beq.n	8006198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0b8      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d020      	beq.n	80061e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b0:	4b59      	ldr	r3, [pc, #356]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4a58      	ldr	r2, [pc, #352]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061c8:	4b53      	ldr	r3, [pc, #332]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	4a52      	ldr	r2, [pc, #328]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d4:	4b50      	ldr	r3, [pc, #320]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	494d      	ldr	r1, [pc, #308]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d044      	beq.n	800627c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061fa:	4b47      	ldr	r3, [pc, #284]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d119      	bne.n	800623a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e07f      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d003      	beq.n	800621a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006216:	2b03      	cmp	r3, #3
 8006218:	d107      	bne.n	800622a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621a:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e06f      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622a:	4b3b      	ldr	r3, [pc, #236]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e067      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800623a:	4b37      	ldr	r3, [pc, #220]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f023 0203 	bic.w	r2, r3, #3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4934      	ldr	r1, [pc, #208]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	4313      	orrs	r3, r2
 800624a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800624c:	f7fe f8ec 	bl	8004428 <HAL_GetTick>
 8006250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006252:	e00a      	b.n	800626a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006254:	f7fe f8e8 	bl	8004428 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006262:	4293      	cmp	r3, r2
 8006264:	d901      	bls.n	800626a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e04f      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800626a:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 020c 	and.w	r2, r3, #12
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	429a      	cmp	r2, r3
 800627a:	d1eb      	bne.n	8006254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800627c:	4b25      	ldr	r3, [pc, #148]	; (8006314 <HAL_RCC_ClockConfig+0x1b8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d20c      	bcs.n	80062a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800628a:	4b22      	ldr	r3, [pc, #136]	; (8006314 <HAL_RCC_ClockConfig+0x1b8>)
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006292:	4b20      	ldr	r3, [pc, #128]	; (8006314 <HAL_RCC_ClockConfig+0x1b8>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d001      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e032      	b.n	800630a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d008      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062b0:	4b19      	ldr	r3, [pc, #100]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4916      	ldr	r1, [pc, #88]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d009      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ce:	4b12      	ldr	r3, [pc, #72]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	490e      	ldr	r1, [pc, #56]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80062e2:	f000 f821 	bl	8006328 <HAL_RCC_GetSysClockFreq>
 80062e6:	4602      	mov	r2, r0
 80062e8:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	091b      	lsrs	r3, r3, #4
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	490a      	ldr	r1, [pc, #40]	; (800631c <HAL_RCC_ClockConfig+0x1c0>)
 80062f4:	5ccb      	ldrb	r3, [r1, r3]
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	4a09      	ldr	r2, [pc, #36]	; (8006320 <HAL_RCC_ClockConfig+0x1c4>)
 80062fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062fe:	4b09      	ldr	r3, [pc, #36]	; (8006324 <HAL_RCC_ClockConfig+0x1c8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe f84c 	bl	80043a0 <HAL_InitTick>

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40023c00 	.word	0x40023c00
 8006318:	40023800 	.word	0x40023800
 800631c:	0800b134 	.word	0x0800b134
 8006320:	20000004 	.word	0x20000004
 8006324:	20000008 	.word	0x20000008

08006328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006328:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	607b      	str	r3, [r7, #4]
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	2300      	movs	r3, #0
 800633a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006340:	4b67      	ldr	r3, [pc, #412]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 030c 	and.w	r3, r3, #12
 8006348:	2b08      	cmp	r3, #8
 800634a:	d00d      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0x40>
 800634c:	2b08      	cmp	r3, #8
 800634e:	f200 80bd 	bhi.w	80064cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_RCC_GetSysClockFreq+0x34>
 8006356:	2b04      	cmp	r3, #4
 8006358:	d003      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0x3a>
 800635a:	e0b7      	b.n	80064cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800635c:	4b61      	ldr	r3, [pc, #388]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800635e:	60bb      	str	r3, [r7, #8]
       break;
 8006360:	e0b7      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006362:	4b60      	ldr	r3, [pc, #384]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006364:	60bb      	str	r3, [r7, #8]
      break;
 8006366:	e0b4      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006368:	4b5d      	ldr	r3, [pc, #372]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006370:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006372:	4b5b      	ldr	r3, [pc, #364]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d04d      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800637e:	4b58      	ldr	r3, [pc, #352]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	099b      	lsrs	r3, r3, #6
 8006384:	461a      	mov	r2, r3
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800638e:	f04f 0100 	mov.w	r1, #0
 8006392:	ea02 0800 	and.w	r8, r2, r0
 8006396:	ea03 0901 	and.w	r9, r3, r1
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	014b      	lsls	r3, r1, #5
 80063a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063ac:	0142      	lsls	r2, r0, #5
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	ebb0 0008 	subs.w	r0, r0, r8
 80063b6:	eb61 0109 	sbc.w	r1, r1, r9
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	018b      	lsls	r3, r1, #6
 80063c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80063c8:	0182      	lsls	r2, r0, #6
 80063ca:	1a12      	subs	r2, r2, r0
 80063cc:	eb63 0301 	sbc.w	r3, r3, r1
 80063d0:	f04f 0000 	mov.w	r0, #0
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	00d9      	lsls	r1, r3, #3
 80063da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063de:	00d0      	lsls	r0, r2, #3
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	eb12 0208 	adds.w	r2, r2, r8
 80063e8:	eb43 0309 	adc.w	r3, r3, r9
 80063ec:	f04f 0000 	mov.w	r0, #0
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	0299      	lsls	r1, r3, #10
 80063f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063fa:	0290      	lsls	r0, r2, #10
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	461a      	mov	r2, r3
 8006408:	f04f 0300 	mov.w	r3, #0
 800640c:	f7fa fbcc 	bl	8000ba8 <__aeabi_uldivmod>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4613      	mov	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e04a      	b.n	80064b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	461a      	mov	r2, r3
 8006422:	f04f 0300 	mov.w	r3, #0
 8006426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800642a:	f04f 0100 	mov.w	r1, #0
 800642e:	ea02 0400 	and.w	r4, r2, r0
 8006432:	ea03 0501 	and.w	r5, r3, r1
 8006436:	4620      	mov	r0, r4
 8006438:	4629      	mov	r1, r5
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	014b      	lsls	r3, r1, #5
 8006444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006448:	0142      	lsls	r2, r0, #5
 800644a:	4610      	mov	r0, r2
 800644c:	4619      	mov	r1, r3
 800644e:	1b00      	subs	r0, r0, r4
 8006450:	eb61 0105 	sbc.w	r1, r1, r5
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	018b      	lsls	r3, r1, #6
 800645e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006462:	0182      	lsls	r2, r0, #6
 8006464:	1a12      	subs	r2, r2, r0
 8006466:	eb63 0301 	sbc.w	r3, r3, r1
 800646a:	f04f 0000 	mov.w	r0, #0
 800646e:	f04f 0100 	mov.w	r1, #0
 8006472:	00d9      	lsls	r1, r3, #3
 8006474:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006478:	00d0      	lsls	r0, r2, #3
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	1912      	adds	r2, r2, r4
 8006480:	eb45 0303 	adc.w	r3, r5, r3
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f04f 0100 	mov.w	r1, #0
 800648c:	0299      	lsls	r1, r3, #10
 800648e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006492:	0290      	lsls	r0, r2, #10
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	461a      	mov	r2, r3
 80064a0:	f04f 0300 	mov.w	r3, #0
 80064a4:	f7fa fb80 	bl	8000ba8 <__aeabi_uldivmod>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4613      	mov	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	3301      	adds	r3, #1
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c8:	60bb      	str	r3, [r7, #8]
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80064ce:	60bb      	str	r3, [r7, #8]
      break;
 80064d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064d2:	68bb      	ldr	r3, [r7, #8]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064de:	bf00      	nop
 80064e0:	40023800 	.word	0x40023800
 80064e4:	00f42400 	.word	0x00f42400

080064e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064ec:	4b03      	ldr	r3, [pc, #12]	; (80064fc <HAL_RCC_GetHCLKFreq+0x14>)
 80064ee:	681b      	ldr	r3, [r3, #0]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000004 	.word	0x20000004

08006500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006504:	f7ff fff0 	bl	80064e8 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	0a9b      	lsrs	r3, r3, #10
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4903      	ldr	r1, [pc, #12]	; (8006524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800651c:	4618      	mov	r0, r3
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40023800 	.word	0x40023800
 8006524:	0800b144 	.word	0x0800b144

08006528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800652c:	f7ff ffdc 	bl	80064e8 <HAL_RCC_GetHCLKFreq>
 8006530:	4602      	mov	r2, r0
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	0b5b      	lsrs	r3, r3, #13
 8006538:	f003 0307 	and.w	r3, r3, #7
 800653c:	4903      	ldr	r1, [pc, #12]	; (800654c <HAL_RCC_GetPCLK2Freq+0x24>)
 800653e:	5ccb      	ldrb	r3, [r1, r3]
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40023800 	.word	0x40023800
 800654c:	0800b144 	.word	0x0800b144

08006550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e07b      	b.n	800665a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006572:	d009      	beq.n	8006588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	61da      	str	r2, [r3, #28]
 800657a:	e005      	b.n	8006588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fd faf0 	bl	8003b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065da:	431a      	orrs	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660c:	ea42 0103 	orr.w	r1, r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	f003 0104 	and.w	r1, r3, #4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	f003 0210 	and.w	r2, r3, #16
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	69da      	ldr	r2, [r3, #28]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b088      	sub	sp, #32
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	603b      	str	r3, [r7, #0]
 800666e:	4613      	mov	r3, r2
 8006670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_SPI_Transmit+0x22>
 8006680:	2302      	movs	r3, #2
 8006682:	e126      	b.n	80068d2 <HAL_SPI_Transmit+0x270>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800668c:	f7fd fecc 	bl	8004428 <HAL_GetTick>
 8006690:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d002      	beq.n	80066a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066a2:	2302      	movs	r3, #2
 80066a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066a6:	e10b      	b.n	80068c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <HAL_SPI_Transmit+0x52>
 80066ae:	88fb      	ldrh	r3, [r7, #6]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066b8:	e102      	b.n	80068c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2203      	movs	r2, #3
 80066be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	88fa      	ldrh	r2, [r7, #6]
 80066d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	88fa      	ldrh	r2, [r7, #6]
 80066d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006700:	d10f      	bne.n	8006722 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006710:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006720:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d007      	beq.n	8006740 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800673e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006748:	d14b      	bne.n	80067e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d002      	beq.n	8006758 <HAL_SPI_Transmit+0xf6>
 8006752:	8afb      	ldrh	r3, [r7, #22]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d13e      	bne.n	80067d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675c:	881a      	ldrh	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	1c9a      	adds	r2, r3, #2
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006772:	b29b      	uxth	r3, r3
 8006774:	3b01      	subs	r3, #1
 8006776:	b29a      	uxth	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800677c:	e02b      	b.n	80067d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0302 	and.w	r3, r3, #2
 8006788:	2b02      	cmp	r3, #2
 800678a:	d112      	bne.n	80067b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006790:	881a      	ldrh	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80067b0:	e011      	b.n	80067d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b2:	f7fd fe39 	bl	8004428 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	683a      	ldr	r2, [r7, #0]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d803      	bhi.n	80067ca <HAL_SPI_Transmit+0x168>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d102      	bne.n	80067d0 <HAL_SPI_Transmit+0x16e>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067d4:	e074      	b.n	80068c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1ce      	bne.n	800677e <HAL_SPI_Transmit+0x11c>
 80067e0:	e04c      	b.n	800687c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <HAL_SPI_Transmit+0x18e>
 80067ea:	8afb      	ldrh	r3, [r7, #22]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d140      	bne.n	8006872 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006816:	e02c      	b.n	8006872 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b02      	cmp	r3, #2
 8006824:	d113      	bne.n	800684e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	7812      	ldrb	r2, [r2, #0]
 8006832:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	86da      	strh	r2, [r3, #54]	; 0x36
 800684c:	e011      	b.n	8006872 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800684e:	f7fd fdeb 	bl	8004428 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d803      	bhi.n	8006866 <HAL_SPI_Transmit+0x204>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006864:	d102      	bne.n	800686c <HAL_SPI_Transmit+0x20a>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006870:	e026      	b.n	80068c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1cd      	bne.n	8006818 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f8b3 	bl	80069ec <SPI_EndRxTxTransaction>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2220      	movs	r2, #32
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e000      	b.n	80068c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80068be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3720      	adds	r7, #32
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068ec:	f7fd fd9c 	bl	8004428 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	4413      	add	r3, r2
 80068fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068fc:	f7fd fd94 	bl	8004428 <HAL_GetTick>
 8006900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006902:	4b39      	ldr	r3, [pc, #228]	; (80069e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	015b      	lsls	r3, r3, #5
 8006908:	0d1b      	lsrs	r3, r3, #20
 800690a:	69fa      	ldr	r2, [r7, #28]
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006912:	e054      	b.n	80069be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d050      	beq.n	80069be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800691c:	f7fd fd84 	bl	8004428 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	429a      	cmp	r2, r3
 800692a:	d902      	bls.n	8006932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d13d      	bne.n	80069ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800694a:	d111      	bne.n	8006970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006954:	d004      	beq.n	8006960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d107      	bne.n	8006970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800696e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006978:	d10f      	bne.n	800699a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e017      	b.n	80069de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689a      	ldr	r2, [r3, #8]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4013      	ands	r3, r2
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	bf0c      	ite	eq
 80069ce:	2301      	moveq	r3, #1
 80069d0:	2300      	movne	r3, #0
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d19b      	bne.n	8006914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	20000004 	.word	0x20000004

080069ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069f8:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <SPI_EndRxTxTransaction+0x7c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1b      	ldr	r2, [pc, #108]	; (8006a6c <SPI_EndRxTxTransaction+0x80>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	0d5b      	lsrs	r3, r3, #21
 8006a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a08:	fb02 f303 	mul.w	r3, r2, r3
 8006a0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a16:	d112      	bne.n	8006a3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f7ff ff5a 	bl	80068dc <SPI_WaitFlagStateUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d016      	beq.n	8006a5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	f043 0220 	orr.w	r2, r3, #32
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e00f      	b.n	8006a5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	2b80      	cmp	r3, #128	; 0x80
 8006a56:	d0f2      	beq.n	8006a3e <SPI_EndRxTxTransaction+0x52>
 8006a58:	e000      	b.n	8006a5c <SPI_EndRxTxTransaction+0x70>
        break;
 8006a5a:	bf00      	nop
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000004 	.word	0x20000004
 8006a6c:	165e9f81 	.word	0x165e9f81

08006a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e041      	b.n	8006b06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fd fb28 	bl	80040ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	3304      	adds	r3, #4
 8006aac:	4619      	mov	r1, r3
 8006aae:	4610      	mov	r0, r2
 8006ab0:	f000 fd18 	bl	80074e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d001      	beq.n	8006b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e04e      	b.n	8006bc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a23      	ldr	r2, [pc, #140]	; (8006bd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d022      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b52:	d01d      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a1f      	ldr	r2, [pc, #124]	; (8006bd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d018      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a1e      	ldr	r2, [pc, #120]	; (8006bdc <HAL_TIM_Base_Start_IT+0xcc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1c      	ldr	r2, [pc, #112]	; (8006be0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00e      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1b      	ldr	r2, [pc, #108]	; (8006be4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a19      	ldr	r2, [pc, #100]	; (8006be8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x80>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a18      	ldr	r2, [pc, #96]	; (8006bec <HAL_TIM_Base_Start_IT+0xdc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d111      	bne.n	8006bb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d010      	beq.n	8006bc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0201 	orr.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb2:	e007      	b.n	8006bc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40001800 	.word	0x40001800

08006bf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a1a      	ldr	r2, [r3, #32]
 8006c0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c12:	4013      	ands	r3, r2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <HAL_TIM_Base_Stop_IT+0x48>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6a1a      	ldr	r2, [r3, #32]
 8006c1e:	f240 4344 	movw	r3, #1092	; 0x444
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d107      	bne.n	8006c38 <HAL_TIM_Base_Stop_IT+0x48>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0201 	bic.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e041      	b.n	8006ce4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f839 	bl	8006cec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 fc29 	bl	80074e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <HAL_TIM_PWM_Start+0x24>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	bf14      	ite	ne
 8006d1c:	2301      	movne	r3, #1
 8006d1e:	2300      	moveq	r3, #0
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	e022      	b.n	8006d6a <HAL_TIM_PWM_Start+0x6a>
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	d109      	bne.n	8006d3e <HAL_TIM_PWM_Start+0x3e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	e015      	b.n	8006d6a <HAL_TIM_PWM_Start+0x6a>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d109      	bne.n	8006d58 <HAL_TIM_PWM_Start+0x58>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	e008      	b.n	8006d6a <HAL_TIM_PWM_Start+0x6a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e07c      	b.n	8006e6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d104      	bne.n	8006d82 <HAL_TIM_PWM_Start+0x82>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d80:	e013      	b.n	8006daa <HAL_TIM_PWM_Start+0xaa>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d104      	bne.n	8006d92 <HAL_TIM_PWM_Start+0x92>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d90:	e00b      	b.n	8006daa <HAL_TIM_PWM_Start+0xaa>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d104      	bne.n	8006da2 <HAL_TIM_PWM_Start+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da0:	e003      	b.n	8006daa <HAL_TIM_PWM_Start+0xaa>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2201      	movs	r2, #1
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fe80 	bl	8007ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2d      	ldr	r2, [pc, #180]	; (8006e74 <HAL_TIM_PWM_Start+0x174>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_TIM_PWM_Start+0xcc>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2c      	ldr	r2, [pc, #176]	; (8006e78 <HAL_TIM_PWM_Start+0x178>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d101      	bne.n	8006dd0 <HAL_TIM_PWM_Start+0xd0>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <HAL_TIM_PWM_Start+0xd2>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d007      	beq.n	8006de6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006de4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a22      	ldr	r2, [pc, #136]	; (8006e74 <HAL_TIM_PWM_Start+0x174>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d022      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df8:	d01d      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1f      	ldr	r2, [pc, #124]	; (8006e7c <HAL_TIM_PWM_Start+0x17c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d018      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1d      	ldr	r2, [pc, #116]	; (8006e80 <HAL_TIM_PWM_Start+0x180>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d013      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1c      	ldr	r2, [pc, #112]	; (8006e84 <HAL_TIM_PWM_Start+0x184>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00e      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a16      	ldr	r2, [pc, #88]	; (8006e78 <HAL_TIM_PWM_Start+0x178>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d009      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a18      	ldr	r2, [pc, #96]	; (8006e88 <HAL_TIM_PWM_Start+0x188>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d004      	beq.n	8006e36 <HAL_TIM_PWM_Start+0x136>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <HAL_TIM_PWM_Start+0x18c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d111      	bne.n	8006e5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	d010      	beq.n	8006e6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e58:	e007      	b.n	8006e6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400
 8006e7c:	40000400 	.word	0x40000400
 8006e80:	40000800 	.word	0x40000800
 8006e84:	40000c00 	.word	0x40000c00
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40001800 	.word	0x40001800

08006e90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fe08 	bl	8007ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a2e      	ldr	r2, [pc, #184]	; (8006f68 <HAL_TIM_PWM_Stop+0xd8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d004      	beq.n	8006ebc <HAL_TIM_PWM_Stop+0x2c>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a2d      	ldr	r2, [pc, #180]	; (8006f6c <HAL_TIM_PWM_Stop+0xdc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d101      	bne.n	8006ec0 <HAL_TIM_PWM_Stop+0x30>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e000      	b.n	8006ec2 <HAL_TIM_PWM_Stop+0x32>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d017      	beq.n	8006ef6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10f      	bne.n	8006ef6 <HAL_TIM_PWM_Stop+0x66>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	6a1a      	ldr	r2, [r3, #32]
 8006edc:	f240 4344 	movw	r3, #1092	; 0x444
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d107      	bne.n	8006ef6 <HAL_TIM_PWM_Stop+0x66>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a1a      	ldr	r2, [r3, #32]
 8006efc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10f      	bne.n	8006f26 <HAL_TIM_PWM_Stop+0x96>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6a1a      	ldr	r2, [r3, #32]
 8006f0c:	f240 4344 	movw	r3, #1092	; 0x444
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d107      	bne.n	8006f26 <HAL_TIM_PWM_Stop+0x96>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0201 	bic.w	r2, r2, #1
 8006f24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d104      	bne.n	8006f36 <HAL_TIM_PWM_Stop+0xa6>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f34:	e013      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xce>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_PWM_Stop+0xb6>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f44:	e00b      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xce>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_PWM_Stop+0xc6>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f54:	e003      	b.n	8006f5e <HAL_TIM_PWM_Stop+0xce>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40010400 	.word	0x40010400

08006f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d122      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d11b      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0202 	mvn.w	r2, #2
 8006f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa77 	bl	80074a6 <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa69 	bl	8007492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fa7a 	bl	80074ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	d122      	bne.n	8007020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d11b      	bne.n	8007020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0204 	mvn.w	r2, #4
 8006ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa4d 	bl	80074a6 <HAL_TIM_IC_CaptureCallback>
 800700c:	e005      	b.n	800701a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fa3f 	bl	8007492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fa50 	bl	80074ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b08      	cmp	r3, #8
 800702c:	d122      	bne.n	8007074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0308 	and.w	r3, r3, #8
 8007038:	2b08      	cmp	r3, #8
 800703a:	d11b      	bne.n	8007074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0208 	mvn.w	r2, #8
 8007044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2204      	movs	r2, #4
 800704a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa23 	bl	80074a6 <HAL_TIM_IC_CaptureCallback>
 8007060:	e005      	b.n	800706e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fa15 	bl	8007492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa26 	bl	80074ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f003 0310 	and.w	r3, r3, #16
 800707e:	2b10      	cmp	r3, #16
 8007080:	d122      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	f003 0310 	and.w	r3, r3, #16
 800708c:	2b10      	cmp	r3, #16
 800708e:	d11b      	bne.n	80070c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0210 	mvn.w	r2, #16
 8007098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2208      	movs	r2, #8
 800709e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f9f9 	bl	80074a6 <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f9eb 	bl	8007492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9fc 	bl	80074ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d10e      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d107      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f06f 0201 	mvn.w	r2, #1
 80070ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fc faf8 	bl	80036e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d10e      	bne.n	8007120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710c:	2b80      	cmp	r3, #128	; 0x80
 800710e:	d107      	bne.n	8007120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 fd78 	bl	8007c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712a:	2b40      	cmp	r3, #64	; 0x40
 800712c:	d10e      	bne.n	800714c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d107      	bne.n	800714c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f9c1 	bl	80074ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b20      	cmp	r3, #32
 8007158:	d10e      	bne.n	8007178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b20      	cmp	r3, #32
 8007166:	d107      	bne.n	8007178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0220 	mvn.w	r2, #32
 8007170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fd42 	bl	8007bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800718c:	2300      	movs	r3, #0
 800718e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007196:	2b01      	cmp	r3, #1
 8007198:	d101      	bne.n	800719e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800719a:	2302      	movs	r3, #2
 800719c:	e0ae      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b0c      	cmp	r3, #12
 80071aa:	f200 809f 	bhi.w	80072ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071e9 	.word	0x080071e9
 80071b8:	080072ed 	.word	0x080072ed
 80071bc:	080072ed 	.word	0x080072ed
 80071c0:	080072ed 	.word	0x080072ed
 80071c4:	08007229 	.word	0x08007229
 80071c8:	080072ed 	.word	0x080072ed
 80071cc:	080072ed 	.word	0x080072ed
 80071d0:	080072ed 	.word	0x080072ed
 80071d4:	0800726b 	.word	0x0800726b
 80071d8:	080072ed 	.word	0x080072ed
 80071dc:	080072ed 	.word	0x080072ed
 80071e0:	080072ed 	.word	0x080072ed
 80071e4:	080072ab 	.word	0x080072ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fa18 	bl	8007624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0208 	orr.w	r2, r2, #8
 8007202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0204 	bic.w	r2, r2, #4
 8007212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6999      	ldr	r1, [r3, #24]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	619a      	str	r2, [r3, #24]
      break;
 8007226:	e064      	b.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fa68 	bl	8007704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6999      	ldr	r1, [r3, #24]
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	021a      	lsls	r2, r3, #8
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	619a      	str	r2, [r3, #24]
      break;
 8007268:	e043      	b.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68b9      	ldr	r1, [r7, #8]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fabd 	bl	80077f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0208 	orr.w	r2, r2, #8
 8007284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0204 	bic.w	r2, r2, #4
 8007294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69d9      	ldr	r1, [r3, #28]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	61da      	str	r2, [r3, #28]
      break;
 80072a8:	e023      	b.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 fb11 	bl	80078d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	69da      	ldr	r2, [r3, #28]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69d9      	ldr	r1, [r3, #28]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	021a      	lsls	r2, r3, #8
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	61da      	str	r2, [r3, #28]
      break;
 80072ea:	e002      	b.n	80072f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
      break;
 80072f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIM_ConfigClockSource+0x1c>
 800731c:	2302      	movs	r3, #2
 800731e:	e0b4      	b.n	800748a <HAL_TIM_ConfigClockSource+0x186>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800733e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007358:	d03e      	beq.n	80073d8 <HAL_TIM_ConfigClockSource+0xd4>
 800735a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735e:	f200 8087 	bhi.w	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007366:	f000 8086 	beq.w	8007476 <HAL_TIM_ConfigClockSource+0x172>
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d87f      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007370:	2b70      	cmp	r3, #112	; 0x70
 8007372:	d01a      	beq.n	80073aa <HAL_TIM_ConfigClockSource+0xa6>
 8007374:	2b70      	cmp	r3, #112	; 0x70
 8007376:	d87b      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007378:	2b60      	cmp	r3, #96	; 0x60
 800737a:	d050      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x11a>
 800737c:	2b60      	cmp	r3, #96	; 0x60
 800737e:	d877      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007380:	2b50      	cmp	r3, #80	; 0x50
 8007382:	d03c      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0xfa>
 8007384:	2b50      	cmp	r3, #80	; 0x50
 8007386:	d873      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	d058      	beq.n	800743e <HAL_TIM_ConfigClockSource+0x13a>
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d86f      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007390:	2b30      	cmp	r3, #48	; 0x30
 8007392:	d064      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x15a>
 8007394:	2b30      	cmp	r3, #48	; 0x30
 8007396:	d86b      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b20      	cmp	r3, #32
 800739a:	d060      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x15a>
 800739c:	2b20      	cmp	r3, #32
 800739e:	d867      	bhi.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d05c      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x15a>
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d05a      	beq.n	800745e <HAL_TIM_ConfigClockSource+0x15a>
 80073a8:	e062      	b.n	8007470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6899      	ldr	r1, [r3, #8]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f000 fb5d 	bl	8007a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	609a      	str	r2, [r3, #8]
      break;
 80073d6:	e04f      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6899      	ldr	r1, [r3, #8]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f000 fb46 	bl	8007a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073fa:	609a      	str	r2, [r3, #8]
      break;
 80073fc:	e03c      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6859      	ldr	r1, [r3, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	461a      	mov	r2, r3
 800740c:	f000 faba 	bl	8007984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2150      	movs	r1, #80	; 0x50
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fb13 	bl	8007a42 <TIM_ITRx_SetConfig>
      break;
 800741c:	e02c      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6859      	ldr	r1, [r3, #4]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	461a      	mov	r2, r3
 800742c:	f000 fad9 	bl	80079e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2160      	movs	r1, #96	; 0x60
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fb03 	bl	8007a42 <TIM_ITRx_SetConfig>
      break;
 800743c:	e01c      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6859      	ldr	r1, [r3, #4]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	461a      	mov	r2, r3
 800744c:	f000 fa9a 	bl	8007984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2140      	movs	r1, #64	; 0x40
 8007456:	4618      	mov	r0, r3
 8007458:	f000 faf3 	bl	8007a42 <TIM_ITRx_SetConfig>
      break;
 800745c:	e00c      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f000 faea 	bl	8007a42 <TIM_ITRx_SetConfig>
      break;
 800746e:	e003      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
      break;
 8007474:	e000      	b.n	8007478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074c2:	bf00      	nop
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
	...

080074e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a40      	ldr	r2, [pc, #256]	; (80075f8 <TIM_Base_SetConfig+0x114>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d013      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007502:	d00f      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a3d      	ldr	r2, [pc, #244]	; (80075fc <TIM_Base_SetConfig+0x118>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00b      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a3c      	ldr	r2, [pc, #240]	; (8007600 <TIM_Base_SetConfig+0x11c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d007      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a3b      	ldr	r2, [pc, #236]	; (8007604 <TIM_Base_SetConfig+0x120>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a3a      	ldr	r2, [pc, #232]	; (8007608 <TIM_Base_SetConfig+0x124>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d108      	bne.n	8007536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2f      	ldr	r2, [pc, #188]	; (80075f8 <TIM_Base_SetConfig+0x114>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d02b      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007544:	d027      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2c      	ldr	r2, [pc, #176]	; (80075fc <TIM_Base_SetConfig+0x118>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d023      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a2b      	ldr	r2, [pc, #172]	; (8007600 <TIM_Base_SetConfig+0x11c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01f      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a2a      	ldr	r2, [pc, #168]	; (8007604 <TIM_Base_SetConfig+0x120>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01b      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a29      	ldr	r2, [pc, #164]	; (8007608 <TIM_Base_SetConfig+0x124>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d017      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a28      	ldr	r2, [pc, #160]	; (800760c <TIM_Base_SetConfig+0x128>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d013      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a27      	ldr	r2, [pc, #156]	; (8007610 <TIM_Base_SetConfig+0x12c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00f      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a26      	ldr	r2, [pc, #152]	; (8007614 <TIM_Base_SetConfig+0x130>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00b      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a25      	ldr	r2, [pc, #148]	; (8007618 <TIM_Base_SetConfig+0x134>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d007      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a24      	ldr	r2, [pc, #144]	; (800761c <TIM_Base_SetConfig+0x138>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d003      	beq.n	8007596 <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a23      	ldr	r2, [pc, #140]	; (8007620 <TIM_Base_SetConfig+0x13c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d108      	bne.n	80075a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800759c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <TIM_Base_SetConfig+0x114>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d003      	beq.n	80075dc <TIM_Base_SetConfig+0xf8>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <TIM_Base_SetConfig+0x124>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d103      	bne.n	80075e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	615a      	str	r2, [r3, #20]
}
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	40010000 	.word	0x40010000
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
 8007608:	40010400 	.word	0x40010400
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800
 8007618:	40001800 	.word	0x40001800
 800761c:	40001c00 	.word	0x40001c00
 8007620:	40002000 	.word	0x40002000

08007624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f023 0201 	bic.w	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f023 0302 	bic.w	r3, r3, #2
 800766c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <TIM_OC1_SetConfig+0xd8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC1_SetConfig+0x64>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <TIM_OC1_SetConfig+0xdc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10c      	bne.n	80076a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0308 	bic.w	r3, r3, #8
 800768e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0304 	bic.w	r3, r3, #4
 80076a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a15      	ldr	r2, [pc, #84]	; (80076fc <TIM_OC1_SetConfig+0xd8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d003      	beq.n	80076b2 <TIM_OC1_SetConfig+0x8e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <TIM_OC1_SetConfig+0xdc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d111      	bne.n	80076d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400

08007704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0210 	bic.w	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0320 	bic.w	r3, r3, #32
 800774e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a22      	ldr	r2, [pc, #136]	; (80077e8 <TIM_OC2_SetConfig+0xe4>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_OC2_SetConfig+0x68>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a21      	ldr	r2, [pc, #132]	; (80077ec <TIM_OC2_SetConfig+0xe8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d10d      	bne.n	8007788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <TIM_OC2_SetConfig+0xe4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_OC2_SetConfig+0x94>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <TIM_OC2_SetConfig+0xe8>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d113      	bne.n	80077c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40010400 	.word	0x40010400

080077f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b087      	sub	sp, #28
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	69db      	ldr	r3, [r3, #28]
 8007816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0303 	bic.w	r3, r3, #3
 8007826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	021b      	lsls	r3, r3, #8
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a21      	ldr	r2, [pc, #132]	; (80078d0 <TIM_OC3_SetConfig+0xe0>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_OC3_SetConfig+0x66>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <TIM_OC3_SetConfig+0xe4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10d      	bne.n	8007872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800785c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	021b      	lsls	r3, r3, #8
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a16      	ldr	r2, [pc, #88]	; (80078d0 <TIM_OC3_SetConfig+0xe0>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_OC3_SetConfig+0x92>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <TIM_OC3_SetConfig+0xe4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d113      	bne.n	80078aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	011b      	lsls	r3, r3, #4
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	4313      	orrs	r3, r2
 800789c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	621a      	str	r2, [r3, #32]
}
 80078c4:	bf00      	nop
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40010400 	.word	0x40010400

080078d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	031b      	lsls	r3, r3, #12
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a12      	ldr	r2, [pc, #72]	; (800797c <TIM_OC4_SetConfig+0xa4>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d003      	beq.n	8007940 <TIM_OC4_SetConfig+0x68>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a11      	ldr	r2, [pc, #68]	; (8007980 <TIM_OC4_SetConfig+0xa8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d109      	bne.n	8007954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	019b      	lsls	r3, r3, #6
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	40010000 	.word	0x40010000
 8007980:	40010400 	.word	0x40010400

08007984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f023 0201 	bic.w	r2, r3, #1
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f023 030a 	bic.w	r3, r3, #10
 80079c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b087      	sub	sp, #28
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	f023 0210 	bic.w	r2, r3, #16
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	031b      	lsls	r3, r3, #12
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	621a      	str	r2, [r3, #32]
}
 8007a36:	bf00      	nop
 8007a38:	371c      	adds	r7, #28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b085      	sub	sp, #20
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f043 0307 	orr.w	r3, r3, #7
 8007a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	609a      	str	r2, [r3, #8]
}
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	021a      	lsls	r2, r3, #8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	609a      	str	r2, [r3, #8]
}
 8007aac:	bf00      	nop
 8007aae:	371c      	adds	r7, #28
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 031f 	and.w	r3, r3, #31
 8007aca:	2201      	movs	r2, #1
 8007acc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6a1a      	ldr	r2, [r3, #32]
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	43db      	mvns	r3, r3
 8007ada:	401a      	ands	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6a1a      	ldr	r2, [r3, #32]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f003 031f 	and.w	r3, r3, #31
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	fa01 f303 	lsl.w	r3, r1, r3
 8007af0:	431a      	orrs	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	621a      	str	r2, [r3, #32]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
	...

08007b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d101      	bne.n	8007b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e05a      	b.n	8007bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a21      	ldr	r2, [pc, #132]	; (8007be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d022      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b68:	d01d      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d018      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1b      	ldr	r2, [pc, #108]	; (8007be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d013      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00e      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d009      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d004      	beq.n	8007ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d10c      	bne.n	8007bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40010000 	.word	0x40010000
 8007be4:	40000400 	.word	0x40000400
 8007be8:	40000800 	.word	0x40000800
 8007bec:	40000c00 	.word	0x40000c00
 8007bf0:	40010400 	.word	0x40010400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40001800 	.word	0x40001800

08007bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e03f      	b.n	8007cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7fc fb14 	bl	8004278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2224      	movs	r2, #36	; 0x24
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f829 	bl	8007cc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	691a      	ldr	r2, [r3, #16]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695a      	ldr	r2, [r3, #20]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	b09f      	sub	sp, #124	; 0x7c
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd6:	68d9      	ldr	r1, [r3, #12]
 8007cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	ea40 0301 	orr.w	r3, r0, r1
 8007ce0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce4:	689a      	ldr	r2, [r3, #8]
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	431a      	orrs	r2, r3
 8007cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d04:	f021 010c 	bic.w	r1, r1, #12
 8007d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1e:	6999      	ldr	r1, [r3, #24]
 8007d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	ea40 0301 	orr.w	r3, r0, r1
 8007d28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	4bc5      	ldr	r3, [pc, #788]	; (8008044 <UART_SetConfig+0x384>)
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d004      	beq.n	8007d3e <UART_SetConfig+0x7e>
 8007d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	4bc3      	ldr	r3, [pc, #780]	; (8008048 <UART_SetConfig+0x388>)
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d103      	bne.n	8007d46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d3e:	f7fe fbf3 	bl	8006528 <HAL_RCC_GetPCLK2Freq>
 8007d42:	6778      	str	r0, [r7, #116]	; 0x74
 8007d44:	e002      	b.n	8007d4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d46:	f7fe fbdb 	bl	8006500 <HAL_RCC_GetPCLK1Freq>
 8007d4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d54:	f040 80b6 	bne.w	8007ec4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	f04f 0500 	mov.w	r5, #0
 8007d60:	4622      	mov	r2, r4
 8007d62:	462b      	mov	r3, r5
 8007d64:	1891      	adds	r1, r2, r2
 8007d66:	6439      	str	r1, [r7, #64]	; 0x40
 8007d68:	415b      	adcs	r3, r3
 8007d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007d70:	1912      	adds	r2, r2, r4
 8007d72:	eb45 0303 	adc.w	r3, r5, r3
 8007d76:	f04f 0000 	mov.w	r0, #0
 8007d7a:	f04f 0100 	mov.w	r1, #0
 8007d7e:	00d9      	lsls	r1, r3, #3
 8007d80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d84:	00d0      	lsls	r0, r2, #3
 8007d86:	4602      	mov	r2, r0
 8007d88:	460b      	mov	r3, r1
 8007d8a:	1911      	adds	r1, r2, r4
 8007d8c:	6639      	str	r1, [r7, #96]	; 0x60
 8007d8e:	416b      	adcs	r3, r5
 8007d90:	667b      	str	r3, [r7, #100]	; 0x64
 8007d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	1891      	adds	r1, r2, r2
 8007d9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007da0:	415b      	adcs	r3, r3
 8007da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007da4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007da8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007dac:	f7f8 fefc 	bl	8000ba8 <__aeabi_uldivmod>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4ba5      	ldr	r3, [pc, #660]	; (800804c <UART_SetConfig+0x38c>)
 8007db6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	011e      	lsls	r6, r3, #4
 8007dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc0:	461c      	mov	r4, r3
 8007dc2:	f04f 0500 	mov.w	r5, #0
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	462b      	mov	r3, r5
 8007dca:	1891      	adds	r1, r2, r2
 8007dcc:	6339      	str	r1, [r7, #48]	; 0x30
 8007dce:	415b      	adcs	r3, r3
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007dd6:	1912      	adds	r2, r2, r4
 8007dd8:	eb45 0303 	adc.w	r3, r5, r3
 8007ddc:	f04f 0000 	mov.w	r0, #0
 8007de0:	f04f 0100 	mov.w	r1, #0
 8007de4:	00d9      	lsls	r1, r3, #3
 8007de6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dea:	00d0      	lsls	r0, r2, #3
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	1911      	adds	r1, r2, r4
 8007df2:	65b9      	str	r1, [r7, #88]	; 0x58
 8007df4:	416b      	adcs	r3, r5
 8007df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f04f 0300 	mov.w	r3, #0
 8007e02:	1891      	adds	r1, r2, r2
 8007e04:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e06:	415b      	adcs	r3, r3
 8007e08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e12:	f7f8 fec9 	bl	8000ba8 <__aeabi_uldivmod>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4b8c      	ldr	r3, [pc, #560]	; (800804c <UART_SetConfig+0x38c>)
 8007e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e20:	095b      	lsrs	r3, r3, #5
 8007e22:	2164      	movs	r1, #100	; 0x64
 8007e24:	fb01 f303 	mul.w	r3, r1, r3
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	3332      	adds	r3, #50	; 0x32
 8007e2e:	4a87      	ldr	r2, [pc, #540]	; (800804c <UART_SetConfig+0x38c>)
 8007e30:	fba2 2303 	umull	r2, r3, r2, r3
 8007e34:	095b      	lsrs	r3, r3, #5
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e3c:	441e      	add	r6, r3
 8007e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e40:	4618      	mov	r0, r3
 8007e42:	f04f 0100 	mov.w	r1, #0
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	1894      	adds	r4, r2, r2
 8007e4c:	623c      	str	r4, [r7, #32]
 8007e4e:	415b      	adcs	r3, r3
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
 8007e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e56:	1812      	adds	r2, r2, r0
 8007e58:	eb41 0303 	adc.w	r3, r1, r3
 8007e5c:	f04f 0400 	mov.w	r4, #0
 8007e60:	f04f 0500 	mov.w	r5, #0
 8007e64:	00dd      	lsls	r5, r3, #3
 8007e66:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e6a:	00d4      	lsls	r4, r2, #3
 8007e6c:	4622      	mov	r2, r4
 8007e6e:	462b      	mov	r3, r5
 8007e70:	1814      	adds	r4, r2, r0
 8007e72:	653c      	str	r4, [r7, #80]	; 0x50
 8007e74:	414b      	adcs	r3, r1
 8007e76:	657b      	str	r3, [r7, #84]	; 0x54
 8007e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	1891      	adds	r1, r2, r2
 8007e84:	61b9      	str	r1, [r7, #24]
 8007e86:	415b      	adcs	r3, r3
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e8e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007e92:	f7f8 fe89 	bl	8000ba8 <__aeabi_uldivmod>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4b6c      	ldr	r3, [pc, #432]	; (800804c <UART_SetConfig+0x38c>)
 8007e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea0:	095b      	lsrs	r3, r3, #5
 8007ea2:	2164      	movs	r1, #100	; 0x64
 8007ea4:	fb01 f303 	mul.w	r3, r1, r3
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	3332      	adds	r3, #50	; 0x32
 8007eae:	4a67      	ldr	r2, [pc, #412]	; (800804c <UART_SetConfig+0x38c>)
 8007eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	f003 0207 	and.w	r2, r3, #7
 8007eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4432      	add	r2, r6
 8007ec0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ec2:	e0b9      	b.n	8008038 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ec4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec6:	461c      	mov	r4, r3
 8007ec8:	f04f 0500 	mov.w	r5, #0
 8007ecc:	4622      	mov	r2, r4
 8007ece:	462b      	mov	r3, r5
 8007ed0:	1891      	adds	r1, r2, r2
 8007ed2:	6139      	str	r1, [r7, #16]
 8007ed4:	415b      	adcs	r3, r3
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007edc:	1912      	adds	r2, r2, r4
 8007ede:	eb45 0303 	adc.w	r3, r5, r3
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f04f 0100 	mov.w	r1, #0
 8007eea:	00d9      	lsls	r1, r3, #3
 8007eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ef0:	00d0      	lsls	r0, r2, #3
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	eb12 0804 	adds.w	r8, r2, r4
 8007efa:	eb43 0905 	adc.w	r9, r3, r5
 8007efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f04f 0100 	mov.w	r1, #0
 8007f08:	f04f 0200 	mov.w	r2, #0
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	008b      	lsls	r3, r1, #2
 8007f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f16:	0082      	lsls	r2, r0, #2
 8007f18:	4640      	mov	r0, r8
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	f7f8 fe44 	bl	8000ba8 <__aeabi_uldivmod>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4b49      	ldr	r3, [pc, #292]	; (800804c <UART_SetConfig+0x38c>)
 8007f26:	fba3 2302 	umull	r2, r3, r3, r2
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	011e      	lsls	r6, r3, #4
 8007f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f30:	4618      	mov	r0, r3
 8007f32:	f04f 0100 	mov.w	r1, #0
 8007f36:	4602      	mov	r2, r0
 8007f38:	460b      	mov	r3, r1
 8007f3a:	1894      	adds	r4, r2, r2
 8007f3c:	60bc      	str	r4, [r7, #8]
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f46:	1812      	adds	r2, r2, r0
 8007f48:	eb41 0303 	adc.w	r3, r1, r3
 8007f4c:	f04f 0400 	mov.w	r4, #0
 8007f50:	f04f 0500 	mov.w	r5, #0
 8007f54:	00dd      	lsls	r5, r3, #3
 8007f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f5a:	00d4      	lsls	r4, r2, #3
 8007f5c:	4622      	mov	r2, r4
 8007f5e:	462b      	mov	r3, r5
 8007f60:	1814      	adds	r4, r2, r0
 8007f62:	64bc      	str	r4, [r7, #72]	; 0x48
 8007f64:	414b      	adcs	r3, r1
 8007f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f04f 0100 	mov.w	r1, #0
 8007f72:	f04f 0200 	mov.w	r2, #0
 8007f76:	f04f 0300 	mov.w	r3, #0
 8007f7a:	008b      	lsls	r3, r1, #2
 8007f7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f80:	0082      	lsls	r2, r0, #2
 8007f82:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007f86:	f7f8 fe0f 	bl	8000ba8 <__aeabi_uldivmod>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4b2f      	ldr	r3, [pc, #188]	; (800804c <UART_SetConfig+0x38c>)
 8007f90:	fba3 1302 	umull	r1, r3, r3, r2
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	2164      	movs	r1, #100	; 0x64
 8007f98:	fb01 f303 	mul.w	r3, r1, r3
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	3332      	adds	r3, #50	; 0x32
 8007fa2:	4a2a      	ldr	r2, [pc, #168]	; (800804c <UART_SetConfig+0x38c>)
 8007fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fae:	441e      	add	r6, r3
 8007fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f04f 0100 	mov.w	r1, #0
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	1894      	adds	r4, r2, r2
 8007fbe:	603c      	str	r4, [r7, #0]
 8007fc0:	415b      	adcs	r3, r3
 8007fc2:	607b      	str	r3, [r7, #4]
 8007fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc8:	1812      	adds	r2, r2, r0
 8007fca:	eb41 0303 	adc.w	r3, r1, r3
 8007fce:	f04f 0400 	mov.w	r4, #0
 8007fd2:	f04f 0500 	mov.w	r5, #0
 8007fd6:	00dd      	lsls	r5, r3, #3
 8007fd8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fdc:	00d4      	lsls	r4, r2, #3
 8007fde:	4622      	mov	r2, r4
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	eb12 0a00 	adds.w	sl, r2, r0
 8007fe6:	eb43 0b01 	adc.w	fp, r3, r1
 8007fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f04f 0100 	mov.w	r1, #0
 8007ff4:	f04f 0200 	mov.w	r2, #0
 8007ff8:	f04f 0300 	mov.w	r3, #0
 8007ffc:	008b      	lsls	r3, r1, #2
 8007ffe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008002:	0082      	lsls	r2, r0, #2
 8008004:	4650      	mov	r0, sl
 8008006:	4659      	mov	r1, fp
 8008008:	f7f8 fdce 	bl	8000ba8 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4b0e      	ldr	r3, [pc, #56]	; (800804c <UART_SetConfig+0x38c>)
 8008012:	fba3 1302 	umull	r1, r3, r3, r2
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	2164      	movs	r1, #100	; 0x64
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	3332      	adds	r3, #50	; 0x32
 8008024:	4a09      	ldr	r2, [pc, #36]	; (800804c <UART_SetConfig+0x38c>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	f003 020f 	and.w	r2, r3, #15
 8008030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4432      	add	r2, r6
 8008036:	609a      	str	r2, [r3, #8]
}
 8008038:	bf00      	nop
 800803a:	377c      	adds	r7, #124	; 0x7c
 800803c:	46bd      	mov	sp, r7
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	bf00      	nop
 8008044:	40011000 	.word	0x40011000
 8008048:	40011400 	.word	0x40011400
 800804c:	51eb851f 	.word	0x51eb851f

08008050 <__errno>:
 8008050:	4b01      	ldr	r3, [pc, #4]	; (8008058 <__errno+0x8>)
 8008052:	6818      	ldr	r0, [r3, #0]
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000010 	.word	0x20000010

0800805c <__libc_init_array>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	4d0d      	ldr	r5, [pc, #52]	; (8008094 <__libc_init_array+0x38>)
 8008060:	4c0d      	ldr	r4, [pc, #52]	; (8008098 <__libc_init_array+0x3c>)
 8008062:	1b64      	subs	r4, r4, r5
 8008064:	10a4      	asrs	r4, r4, #2
 8008066:	2600      	movs	r6, #0
 8008068:	42a6      	cmp	r6, r4
 800806a:	d109      	bne.n	8008080 <__libc_init_array+0x24>
 800806c:	4d0b      	ldr	r5, [pc, #44]	; (800809c <__libc_init_array+0x40>)
 800806e:	4c0c      	ldr	r4, [pc, #48]	; (80080a0 <__libc_init_array+0x44>)
 8008070:	f002 feb4 	bl	800addc <_init>
 8008074:	1b64      	subs	r4, r4, r5
 8008076:	10a4      	asrs	r4, r4, #2
 8008078:	2600      	movs	r6, #0
 800807a:	42a6      	cmp	r6, r4
 800807c:	d105      	bne.n	800808a <__libc_init_array+0x2e>
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	f855 3b04 	ldr.w	r3, [r5], #4
 8008084:	4798      	blx	r3
 8008086:	3601      	adds	r6, #1
 8008088:	e7ee      	b.n	8008068 <__libc_init_array+0xc>
 800808a:	f855 3b04 	ldr.w	r3, [r5], #4
 800808e:	4798      	blx	r3
 8008090:	3601      	adds	r6, #1
 8008092:	e7f2      	b.n	800807a <__libc_init_array+0x1e>
 8008094:	0800b534 	.word	0x0800b534
 8008098:	0800b534 	.word	0x0800b534
 800809c:	0800b534 	.word	0x0800b534
 80080a0:	0800b538 	.word	0x0800b538

080080a4 <memset>:
 80080a4:	4402      	add	r2, r0
 80080a6:	4603      	mov	r3, r0
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d100      	bne.n	80080ae <memset+0xa>
 80080ac:	4770      	bx	lr
 80080ae:	f803 1b01 	strb.w	r1, [r3], #1
 80080b2:	e7f9      	b.n	80080a8 <memset+0x4>

080080b4 <__cvt>:
 80080b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b8:	ec55 4b10 	vmov	r4, r5, d0
 80080bc:	2d00      	cmp	r5, #0
 80080be:	460e      	mov	r6, r1
 80080c0:	4619      	mov	r1, r3
 80080c2:	462b      	mov	r3, r5
 80080c4:	bfbb      	ittet	lt
 80080c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080ca:	461d      	movlt	r5, r3
 80080cc:	2300      	movge	r3, #0
 80080ce:	232d      	movlt	r3, #45	; 0x2d
 80080d0:	700b      	strb	r3, [r1, #0]
 80080d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080d8:	4691      	mov	r9, r2
 80080da:	f023 0820 	bic.w	r8, r3, #32
 80080de:	bfbc      	itt	lt
 80080e0:	4622      	movlt	r2, r4
 80080e2:	4614      	movlt	r4, r2
 80080e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080e8:	d005      	beq.n	80080f6 <__cvt+0x42>
 80080ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080ee:	d100      	bne.n	80080f2 <__cvt+0x3e>
 80080f0:	3601      	adds	r6, #1
 80080f2:	2102      	movs	r1, #2
 80080f4:	e000      	b.n	80080f8 <__cvt+0x44>
 80080f6:	2103      	movs	r1, #3
 80080f8:	ab03      	add	r3, sp, #12
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	ab02      	add	r3, sp, #8
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	ec45 4b10 	vmov	d0, r4, r5
 8008104:	4653      	mov	r3, sl
 8008106:	4632      	mov	r2, r6
 8008108:	f000 fcea 	bl	8008ae0 <_dtoa_r>
 800810c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008110:	4607      	mov	r7, r0
 8008112:	d102      	bne.n	800811a <__cvt+0x66>
 8008114:	f019 0f01 	tst.w	r9, #1
 8008118:	d022      	beq.n	8008160 <__cvt+0xac>
 800811a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800811e:	eb07 0906 	add.w	r9, r7, r6
 8008122:	d110      	bne.n	8008146 <__cvt+0x92>
 8008124:	783b      	ldrb	r3, [r7, #0]
 8008126:	2b30      	cmp	r3, #48	; 0x30
 8008128:	d10a      	bne.n	8008140 <__cvt+0x8c>
 800812a:	2200      	movs	r2, #0
 800812c:	2300      	movs	r3, #0
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008136:	b918      	cbnz	r0, 8008140 <__cvt+0x8c>
 8008138:	f1c6 0601 	rsb	r6, r6, #1
 800813c:	f8ca 6000 	str.w	r6, [sl]
 8008140:	f8da 3000 	ldr.w	r3, [sl]
 8008144:	4499      	add	r9, r3
 8008146:	2200      	movs	r2, #0
 8008148:	2300      	movs	r3, #0
 800814a:	4620      	mov	r0, r4
 800814c:	4629      	mov	r1, r5
 800814e:	f7f8 fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8008152:	b108      	cbz	r0, 8008158 <__cvt+0xa4>
 8008154:	f8cd 900c 	str.w	r9, [sp, #12]
 8008158:	2230      	movs	r2, #48	; 0x30
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	454b      	cmp	r3, r9
 800815e:	d307      	bcc.n	8008170 <__cvt+0xbc>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008164:	1bdb      	subs	r3, r3, r7
 8008166:	4638      	mov	r0, r7
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	b004      	add	sp, #16
 800816c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008170:	1c59      	adds	r1, r3, #1
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	e7f0      	b.n	800815a <__cvt+0xa6>

08008178 <__exponent>:
 8008178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817a:	4603      	mov	r3, r0
 800817c:	2900      	cmp	r1, #0
 800817e:	bfb8      	it	lt
 8008180:	4249      	neglt	r1, r1
 8008182:	f803 2b02 	strb.w	r2, [r3], #2
 8008186:	bfb4      	ite	lt
 8008188:	222d      	movlt	r2, #45	; 0x2d
 800818a:	222b      	movge	r2, #43	; 0x2b
 800818c:	2909      	cmp	r1, #9
 800818e:	7042      	strb	r2, [r0, #1]
 8008190:	dd2a      	ble.n	80081e8 <__exponent+0x70>
 8008192:	f10d 0407 	add.w	r4, sp, #7
 8008196:	46a4      	mov	ip, r4
 8008198:	270a      	movs	r7, #10
 800819a:	46a6      	mov	lr, r4
 800819c:	460a      	mov	r2, r1
 800819e:	fb91 f6f7 	sdiv	r6, r1, r7
 80081a2:	fb07 1516 	mls	r5, r7, r6, r1
 80081a6:	3530      	adds	r5, #48	; 0x30
 80081a8:	2a63      	cmp	r2, #99	; 0x63
 80081aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80081ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081b2:	4631      	mov	r1, r6
 80081b4:	dcf1      	bgt.n	800819a <__exponent+0x22>
 80081b6:	3130      	adds	r1, #48	; 0x30
 80081b8:	f1ae 0502 	sub.w	r5, lr, #2
 80081bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081c0:	1c44      	adds	r4, r0, #1
 80081c2:	4629      	mov	r1, r5
 80081c4:	4561      	cmp	r1, ip
 80081c6:	d30a      	bcc.n	80081de <__exponent+0x66>
 80081c8:	f10d 0209 	add.w	r2, sp, #9
 80081cc:	eba2 020e 	sub.w	r2, r2, lr
 80081d0:	4565      	cmp	r5, ip
 80081d2:	bf88      	it	hi
 80081d4:	2200      	movhi	r2, #0
 80081d6:	4413      	add	r3, r2
 80081d8:	1a18      	subs	r0, r3, r0
 80081da:	b003      	add	sp, #12
 80081dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80081e6:	e7ed      	b.n	80081c4 <__exponent+0x4c>
 80081e8:	2330      	movs	r3, #48	; 0x30
 80081ea:	3130      	adds	r1, #48	; 0x30
 80081ec:	7083      	strb	r3, [r0, #2]
 80081ee:	70c1      	strb	r1, [r0, #3]
 80081f0:	1d03      	adds	r3, r0, #4
 80081f2:	e7f1      	b.n	80081d8 <__exponent+0x60>

080081f4 <_printf_float>:
 80081f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f8:	ed2d 8b02 	vpush	{d8}
 80081fc:	b08d      	sub	sp, #52	; 0x34
 80081fe:	460c      	mov	r4, r1
 8008200:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008204:	4616      	mov	r6, r2
 8008206:	461f      	mov	r7, r3
 8008208:	4605      	mov	r5, r0
 800820a:	f001 fa55 	bl	80096b8 <_localeconv_r>
 800820e:	f8d0 a000 	ldr.w	sl, [r0]
 8008212:	4650      	mov	r0, sl
 8008214:	f7f7 ffdc 	bl	80001d0 <strlen>
 8008218:	2300      	movs	r3, #0
 800821a:	930a      	str	r3, [sp, #40]	; 0x28
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	9305      	str	r3, [sp, #20]
 8008220:	f8d8 3000 	ldr.w	r3, [r8]
 8008224:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008228:	3307      	adds	r3, #7
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	f103 0208 	add.w	r2, r3, #8
 8008232:	f8c8 2000 	str.w	r2, [r8]
 8008236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800823e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008242:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	f8cd 8018 	str.w	r8, [sp, #24]
 800824c:	ee08 0a10 	vmov	s16, r0
 8008250:	4b9f      	ldr	r3, [pc, #636]	; (80084d0 <_printf_float+0x2dc>)
 8008252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008256:	f04f 32ff 	mov.w	r2, #4294967295
 800825a:	f7f8 fc67 	bl	8000b2c <__aeabi_dcmpun>
 800825e:	bb88      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008264:	4b9a      	ldr	r3, [pc, #616]	; (80084d0 <_printf_float+0x2dc>)
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	f7f8 fc41 	bl	8000af0 <__aeabi_dcmple>
 800826e:	bb48      	cbnz	r0, 80082c4 <_printf_float+0xd0>
 8008270:	2200      	movs	r2, #0
 8008272:	2300      	movs	r3, #0
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc30 	bl	8000adc <__aeabi_dcmplt>
 800827c:	b110      	cbz	r0, 8008284 <_printf_float+0x90>
 800827e:	232d      	movs	r3, #45	; 0x2d
 8008280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008284:	4b93      	ldr	r3, [pc, #588]	; (80084d4 <_printf_float+0x2e0>)
 8008286:	4894      	ldr	r0, [pc, #592]	; (80084d8 <_printf_float+0x2e4>)
 8008288:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800828c:	bf94      	ite	ls
 800828e:	4698      	movls	r8, r3
 8008290:	4680      	movhi	r8, r0
 8008292:	2303      	movs	r3, #3
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	f023 0204 	bic.w	r2, r3, #4
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	f04f 0900 	mov.w	r9, #0
 80082a2:	9700      	str	r7, [sp, #0]
 80082a4:	4633      	mov	r3, r6
 80082a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80082a8:	4621      	mov	r1, r4
 80082aa:	4628      	mov	r0, r5
 80082ac:	f000 f9d8 	bl	8008660 <_printf_common>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f040 8090 	bne.w	80083d6 <_printf_float+0x1e2>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b00d      	add	sp, #52	; 0x34
 80082bc:	ecbd 8b02 	vpop	{d8}
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4642      	mov	r2, r8
 80082c6:	464b      	mov	r3, r9
 80082c8:	4640      	mov	r0, r8
 80082ca:	4649      	mov	r1, r9
 80082cc:	f7f8 fc2e 	bl	8000b2c <__aeabi_dcmpun>
 80082d0:	b140      	cbz	r0, 80082e4 <_printf_float+0xf0>
 80082d2:	464b      	mov	r3, r9
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfbc      	itt	lt
 80082d8:	232d      	movlt	r3, #45	; 0x2d
 80082da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082de:	487f      	ldr	r0, [pc, #508]	; (80084dc <_printf_float+0x2e8>)
 80082e0:	4b7f      	ldr	r3, [pc, #508]	; (80084e0 <_printf_float+0x2ec>)
 80082e2:	e7d1      	b.n	8008288 <_printf_float+0x94>
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082ea:	9206      	str	r2, [sp, #24]
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	d13f      	bne.n	8008370 <_printf_float+0x17c>
 80082f0:	2306      	movs	r3, #6
 80082f2:	6063      	str	r3, [r4, #4]
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	6861      	ldr	r1, [r4, #4]
 80082f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082fc:	2300      	movs	r3, #0
 80082fe:	9303      	str	r3, [sp, #12]
 8008300:	ab0a      	add	r3, sp, #40	; 0x28
 8008302:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008306:	ab09      	add	r3, sp, #36	; 0x24
 8008308:	ec49 8b10 	vmov	d0, r8, r9
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	6022      	str	r2, [r4, #0]
 8008310:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008314:	4628      	mov	r0, r5
 8008316:	f7ff fecd 	bl	80080b4 <__cvt>
 800831a:	9b06      	ldr	r3, [sp, #24]
 800831c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831e:	2b47      	cmp	r3, #71	; 0x47
 8008320:	4680      	mov	r8, r0
 8008322:	d108      	bne.n	8008336 <_printf_float+0x142>
 8008324:	1cc8      	adds	r0, r1, #3
 8008326:	db02      	blt.n	800832e <_printf_float+0x13a>
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	4299      	cmp	r1, r3
 800832c:	dd41      	ble.n	80083b2 <_printf_float+0x1be>
 800832e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008332:	fa5f fb8b 	uxtb.w	fp, fp
 8008336:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800833a:	d820      	bhi.n	800837e <_printf_float+0x18a>
 800833c:	3901      	subs	r1, #1
 800833e:	465a      	mov	r2, fp
 8008340:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008344:	9109      	str	r1, [sp, #36]	; 0x24
 8008346:	f7ff ff17 	bl	8008178 <__exponent>
 800834a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834c:	1813      	adds	r3, r2, r0
 800834e:	2a01      	cmp	r2, #1
 8008350:	4681      	mov	r9, r0
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	dc02      	bgt.n	800835c <_printf_float+0x168>
 8008356:	6822      	ldr	r2, [r4, #0]
 8008358:	07d2      	lsls	r2, r2, #31
 800835a:	d501      	bpl.n	8008360 <_printf_float+0x16c>
 800835c:	3301      	adds	r3, #1
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008364:	2b00      	cmp	r3, #0
 8008366:	d09c      	beq.n	80082a2 <_printf_float+0xae>
 8008368:	232d      	movs	r3, #45	; 0x2d
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e798      	b.n	80082a2 <_printf_float+0xae>
 8008370:	9a06      	ldr	r2, [sp, #24]
 8008372:	2a47      	cmp	r2, #71	; 0x47
 8008374:	d1be      	bne.n	80082f4 <_printf_float+0x100>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1bc      	bne.n	80082f4 <_printf_float+0x100>
 800837a:	2301      	movs	r3, #1
 800837c:	e7b9      	b.n	80082f2 <_printf_float+0xfe>
 800837e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008382:	d118      	bne.n	80083b6 <_printf_float+0x1c2>
 8008384:	2900      	cmp	r1, #0
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	dd0b      	ble.n	80083a2 <_printf_float+0x1ae>
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	b913      	cbnz	r3, 8008394 <_printf_float+0x1a0>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d502      	bpl.n	800839a <_printf_float+0x1a6>
 8008394:	3301      	adds	r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	65a1      	str	r1, [r4, #88]	; 0x58
 800839c:	f04f 0900 	mov.w	r9, #0
 80083a0:	e7de      	b.n	8008360 <_printf_float+0x16c>
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x1b6>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d501      	bpl.n	80083ae <_printf_float+0x1ba>
 80083aa:	3302      	adds	r3, #2
 80083ac:	e7f4      	b.n	8008398 <_printf_float+0x1a4>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7f2      	b.n	8008398 <_printf_float+0x1a4>
 80083b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b8:	4299      	cmp	r1, r3
 80083ba:	db05      	blt.n	80083c8 <_printf_float+0x1d4>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	07d8      	lsls	r0, r3, #31
 80083c2:	d5ea      	bpl.n	800839a <_printf_float+0x1a6>
 80083c4:	1c4b      	adds	r3, r1, #1
 80083c6:	e7e7      	b.n	8008398 <_printf_float+0x1a4>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	bfd4      	ite	le
 80083cc:	f1c1 0202 	rsble	r2, r1, #2
 80083d0:	2201      	movgt	r2, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	e7e0      	b.n	8008398 <_printf_float+0x1a4>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	055a      	lsls	r2, r3, #21
 80083da:	d407      	bmi.n	80083ec <_printf_float+0x1f8>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d12c      	bne.n	8008444 <_printf_float+0x250>
 80083ea:	e764      	b.n	80082b6 <_printf_float+0xc2>
 80083ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f0:	f240 80e0 	bls.w	80085b4 <_printf_float+0x3c0>
 80083f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d034      	beq.n	800846e <_printf_float+0x27a>
 8008404:	4a37      	ldr	r2, [pc, #220]	; (80084e4 <_printf_float+0x2f0>)
 8008406:	2301      	movs	r3, #1
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af51 	beq.w	80082b6 <_printf_float+0xc2>
 8008414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008418:	429a      	cmp	r2, r3
 800841a:	db02      	blt.n	8008422 <_printf_float+0x22e>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d8      	lsls	r0, r3, #31
 8008420:	d510      	bpl.n	8008444 <_printf_float+0x250>
 8008422:	ee18 3a10 	vmov	r3, s16
 8008426:	4652      	mov	r2, sl
 8008428:	4631      	mov	r1, r6
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	f43f af41 	beq.w	80082b6 <_printf_float+0xc2>
 8008434:	f04f 0800 	mov.w	r8, #0
 8008438:	f104 091a 	add.w	r9, r4, #26
 800843c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843e:	3b01      	subs	r3, #1
 8008440:	4543      	cmp	r3, r8
 8008442:	dc09      	bgt.n	8008458 <_printf_float+0x264>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	079b      	lsls	r3, r3, #30
 8008448:	f100 8105 	bmi.w	8008656 <_printf_float+0x462>
 800844c:	68e0      	ldr	r0, [r4, #12]
 800844e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008450:	4298      	cmp	r0, r3
 8008452:	bfb8      	it	lt
 8008454:	4618      	movlt	r0, r3
 8008456:	e730      	b.n	80082ba <_printf_float+0xc6>
 8008458:	2301      	movs	r3, #1
 800845a:	464a      	mov	r2, r9
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f af27 	beq.w	80082b6 <_printf_float+0xc2>
 8008468:	f108 0801 	add.w	r8, r8, #1
 800846c:	e7e6      	b.n	800843c <_printf_float+0x248>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2b00      	cmp	r3, #0
 8008472:	dc39      	bgt.n	80084e8 <_printf_float+0x2f4>
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <_printf_float+0x2f0>)
 8008476:	2301      	movs	r3, #1
 8008478:	4631      	mov	r1, r6
 800847a:	4628      	mov	r0, r5
 800847c:	47b8      	blx	r7
 800847e:	3001      	adds	r0, #1
 8008480:	f43f af19 	beq.w	80082b6 <_printf_float+0xc2>
 8008484:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008488:	4313      	orrs	r3, r2
 800848a:	d102      	bne.n	8008492 <_printf_float+0x29e>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d5d8      	bpl.n	8008444 <_printf_float+0x250>
 8008492:	ee18 3a10 	vmov	r3, s16
 8008496:	4652      	mov	r2, sl
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	f43f af09 	beq.w	80082b6 <_printf_float+0xc2>
 80084a4:	f04f 0900 	mov.w	r9, #0
 80084a8:	f104 0a1a 	add.w	sl, r4, #26
 80084ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ae:	425b      	negs	r3, r3
 80084b0:	454b      	cmp	r3, r9
 80084b2:	dc01      	bgt.n	80084b8 <_printf_float+0x2c4>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	e792      	b.n	80083de <_printf_float+0x1ea>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4631      	mov	r1, r6
 80084be:	4628      	mov	r0, r5
 80084c0:	47b8      	blx	r7
 80084c2:	3001      	adds	r0, #1
 80084c4:	f43f aef7 	beq.w	80082b6 <_printf_float+0xc2>
 80084c8:	f109 0901 	add.w	r9, r9, #1
 80084cc:	e7ee      	b.n	80084ac <_printf_float+0x2b8>
 80084ce:	bf00      	nop
 80084d0:	7fefffff 	.word	0x7fefffff
 80084d4:	0800b150 	.word	0x0800b150
 80084d8:	0800b154 	.word	0x0800b154
 80084dc:	0800b15c 	.word	0x0800b15c
 80084e0:	0800b158 	.word	0x0800b158
 80084e4:	0800b160 	.word	0x0800b160
 80084e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084ec:	429a      	cmp	r2, r3
 80084ee:	bfa8      	it	ge
 80084f0:	461a      	movge	r2, r3
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	4691      	mov	r9, r2
 80084f6:	dc37      	bgt.n	8008568 <_printf_float+0x374>
 80084f8:	f04f 0b00 	mov.w	fp, #0
 80084fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008500:	f104 021a 	add.w	r2, r4, #26
 8008504:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008506:	9305      	str	r3, [sp, #20]
 8008508:	eba3 0309 	sub.w	r3, r3, r9
 800850c:	455b      	cmp	r3, fp
 800850e:	dc33      	bgt.n	8008578 <_printf_float+0x384>
 8008510:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008514:	429a      	cmp	r2, r3
 8008516:	db3b      	blt.n	8008590 <_printf_float+0x39c>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	07da      	lsls	r2, r3, #31
 800851c:	d438      	bmi.n	8008590 <_printf_float+0x39c>
 800851e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008520:	9b05      	ldr	r3, [sp, #20]
 8008522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	eba2 0901 	sub.w	r9, r2, r1
 800852a:	4599      	cmp	r9, r3
 800852c:	bfa8      	it	ge
 800852e:	4699      	movge	r9, r3
 8008530:	f1b9 0f00 	cmp.w	r9, #0
 8008534:	dc35      	bgt.n	80085a2 <_printf_float+0x3ae>
 8008536:	f04f 0800 	mov.w	r8, #0
 800853a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853e:	f104 0a1a 	add.w	sl, r4, #26
 8008542:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	eba3 0309 	sub.w	r3, r3, r9
 800854c:	4543      	cmp	r3, r8
 800854e:	f77f af79 	ble.w	8008444 <_printf_float+0x250>
 8008552:	2301      	movs	r3, #1
 8008554:	4652      	mov	r2, sl
 8008556:	4631      	mov	r1, r6
 8008558:	4628      	mov	r0, r5
 800855a:	47b8      	blx	r7
 800855c:	3001      	adds	r0, #1
 800855e:	f43f aeaa 	beq.w	80082b6 <_printf_float+0xc2>
 8008562:	f108 0801 	add.w	r8, r8, #1
 8008566:	e7ec      	b.n	8008542 <_printf_float+0x34e>
 8008568:	4613      	mov	r3, r2
 800856a:	4631      	mov	r1, r6
 800856c:	4642      	mov	r2, r8
 800856e:	4628      	mov	r0, r5
 8008570:	47b8      	blx	r7
 8008572:	3001      	adds	r0, #1
 8008574:	d1c0      	bne.n	80084f8 <_printf_float+0x304>
 8008576:	e69e      	b.n	80082b6 <_printf_float+0xc2>
 8008578:	2301      	movs	r3, #1
 800857a:	4631      	mov	r1, r6
 800857c:	4628      	mov	r0, r5
 800857e:	9205      	str	r2, [sp, #20]
 8008580:	47b8      	blx	r7
 8008582:	3001      	adds	r0, #1
 8008584:	f43f ae97 	beq.w	80082b6 <_printf_float+0xc2>
 8008588:	9a05      	ldr	r2, [sp, #20]
 800858a:	f10b 0b01 	add.w	fp, fp, #1
 800858e:	e7b9      	b.n	8008504 <_printf_float+0x310>
 8008590:	ee18 3a10 	vmov	r3, s16
 8008594:	4652      	mov	r2, sl
 8008596:	4631      	mov	r1, r6
 8008598:	4628      	mov	r0, r5
 800859a:	47b8      	blx	r7
 800859c:	3001      	adds	r0, #1
 800859e:	d1be      	bne.n	800851e <_printf_float+0x32a>
 80085a0:	e689      	b.n	80082b6 <_printf_float+0xc2>
 80085a2:	9a05      	ldr	r2, [sp, #20]
 80085a4:	464b      	mov	r3, r9
 80085a6:	4442      	add	r2, r8
 80085a8:	4631      	mov	r1, r6
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b8      	blx	r7
 80085ae:	3001      	adds	r0, #1
 80085b0:	d1c1      	bne.n	8008536 <_printf_float+0x342>
 80085b2:	e680      	b.n	80082b6 <_printf_float+0xc2>
 80085b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085b6:	2a01      	cmp	r2, #1
 80085b8:	dc01      	bgt.n	80085be <_printf_float+0x3ca>
 80085ba:	07db      	lsls	r3, r3, #31
 80085bc:	d538      	bpl.n	8008630 <_printf_float+0x43c>
 80085be:	2301      	movs	r3, #1
 80085c0:	4642      	mov	r2, r8
 80085c2:	4631      	mov	r1, r6
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b8      	blx	r7
 80085c8:	3001      	adds	r0, #1
 80085ca:	f43f ae74 	beq.w	80082b6 <_printf_float+0xc2>
 80085ce:	ee18 3a10 	vmov	r3, s16
 80085d2:	4652      	mov	r2, sl
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f ae6b 	beq.w	80082b6 <_printf_float+0xc2>
 80085e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e4:	2200      	movs	r2, #0
 80085e6:	2300      	movs	r3, #0
 80085e8:	f7f8 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ec:	b9d8      	cbnz	r0, 8008626 <_printf_float+0x432>
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	f108 0201 	add.w	r2, r8, #1
 80085f4:	3b01      	subs	r3, #1
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	d10e      	bne.n	800861e <_printf_float+0x42a>
 8008600:	e659      	b.n	80082b6 <_printf_float+0xc2>
 8008602:	2301      	movs	r3, #1
 8008604:	4652      	mov	r2, sl
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f ae52 	beq.w	80082b6 <_printf_float+0xc2>
 8008612:	f108 0801 	add.w	r8, r8, #1
 8008616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008618:	3b01      	subs	r3, #1
 800861a:	4543      	cmp	r3, r8
 800861c:	dcf1      	bgt.n	8008602 <_printf_float+0x40e>
 800861e:	464b      	mov	r3, r9
 8008620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008624:	e6dc      	b.n	80083e0 <_printf_float+0x1ec>
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	f104 0a1a 	add.w	sl, r4, #26
 800862e:	e7f2      	b.n	8008616 <_printf_float+0x422>
 8008630:	2301      	movs	r3, #1
 8008632:	4642      	mov	r2, r8
 8008634:	e7df      	b.n	80085f6 <_printf_float+0x402>
 8008636:	2301      	movs	r3, #1
 8008638:	464a      	mov	r2, r9
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae38 	beq.w	80082b6 <_printf_float+0xc2>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800864e:	1a5b      	subs	r3, r3, r1
 8008650:	4543      	cmp	r3, r8
 8008652:	dcf0      	bgt.n	8008636 <_printf_float+0x442>
 8008654:	e6fa      	b.n	800844c <_printf_float+0x258>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 0919 	add.w	r9, r4, #25
 800865e:	e7f4      	b.n	800864a <_printf_float+0x456>

08008660 <_printf_common>:
 8008660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008664:	4616      	mov	r6, r2
 8008666:	4699      	mov	r9, r3
 8008668:	688a      	ldr	r2, [r1, #8]
 800866a:	690b      	ldr	r3, [r1, #16]
 800866c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008670:	4293      	cmp	r3, r2
 8008672:	bfb8      	it	lt
 8008674:	4613      	movlt	r3, r2
 8008676:	6033      	str	r3, [r6, #0]
 8008678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800867c:	4607      	mov	r7, r0
 800867e:	460c      	mov	r4, r1
 8008680:	b10a      	cbz	r2, 8008686 <_printf_common+0x26>
 8008682:	3301      	adds	r3, #1
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	6823      	ldr	r3, [r4, #0]
 8008688:	0699      	lsls	r1, r3, #26
 800868a:	bf42      	ittt	mi
 800868c:	6833      	ldrmi	r3, [r6, #0]
 800868e:	3302      	addmi	r3, #2
 8008690:	6033      	strmi	r3, [r6, #0]
 8008692:	6825      	ldr	r5, [r4, #0]
 8008694:	f015 0506 	ands.w	r5, r5, #6
 8008698:	d106      	bne.n	80086a8 <_printf_common+0x48>
 800869a:	f104 0a19 	add.w	sl, r4, #25
 800869e:	68e3      	ldr	r3, [r4, #12]
 80086a0:	6832      	ldr	r2, [r6, #0]
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	42ab      	cmp	r3, r5
 80086a6:	dc26      	bgt.n	80086f6 <_printf_common+0x96>
 80086a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086ac:	1e13      	subs	r3, r2, #0
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	bf18      	it	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	0692      	lsls	r2, r2, #26
 80086b6:	d42b      	bmi.n	8008710 <_printf_common+0xb0>
 80086b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086bc:	4649      	mov	r1, r9
 80086be:	4638      	mov	r0, r7
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d01e      	beq.n	8008704 <_printf_common+0xa4>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	68e5      	ldr	r5, [r4, #12]
 80086ca:	6832      	ldr	r2, [r6, #0]
 80086cc:	f003 0306 	and.w	r3, r3, #6
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	bf08      	it	eq
 80086d4:	1aad      	subeq	r5, r5, r2
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	6922      	ldr	r2, [r4, #16]
 80086da:	bf0c      	ite	eq
 80086dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e0:	2500      	movne	r5, #0
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bfc4      	itt	gt
 80086e6:	1a9b      	subgt	r3, r3, r2
 80086e8:	18ed      	addgt	r5, r5, r3
 80086ea:	2600      	movs	r6, #0
 80086ec:	341a      	adds	r4, #26
 80086ee:	42b5      	cmp	r5, r6
 80086f0:	d11a      	bne.n	8008728 <_printf_common+0xc8>
 80086f2:	2000      	movs	r0, #0
 80086f4:	e008      	b.n	8008708 <_printf_common+0xa8>
 80086f6:	2301      	movs	r3, #1
 80086f8:	4652      	mov	r2, sl
 80086fa:	4649      	mov	r1, r9
 80086fc:	4638      	mov	r0, r7
 80086fe:	47c0      	blx	r8
 8008700:	3001      	adds	r0, #1
 8008702:	d103      	bne.n	800870c <_printf_common+0xac>
 8008704:	f04f 30ff 	mov.w	r0, #4294967295
 8008708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870c:	3501      	adds	r5, #1
 800870e:	e7c6      	b.n	800869e <_printf_common+0x3e>
 8008710:	18e1      	adds	r1, r4, r3
 8008712:	1c5a      	adds	r2, r3, #1
 8008714:	2030      	movs	r0, #48	; 0x30
 8008716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800871a:	4422      	add	r2, r4
 800871c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008724:	3302      	adds	r3, #2
 8008726:	e7c7      	b.n	80086b8 <_printf_common+0x58>
 8008728:	2301      	movs	r3, #1
 800872a:	4622      	mov	r2, r4
 800872c:	4649      	mov	r1, r9
 800872e:	4638      	mov	r0, r7
 8008730:	47c0      	blx	r8
 8008732:	3001      	adds	r0, #1
 8008734:	d0e6      	beq.n	8008704 <_printf_common+0xa4>
 8008736:	3601      	adds	r6, #1
 8008738:	e7d9      	b.n	80086ee <_printf_common+0x8e>
	...

0800873c <_printf_i>:
 800873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	460c      	mov	r4, r1
 8008742:	4691      	mov	r9, r2
 8008744:	7e27      	ldrb	r7, [r4, #24]
 8008746:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008748:	2f78      	cmp	r7, #120	; 0x78
 800874a:	4680      	mov	r8, r0
 800874c:	469a      	mov	sl, r3
 800874e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008752:	d807      	bhi.n	8008764 <_printf_i+0x28>
 8008754:	2f62      	cmp	r7, #98	; 0x62
 8008756:	d80a      	bhi.n	800876e <_printf_i+0x32>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f000 80d8 	beq.w	800890e <_printf_i+0x1d2>
 800875e:	2f58      	cmp	r7, #88	; 0x58
 8008760:	f000 80a3 	beq.w	80088aa <_printf_i+0x16e>
 8008764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800876c:	e03a      	b.n	80087e4 <_printf_i+0xa8>
 800876e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008772:	2b15      	cmp	r3, #21
 8008774:	d8f6      	bhi.n	8008764 <_printf_i+0x28>
 8008776:	a001      	add	r0, pc, #4	; (adr r0, 800877c <_printf_i+0x40>)
 8008778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087e9 	.word	0x080087e9
 8008784:	08008765 	.word	0x08008765
 8008788:	08008765 	.word	0x08008765
 800878c:	08008765 	.word	0x08008765
 8008790:	08008765 	.word	0x08008765
 8008794:	080087e9 	.word	0x080087e9
 8008798:	08008765 	.word	0x08008765
 800879c:	08008765 	.word	0x08008765
 80087a0:	08008765 	.word	0x08008765
 80087a4:	08008765 	.word	0x08008765
 80087a8:	080088f5 	.word	0x080088f5
 80087ac:	08008819 	.word	0x08008819
 80087b0:	080088d7 	.word	0x080088d7
 80087b4:	08008765 	.word	0x08008765
 80087b8:	08008765 	.word	0x08008765
 80087bc:	08008917 	.word	0x08008917
 80087c0:	08008765 	.word	0x08008765
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008765 	.word	0x08008765
 80087cc:	08008765 	.word	0x08008765
 80087d0:	080088df 	.word	0x080088df
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	600a      	str	r2, [r1, #0]
 80087dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80087e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087e4:	2301      	movs	r3, #1
 80087e6:	e0a3      	b.n	8008930 <_printf_i+0x1f4>
 80087e8:	6825      	ldr	r5, [r4, #0]
 80087ea:	6808      	ldr	r0, [r1, #0]
 80087ec:	062e      	lsls	r6, r5, #24
 80087ee:	f100 0304 	add.w	r3, r0, #4
 80087f2:	d50a      	bpl.n	800880a <_printf_i+0xce>
 80087f4:	6805      	ldr	r5, [r0, #0]
 80087f6:	600b      	str	r3, [r1, #0]
 80087f8:	2d00      	cmp	r5, #0
 80087fa:	da03      	bge.n	8008804 <_printf_i+0xc8>
 80087fc:	232d      	movs	r3, #45	; 0x2d
 80087fe:	426d      	negs	r5, r5
 8008800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008804:	485e      	ldr	r0, [pc, #376]	; (8008980 <_printf_i+0x244>)
 8008806:	230a      	movs	r3, #10
 8008808:	e019      	b.n	800883e <_printf_i+0x102>
 800880a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800880e:	6805      	ldr	r5, [r0, #0]
 8008810:	600b      	str	r3, [r1, #0]
 8008812:	bf18      	it	ne
 8008814:	b22d      	sxthne	r5, r5
 8008816:	e7ef      	b.n	80087f8 <_printf_i+0xbc>
 8008818:	680b      	ldr	r3, [r1, #0]
 800881a:	6825      	ldr	r5, [r4, #0]
 800881c:	1d18      	adds	r0, r3, #4
 800881e:	6008      	str	r0, [r1, #0]
 8008820:	0628      	lsls	r0, r5, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xec>
 8008824:	681d      	ldr	r5, [r3, #0]
 8008826:	e002      	b.n	800882e <_printf_i+0xf2>
 8008828:	0669      	lsls	r1, r5, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xe8>
 800882c:	881d      	ldrh	r5, [r3, #0]
 800882e:	4854      	ldr	r0, [pc, #336]	; (8008980 <_printf_i+0x244>)
 8008830:	2f6f      	cmp	r7, #111	; 0x6f
 8008832:	bf0c      	ite	eq
 8008834:	2308      	moveq	r3, #8
 8008836:	230a      	movne	r3, #10
 8008838:	2100      	movs	r1, #0
 800883a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800883e:	6866      	ldr	r6, [r4, #4]
 8008840:	60a6      	str	r6, [r4, #8]
 8008842:	2e00      	cmp	r6, #0
 8008844:	bfa2      	ittt	ge
 8008846:	6821      	ldrge	r1, [r4, #0]
 8008848:	f021 0104 	bicge.w	r1, r1, #4
 800884c:	6021      	strge	r1, [r4, #0]
 800884e:	b90d      	cbnz	r5, 8008854 <_printf_i+0x118>
 8008850:	2e00      	cmp	r6, #0
 8008852:	d04d      	beq.n	80088f0 <_printf_i+0x1b4>
 8008854:	4616      	mov	r6, r2
 8008856:	fbb5 f1f3 	udiv	r1, r5, r3
 800885a:	fb03 5711 	mls	r7, r3, r1, r5
 800885e:	5dc7      	ldrb	r7, [r0, r7]
 8008860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008864:	462f      	mov	r7, r5
 8008866:	42bb      	cmp	r3, r7
 8008868:	460d      	mov	r5, r1
 800886a:	d9f4      	bls.n	8008856 <_printf_i+0x11a>
 800886c:	2b08      	cmp	r3, #8
 800886e:	d10b      	bne.n	8008888 <_printf_i+0x14c>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07df      	lsls	r7, r3, #31
 8008874:	d508      	bpl.n	8008888 <_printf_i+0x14c>
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6861      	ldr	r1, [r4, #4]
 800887a:	4299      	cmp	r1, r3
 800887c:	bfde      	ittt	le
 800887e:	2330      	movle	r3, #48	; 0x30
 8008880:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008884:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008888:	1b92      	subs	r2, r2, r6
 800888a:	6122      	str	r2, [r4, #16]
 800888c:	f8cd a000 	str.w	sl, [sp]
 8008890:	464b      	mov	r3, r9
 8008892:	aa03      	add	r2, sp, #12
 8008894:	4621      	mov	r1, r4
 8008896:	4640      	mov	r0, r8
 8008898:	f7ff fee2 	bl	8008660 <_printf_common>
 800889c:	3001      	adds	r0, #1
 800889e:	d14c      	bne.n	800893a <_printf_i+0x1fe>
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	b004      	add	sp, #16
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	4835      	ldr	r0, [pc, #212]	; (8008980 <_printf_i+0x244>)
 80088ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	680e      	ldr	r6, [r1, #0]
 80088b4:	061f      	lsls	r7, r3, #24
 80088b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80088ba:	600e      	str	r6, [r1, #0]
 80088bc:	d514      	bpl.n	80088e8 <_printf_i+0x1ac>
 80088be:	07d9      	lsls	r1, r3, #31
 80088c0:	bf44      	itt	mi
 80088c2:	f043 0320 	orrmi.w	r3, r3, #32
 80088c6:	6023      	strmi	r3, [r4, #0]
 80088c8:	b91d      	cbnz	r5, 80088d2 <_printf_i+0x196>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	f023 0320 	bic.w	r3, r3, #32
 80088d0:	6023      	str	r3, [r4, #0]
 80088d2:	2310      	movs	r3, #16
 80088d4:	e7b0      	b.n	8008838 <_printf_i+0xfc>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f043 0320 	orr.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	2378      	movs	r3, #120	; 0x78
 80088e0:	4828      	ldr	r0, [pc, #160]	; (8008984 <_printf_i+0x248>)
 80088e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088e6:	e7e3      	b.n	80088b0 <_printf_i+0x174>
 80088e8:	065e      	lsls	r6, r3, #25
 80088ea:	bf48      	it	mi
 80088ec:	b2ad      	uxthmi	r5, r5
 80088ee:	e7e6      	b.n	80088be <_printf_i+0x182>
 80088f0:	4616      	mov	r6, r2
 80088f2:	e7bb      	b.n	800886c <_printf_i+0x130>
 80088f4:	680b      	ldr	r3, [r1, #0]
 80088f6:	6826      	ldr	r6, [r4, #0]
 80088f8:	6960      	ldr	r0, [r4, #20]
 80088fa:	1d1d      	adds	r5, r3, #4
 80088fc:	600d      	str	r5, [r1, #0]
 80088fe:	0635      	lsls	r5, r6, #24
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	d501      	bpl.n	8008908 <_printf_i+0x1cc>
 8008904:	6018      	str	r0, [r3, #0]
 8008906:	e002      	b.n	800890e <_printf_i+0x1d2>
 8008908:	0671      	lsls	r1, r6, #25
 800890a:	d5fb      	bpl.n	8008904 <_printf_i+0x1c8>
 800890c:	8018      	strh	r0, [r3, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	4616      	mov	r6, r2
 8008914:	e7ba      	b.n	800888c <_printf_i+0x150>
 8008916:	680b      	ldr	r3, [r1, #0]
 8008918:	1d1a      	adds	r2, r3, #4
 800891a:	600a      	str	r2, [r1, #0]
 800891c:	681e      	ldr	r6, [r3, #0]
 800891e:	6862      	ldr	r2, [r4, #4]
 8008920:	2100      	movs	r1, #0
 8008922:	4630      	mov	r0, r6
 8008924:	f7f7 fc5c 	bl	80001e0 <memchr>
 8008928:	b108      	cbz	r0, 800892e <_printf_i+0x1f2>
 800892a:	1b80      	subs	r0, r0, r6
 800892c:	6060      	str	r0, [r4, #4]
 800892e:	6863      	ldr	r3, [r4, #4]
 8008930:	6123      	str	r3, [r4, #16]
 8008932:	2300      	movs	r3, #0
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008938:	e7a8      	b.n	800888c <_printf_i+0x150>
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	4632      	mov	r2, r6
 800893e:	4649      	mov	r1, r9
 8008940:	4640      	mov	r0, r8
 8008942:	47d0      	blx	sl
 8008944:	3001      	adds	r0, #1
 8008946:	d0ab      	beq.n	80088a0 <_printf_i+0x164>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	079b      	lsls	r3, r3, #30
 800894c:	d413      	bmi.n	8008976 <_printf_i+0x23a>
 800894e:	68e0      	ldr	r0, [r4, #12]
 8008950:	9b03      	ldr	r3, [sp, #12]
 8008952:	4298      	cmp	r0, r3
 8008954:	bfb8      	it	lt
 8008956:	4618      	movlt	r0, r3
 8008958:	e7a4      	b.n	80088a4 <_printf_i+0x168>
 800895a:	2301      	movs	r3, #1
 800895c:	4632      	mov	r2, r6
 800895e:	4649      	mov	r1, r9
 8008960:	4640      	mov	r0, r8
 8008962:	47d0      	blx	sl
 8008964:	3001      	adds	r0, #1
 8008966:	d09b      	beq.n	80088a0 <_printf_i+0x164>
 8008968:	3501      	adds	r5, #1
 800896a:	68e3      	ldr	r3, [r4, #12]
 800896c:	9903      	ldr	r1, [sp, #12]
 800896e:	1a5b      	subs	r3, r3, r1
 8008970:	42ab      	cmp	r3, r5
 8008972:	dcf2      	bgt.n	800895a <_printf_i+0x21e>
 8008974:	e7eb      	b.n	800894e <_printf_i+0x212>
 8008976:	2500      	movs	r5, #0
 8008978:	f104 0619 	add.w	r6, r4, #25
 800897c:	e7f5      	b.n	800896a <_printf_i+0x22e>
 800897e:	bf00      	nop
 8008980:	0800b162 	.word	0x0800b162
 8008984:	0800b173 	.word	0x0800b173

08008988 <siprintf>:
 8008988:	b40e      	push	{r1, r2, r3}
 800898a:	b500      	push	{lr}
 800898c:	b09c      	sub	sp, #112	; 0x70
 800898e:	ab1d      	add	r3, sp, #116	; 0x74
 8008990:	9002      	str	r0, [sp, #8]
 8008992:	9006      	str	r0, [sp, #24]
 8008994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008998:	4809      	ldr	r0, [pc, #36]	; (80089c0 <siprintf+0x38>)
 800899a:	9107      	str	r1, [sp, #28]
 800899c:	9104      	str	r1, [sp, #16]
 800899e:	4909      	ldr	r1, [pc, #36]	; (80089c4 <siprintf+0x3c>)
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	a902      	add	r1, sp, #8
 80089ac:	f001 fb32 	bl	800a014 <_svfiprintf_r>
 80089b0:	9b02      	ldr	r3, [sp, #8]
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	b01c      	add	sp, #112	; 0x70
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	20000010 	.word	0x20000010
 80089c4:	ffff0208 	.word	0xffff0208

080089c8 <quorem>:
 80089c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	6903      	ldr	r3, [r0, #16]
 80089ce:	690c      	ldr	r4, [r1, #16]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	4607      	mov	r7, r0
 80089d4:	f2c0 8081 	blt.w	8008ada <quorem+0x112>
 80089d8:	3c01      	subs	r4, #1
 80089da:	f101 0814 	add.w	r8, r1, #20
 80089de:	f100 0514 	add.w	r5, r0, #20
 80089e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089e6:	9301      	str	r3, [sp, #4]
 80089e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089f0:	3301      	adds	r3, #1
 80089f2:	429a      	cmp	r2, r3
 80089f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a00:	d331      	bcc.n	8008a66 <quorem+0x9e>
 8008a02:	f04f 0e00 	mov.w	lr, #0
 8008a06:	4640      	mov	r0, r8
 8008a08:	46ac      	mov	ip, r5
 8008a0a:	46f2      	mov	sl, lr
 8008a0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a10:	b293      	uxth	r3, r2
 8008a12:	fb06 e303 	mla	r3, r6, r3, lr
 8008a16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008a20:	0c12      	lsrs	r2, r2, #16
 8008a22:	f8dc a000 	ldr.w	sl, [ip]
 8008a26:	fb06 e202 	mla	r2, r6, r2, lr
 8008a2a:	fa13 f38a 	uxtah	r3, r3, sl
 8008a2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a32:	fa1f fa82 	uxth.w	sl, r2
 8008a36:	f8dc 2000 	ldr.w	r2, [ip]
 8008a3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a48:	4581      	cmp	r9, r0
 8008a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008a4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a52:	d2db      	bcs.n	8008a0c <quorem+0x44>
 8008a54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a58:	b92b      	cbnz	r3, 8008a66 <quorem+0x9e>
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	3b04      	subs	r3, #4
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	d32e      	bcc.n	8008ac2 <quorem+0xfa>
 8008a64:	613c      	str	r4, [r7, #16]
 8008a66:	4638      	mov	r0, r7
 8008a68:	f001 f8be 	bl	8009be8 <__mcmp>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	db24      	blt.n	8008aba <quorem+0xf2>
 8008a70:	3601      	adds	r6, #1
 8008a72:	4628      	mov	r0, r5
 8008a74:	f04f 0c00 	mov.w	ip, #0
 8008a78:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a7c:	f8d0 e000 	ldr.w	lr, [r0]
 8008a80:	b293      	uxth	r3, r2
 8008a82:	ebac 0303 	sub.w	r3, ip, r3
 8008a86:	0c12      	lsrs	r2, r2, #16
 8008a88:	fa13 f38e 	uxtah	r3, r3, lr
 8008a8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a9a:	45c1      	cmp	r9, r8
 8008a9c:	f840 3b04 	str.w	r3, [r0], #4
 8008aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008aa4:	d2e8      	bcs.n	8008a78 <quorem+0xb0>
 8008aa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008aaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aae:	b922      	cbnz	r2, 8008aba <quorem+0xf2>
 8008ab0:	3b04      	subs	r3, #4
 8008ab2:	429d      	cmp	r5, r3
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	d30a      	bcc.n	8008ace <quorem+0x106>
 8008ab8:	613c      	str	r4, [r7, #16]
 8008aba:	4630      	mov	r0, r6
 8008abc:	b003      	add	sp, #12
 8008abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac2:	6812      	ldr	r2, [r2, #0]
 8008ac4:	3b04      	subs	r3, #4
 8008ac6:	2a00      	cmp	r2, #0
 8008ac8:	d1cc      	bne.n	8008a64 <quorem+0x9c>
 8008aca:	3c01      	subs	r4, #1
 8008acc:	e7c7      	b.n	8008a5e <quorem+0x96>
 8008ace:	6812      	ldr	r2, [r2, #0]
 8008ad0:	3b04      	subs	r3, #4
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	d1f0      	bne.n	8008ab8 <quorem+0xf0>
 8008ad6:	3c01      	subs	r4, #1
 8008ad8:	e7eb      	b.n	8008ab2 <quorem+0xea>
 8008ada:	2000      	movs	r0, #0
 8008adc:	e7ee      	b.n	8008abc <quorem+0xf4>
	...

08008ae0 <_dtoa_r>:
 8008ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae4:	ed2d 8b02 	vpush	{d8}
 8008ae8:	ec57 6b10 	vmov	r6, r7, d0
 8008aec:	b095      	sub	sp, #84	; 0x54
 8008aee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008af0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008af4:	9105      	str	r1, [sp, #20]
 8008af6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008afa:	4604      	mov	r4, r0
 8008afc:	9209      	str	r2, [sp, #36]	; 0x24
 8008afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b00:	b975      	cbnz	r5, 8008b20 <_dtoa_r+0x40>
 8008b02:	2010      	movs	r0, #16
 8008b04:	f000 fddc 	bl	80096c0 <malloc>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b0c:	b920      	cbnz	r0, 8008b18 <_dtoa_r+0x38>
 8008b0e:	4bb2      	ldr	r3, [pc, #712]	; (8008dd8 <_dtoa_r+0x2f8>)
 8008b10:	21ea      	movs	r1, #234	; 0xea
 8008b12:	48b2      	ldr	r0, [pc, #712]	; (8008ddc <_dtoa_r+0x2fc>)
 8008b14:	f001 fb8e 	bl	800a234 <__assert_func>
 8008b18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b1c:	6005      	str	r5, [r0, #0]
 8008b1e:	60c5      	str	r5, [r0, #12]
 8008b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	b151      	cbz	r1, 8008b3c <_dtoa_r+0x5c>
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	604a      	str	r2, [r1, #4]
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	4093      	lsls	r3, r2
 8008b2e:	608b      	str	r3, [r1, #8]
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fe1b 	bl	800976c <_Bfree>
 8008b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	1e3b      	subs	r3, r7, #0
 8008b3e:	bfb9      	ittee	lt
 8008b40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b44:	9303      	strlt	r3, [sp, #12]
 8008b46:	2300      	movge	r3, #0
 8008b48:	f8c8 3000 	strge.w	r3, [r8]
 8008b4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b50:	4ba3      	ldr	r3, [pc, #652]	; (8008de0 <_dtoa_r+0x300>)
 8008b52:	bfbc      	itt	lt
 8008b54:	2201      	movlt	r2, #1
 8008b56:	f8c8 2000 	strlt.w	r2, [r8]
 8008b5a:	ea33 0309 	bics.w	r3, r3, r9
 8008b5e:	d11b      	bne.n	8008b98 <_dtoa_r+0xb8>
 8008b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b62:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b6c:	4333      	orrs	r3, r6
 8008b6e:	f000 857a 	beq.w	8009666 <_dtoa_r+0xb86>
 8008b72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b74:	b963      	cbnz	r3, 8008b90 <_dtoa_r+0xb0>
 8008b76:	4b9b      	ldr	r3, [pc, #620]	; (8008de4 <_dtoa_r+0x304>)
 8008b78:	e024      	b.n	8008bc4 <_dtoa_r+0xe4>
 8008b7a:	4b9b      	ldr	r3, [pc, #620]	; (8008de8 <_dtoa_r+0x308>)
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	9800      	ldr	r0, [sp, #0]
 8008b86:	b015      	add	sp, #84	; 0x54
 8008b88:	ecbd 8b02 	vpop	{d8}
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	4b94      	ldr	r3, [pc, #592]	; (8008de4 <_dtoa_r+0x304>)
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	3303      	adds	r3, #3
 8008b96:	e7f3      	b.n	8008b80 <_dtoa_r+0xa0>
 8008b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	ec51 0b17 	vmov	r0, r1, d7
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008ba8:	f7f7 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bac:	4680      	mov	r8, r0
 8008bae:	b158      	cbz	r0, 8008bc8 <_dtoa_r+0xe8>
 8008bb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8551 	beq.w	8009660 <_dtoa_r+0xb80>
 8008bbe:	488b      	ldr	r0, [pc, #556]	; (8008dec <_dtoa_r+0x30c>)
 8008bc0:	6018      	str	r0, [r3, #0]
 8008bc2:	1e43      	subs	r3, r0, #1
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	e7dd      	b.n	8008b84 <_dtoa_r+0xa4>
 8008bc8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008bcc:	aa12      	add	r2, sp, #72	; 0x48
 8008bce:	a913      	add	r1, sp, #76	; 0x4c
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f001 f8ad 	bl	8009d30 <__d2b>
 8008bd6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bda:	4683      	mov	fp, r0
 8008bdc:	2d00      	cmp	r5, #0
 8008bde:	d07c      	beq.n	8008cda <_dtoa_r+0x1fa>
 8008be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008bee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008bf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bfa:	4b7d      	ldr	r3, [pc, #500]	; (8008df0 <_dtoa_r+0x310>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4630      	mov	r0, r6
 8008c00:	4639      	mov	r1, r7
 8008c02:	f7f7 fb41 	bl	8000288 <__aeabi_dsub>
 8008c06:	a36e      	add	r3, pc, #440	; (adr r3, 8008dc0 <_dtoa_r+0x2e0>)
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f7f7 fcf4 	bl	80005f8 <__aeabi_dmul>
 8008c10:	a36d      	add	r3, pc, #436	; (adr r3, 8008dc8 <_dtoa_r+0x2e8>)
 8008c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c16:	f7f7 fb39 	bl	800028c <__adddf3>
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	460f      	mov	r7, r1
 8008c20:	f7f7 fc80 	bl	8000524 <__aeabi_i2d>
 8008c24:	a36a      	add	r3, pc, #424	; (adr r3, 8008dd0 <_dtoa_r+0x2f0>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f7f7 fce5 	bl	80005f8 <__aeabi_dmul>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4630      	mov	r0, r6
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 fb29 	bl	800028c <__adddf3>
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	f7f7 ff8b 	bl	8000b58 <__aeabi_d2iz>
 8008c42:	2200      	movs	r2, #0
 8008c44:	4682      	mov	sl, r0
 8008c46:	2300      	movs	r3, #0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 ff46 	bl	8000adc <__aeabi_dcmplt>
 8008c50:	b148      	cbz	r0, 8008c66 <_dtoa_r+0x186>
 8008c52:	4650      	mov	r0, sl
 8008c54:	f7f7 fc66 	bl	8000524 <__aeabi_i2d>
 8008c58:	4632      	mov	r2, r6
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	f7f7 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c60:	b908      	cbnz	r0, 8008c66 <_dtoa_r+0x186>
 8008c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c66:	f1ba 0f16 	cmp.w	sl, #22
 8008c6a:	d854      	bhi.n	8008d16 <_dtoa_r+0x236>
 8008c6c:	4b61      	ldr	r3, [pc, #388]	; (8008df4 <_dtoa_r+0x314>)
 8008c6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c7a:	f7f7 ff2f 	bl	8000adc <__aeabi_dcmplt>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d04b      	beq.n	8008d1a <_dtoa_r+0x23a>
 8008c82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c86:	2300      	movs	r3, #0
 8008c88:	930e      	str	r3, [sp, #56]	; 0x38
 8008c8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c8c:	1b5d      	subs	r5, r3, r5
 8008c8e:	1e6b      	subs	r3, r5, #1
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	bf43      	ittte	mi
 8008c94:	2300      	movmi	r3, #0
 8008c96:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c9a:	9304      	strmi	r3, [sp, #16]
 8008c9c:	f04f 0800 	movpl.w	r8, #0
 8008ca0:	f1ba 0f00 	cmp.w	sl, #0
 8008ca4:	db3b      	blt.n	8008d1e <_dtoa_r+0x23e>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008cac:	4453      	add	r3, sl
 8008cae:	9304      	str	r3, [sp, #16]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	9306      	str	r3, [sp, #24]
 8008cb4:	9b05      	ldr	r3, [sp, #20]
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d869      	bhi.n	8008d8e <_dtoa_r+0x2ae>
 8008cba:	2b05      	cmp	r3, #5
 8008cbc:	bfc4      	itt	gt
 8008cbe:	3b04      	subgt	r3, #4
 8008cc0:	9305      	strgt	r3, [sp, #20]
 8008cc2:	9b05      	ldr	r3, [sp, #20]
 8008cc4:	f1a3 0302 	sub.w	r3, r3, #2
 8008cc8:	bfcc      	ite	gt
 8008cca:	2500      	movgt	r5, #0
 8008ccc:	2501      	movle	r5, #1
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d869      	bhi.n	8008da6 <_dtoa_r+0x2c6>
 8008cd2:	e8df f003 	tbb	[pc, r3]
 8008cd6:	4e2c      	.short	0x4e2c
 8008cd8:	5a4c      	.short	0x5a4c
 8008cda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008cde:	441d      	add	r5, r3
 8008ce0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ce4:	2b20      	cmp	r3, #32
 8008ce6:	bfc1      	itttt	gt
 8008ce8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cf0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008cf4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cf8:	bfda      	itte	le
 8008cfa:	f1c3 0320 	rsble	r3, r3, #32
 8008cfe:	fa06 f003 	lslle.w	r0, r6, r3
 8008d02:	4318      	orrgt	r0, r3
 8008d04:	f7f7 fbfe 	bl	8000504 <__aeabi_ui2d>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d10:	3d01      	subs	r5, #1
 8008d12:	9310      	str	r3, [sp, #64]	; 0x40
 8008d14:	e771      	b.n	8008bfa <_dtoa_r+0x11a>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e7b6      	b.n	8008c88 <_dtoa_r+0x1a8>
 8008d1a:	900e      	str	r0, [sp, #56]	; 0x38
 8008d1c:	e7b5      	b.n	8008c8a <_dtoa_r+0x1aa>
 8008d1e:	f1ca 0300 	rsb	r3, sl, #0
 8008d22:	9306      	str	r3, [sp, #24]
 8008d24:	2300      	movs	r3, #0
 8008d26:	eba8 080a 	sub.w	r8, r8, sl
 8008d2a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d2c:	e7c2      	b.n	8008cb4 <_dtoa_r+0x1d4>
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc39      	bgt.n	8008dac <_dtoa_r+0x2cc>
 8008d38:	f04f 0901 	mov.w	r9, #1
 8008d3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d40:	464b      	mov	r3, r9
 8008d42:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d48:	2200      	movs	r2, #0
 8008d4a:	6042      	str	r2, [r0, #4]
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	f102 0614 	add.w	r6, r2, #20
 8008d52:	429e      	cmp	r6, r3
 8008d54:	6841      	ldr	r1, [r0, #4]
 8008d56:	d92f      	bls.n	8008db8 <_dtoa_r+0x2d8>
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fcc7 	bl	80096ec <_Balloc>
 8008d5e:	9000      	str	r0, [sp, #0]
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d14b      	bne.n	8008dfc <_dtoa_r+0x31c>
 8008d64:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <_dtoa_r+0x318>)
 8008d66:	4602      	mov	r2, r0
 8008d68:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d6c:	e6d1      	b.n	8008b12 <_dtoa_r+0x32>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e7de      	b.n	8008d30 <_dtoa_r+0x250>
 8008d72:	2300      	movs	r3, #0
 8008d74:	9308      	str	r3, [sp, #32]
 8008d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d78:	eb0a 0903 	add.w	r9, sl, r3
 8008d7c:	f109 0301 	add.w	r3, r9, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	bfb8      	it	lt
 8008d86:	2301      	movlt	r3, #1
 8008d88:	e7dd      	b.n	8008d46 <_dtoa_r+0x266>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e7f2      	b.n	8008d74 <_dtoa_r+0x294>
 8008d8e:	2501      	movs	r5, #1
 8008d90:	2300      	movs	r3, #0
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	9508      	str	r5, [sp, #32]
 8008d96:	f04f 39ff 	mov.w	r9, #4294967295
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008da0:	2312      	movs	r3, #18
 8008da2:	9209      	str	r2, [sp, #36]	; 0x24
 8008da4:	e7cf      	b.n	8008d46 <_dtoa_r+0x266>
 8008da6:	2301      	movs	r3, #1
 8008da8:	9308      	str	r3, [sp, #32]
 8008daa:	e7f4      	b.n	8008d96 <_dtoa_r+0x2b6>
 8008dac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008db0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008db4:	464b      	mov	r3, r9
 8008db6:	e7c6      	b.n	8008d46 <_dtoa_r+0x266>
 8008db8:	3101      	adds	r1, #1
 8008dba:	6041      	str	r1, [r0, #4]
 8008dbc:	0052      	lsls	r2, r2, #1
 8008dbe:	e7c6      	b.n	8008d4e <_dtoa_r+0x26e>
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800b191 	.word	0x0800b191
 8008ddc:	0800b1a8 	.word	0x0800b1a8
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	0800b18d 	.word	0x0800b18d
 8008de8:	0800b184 	.word	0x0800b184
 8008dec:	0800b161 	.word	0x0800b161
 8008df0:	3ff80000 	.word	0x3ff80000
 8008df4:	0800b2a0 	.word	0x0800b2a0
 8008df8:	0800b207 	.word	0x0800b207
 8008dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfe:	9a00      	ldr	r2, [sp, #0]
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	2b0e      	cmp	r3, #14
 8008e06:	f200 80ad 	bhi.w	8008f64 <_dtoa_r+0x484>
 8008e0a:	2d00      	cmp	r5, #0
 8008e0c:	f000 80aa 	beq.w	8008f64 <_dtoa_r+0x484>
 8008e10:	f1ba 0f00 	cmp.w	sl, #0
 8008e14:	dd36      	ble.n	8008e84 <_dtoa_r+0x3a4>
 8008e16:	4ac3      	ldr	r2, [pc, #780]	; (8009124 <_dtoa_r+0x644>)
 8008e18:	f00a 030f 	and.w	r3, sl, #15
 8008e1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e20:	ed93 7b00 	vldr	d7, [r3]
 8008e24:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e28:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e2c:	eeb0 8a47 	vmov.f32	s16, s14
 8008e30:	eef0 8a67 	vmov.f32	s17, s15
 8008e34:	d016      	beq.n	8008e64 <_dtoa_r+0x384>
 8008e36:	4bbc      	ldr	r3, [pc, #752]	; (8009128 <_dtoa_r+0x648>)
 8008e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e40:	f7f7 fd04 	bl	800084c <__aeabi_ddiv>
 8008e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e48:	f007 070f 	and.w	r7, r7, #15
 8008e4c:	2503      	movs	r5, #3
 8008e4e:	4eb6      	ldr	r6, [pc, #728]	; (8009128 <_dtoa_r+0x648>)
 8008e50:	b957      	cbnz	r7, 8008e68 <_dtoa_r+0x388>
 8008e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e56:	ec53 2b18 	vmov	r2, r3, d8
 8008e5a:	f7f7 fcf7 	bl	800084c <__aeabi_ddiv>
 8008e5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e62:	e029      	b.n	8008eb8 <_dtoa_r+0x3d8>
 8008e64:	2502      	movs	r5, #2
 8008e66:	e7f2      	b.n	8008e4e <_dtoa_r+0x36e>
 8008e68:	07f9      	lsls	r1, r7, #31
 8008e6a:	d508      	bpl.n	8008e7e <_dtoa_r+0x39e>
 8008e6c:	ec51 0b18 	vmov	r0, r1, d8
 8008e70:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e74:	f7f7 fbc0 	bl	80005f8 <__aeabi_dmul>
 8008e78:	ec41 0b18 	vmov	d8, r0, r1
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	107f      	asrs	r7, r7, #1
 8008e80:	3608      	adds	r6, #8
 8008e82:	e7e5      	b.n	8008e50 <_dtoa_r+0x370>
 8008e84:	f000 80a6 	beq.w	8008fd4 <_dtoa_r+0x4f4>
 8008e88:	f1ca 0600 	rsb	r6, sl, #0
 8008e8c:	4ba5      	ldr	r3, [pc, #660]	; (8009124 <_dtoa_r+0x644>)
 8008e8e:	4fa6      	ldr	r7, [pc, #664]	; (8009128 <_dtoa_r+0x648>)
 8008e90:	f006 020f 	and.w	r2, r6, #15
 8008e94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ea0:	f7f7 fbaa 	bl	80005f8 <__aeabi_dmul>
 8008ea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea8:	1136      	asrs	r6, r6, #4
 8008eaa:	2300      	movs	r3, #0
 8008eac:	2502      	movs	r5, #2
 8008eae:	2e00      	cmp	r6, #0
 8008eb0:	f040 8085 	bne.w	8008fbe <_dtoa_r+0x4de>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1d2      	bne.n	8008e5e <_dtoa_r+0x37e>
 8008eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 808c 	beq.w	8008fd8 <_dtoa_r+0x4f8>
 8008ec0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ec4:	4b99      	ldr	r3, [pc, #612]	; (800912c <_dtoa_r+0x64c>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	4630      	mov	r0, r6
 8008eca:	4639      	mov	r1, r7
 8008ecc:	f7f7 fe06 	bl	8000adc <__aeabi_dcmplt>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	f000 8081 	beq.w	8008fd8 <_dtoa_r+0x4f8>
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d07d      	beq.n	8008fd8 <_dtoa_r+0x4f8>
 8008edc:	f1b9 0f00 	cmp.w	r9, #0
 8008ee0:	dd3c      	ble.n	8008f5c <_dtoa_r+0x47c>
 8008ee2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ee6:	9307      	str	r3, [sp, #28]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4b91      	ldr	r3, [pc, #580]	; (8009130 <_dtoa_r+0x650>)
 8008eec:	4630      	mov	r0, r6
 8008eee:	4639      	mov	r1, r7
 8008ef0:	f7f7 fb82 	bl	80005f8 <__aeabi_dmul>
 8008ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef8:	3501      	adds	r5, #1
 8008efa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008efe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f02:	4628      	mov	r0, r5
 8008f04:	f7f7 fb0e 	bl	8000524 <__aeabi_i2d>
 8008f08:	4632      	mov	r2, r6
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	f7f7 fb74 	bl	80005f8 <__aeabi_dmul>
 8008f10:	4b88      	ldr	r3, [pc, #544]	; (8009134 <_dtoa_r+0x654>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	f7f7 f9ba 	bl	800028c <__adddf3>
 8008f18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d15c      	bne.n	8008fe2 <_dtoa_r+0x502>
 8008f28:	4b83      	ldr	r3, [pc, #524]	; (8009138 <_dtoa_r+0x658>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	4639      	mov	r1, r7
 8008f30:	f7f7 f9aa 	bl	8000288 <__aeabi_dsub>
 8008f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f38:	4606      	mov	r6, r0
 8008f3a:	460f      	mov	r7, r1
 8008f3c:	f7f7 fdec 	bl	8000b18 <__aeabi_dcmpgt>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	f040 8296 	bne.w	8009472 <_dtoa_r+0x992>
 8008f46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f50:	4639      	mov	r1, r7
 8008f52:	f7f7 fdc3 	bl	8000adc <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	f040 8288 	bne.w	800946c <_dtoa_r+0x98c>
 8008f5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f2c0 8158 	blt.w	800921c <_dtoa_r+0x73c>
 8008f6c:	f1ba 0f0e 	cmp.w	sl, #14
 8008f70:	f300 8154 	bgt.w	800921c <_dtoa_r+0x73c>
 8008f74:	4b6b      	ldr	r3, [pc, #428]	; (8009124 <_dtoa_r+0x644>)
 8008f76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f280 80e3 	bge.w	800914c <_dtoa_r+0x66c>
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f300 80df 	bgt.w	800914c <_dtoa_r+0x66c>
 8008f8e:	f040 826d 	bne.w	800946c <_dtoa_r+0x98c>
 8008f92:	4b69      	ldr	r3, [pc, #420]	; (8009138 <_dtoa_r+0x658>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4640      	mov	r0, r8
 8008f98:	4649      	mov	r1, r9
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fa2:	f7f7 fdaf 	bl	8000b04 <__aeabi_dcmpge>
 8008fa6:	9e01      	ldr	r6, [sp, #4]
 8008fa8:	4637      	mov	r7, r6
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f040 8243 	bne.w	8009436 <_dtoa_r+0x956>
 8008fb0:	9d00      	ldr	r5, [sp, #0]
 8008fb2:	2331      	movs	r3, #49	; 0x31
 8008fb4:	f805 3b01 	strb.w	r3, [r5], #1
 8008fb8:	f10a 0a01 	add.w	sl, sl, #1
 8008fbc:	e23f      	b.n	800943e <_dtoa_r+0x95e>
 8008fbe:	07f2      	lsls	r2, r6, #31
 8008fc0:	d505      	bpl.n	8008fce <_dtoa_r+0x4ee>
 8008fc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fc6:	f7f7 fb17 	bl	80005f8 <__aeabi_dmul>
 8008fca:	3501      	adds	r5, #1
 8008fcc:	2301      	movs	r3, #1
 8008fce:	1076      	asrs	r6, r6, #1
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	e76c      	b.n	8008eae <_dtoa_r+0x3ce>
 8008fd4:	2502      	movs	r5, #2
 8008fd6:	e76f      	b.n	8008eb8 <_dtoa_r+0x3d8>
 8008fd8:	9b01      	ldr	r3, [sp, #4]
 8008fda:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fde:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe0:	e78d      	b.n	8008efe <_dtoa_r+0x41e>
 8008fe2:	9900      	ldr	r1, [sp, #0]
 8008fe4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fe8:	4b4e      	ldr	r3, [pc, #312]	; (8009124 <_dtoa_r+0x644>)
 8008fea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fee:	4401      	add	r1, r0
 8008ff0:	9102      	str	r1, [sp, #8]
 8008ff2:	9908      	ldr	r1, [sp, #32]
 8008ff4:	eeb0 8a47 	vmov.f32	s16, s14
 8008ff8:	eef0 8a67 	vmov.f32	s17, s15
 8008ffc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009000:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009004:	2900      	cmp	r1, #0
 8009006:	d045      	beq.n	8009094 <_dtoa_r+0x5b4>
 8009008:	494c      	ldr	r1, [pc, #304]	; (800913c <_dtoa_r+0x65c>)
 800900a:	2000      	movs	r0, #0
 800900c:	f7f7 fc1e 	bl	800084c <__aeabi_ddiv>
 8009010:	ec53 2b18 	vmov	r2, r3, d8
 8009014:	f7f7 f938 	bl	8000288 <__aeabi_dsub>
 8009018:	9d00      	ldr	r5, [sp, #0]
 800901a:	ec41 0b18 	vmov	d8, r0, r1
 800901e:	4639      	mov	r1, r7
 8009020:	4630      	mov	r0, r6
 8009022:	f7f7 fd99 	bl	8000b58 <__aeabi_d2iz>
 8009026:	900c      	str	r0, [sp, #48]	; 0x30
 8009028:	f7f7 fa7c 	bl	8000524 <__aeabi_i2d>
 800902c:	4602      	mov	r2, r0
 800902e:	460b      	mov	r3, r1
 8009030:	4630      	mov	r0, r6
 8009032:	4639      	mov	r1, r7
 8009034:	f7f7 f928 	bl	8000288 <__aeabi_dsub>
 8009038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800903a:	3330      	adds	r3, #48	; 0x30
 800903c:	f805 3b01 	strb.w	r3, [r5], #1
 8009040:	ec53 2b18 	vmov	r2, r3, d8
 8009044:	4606      	mov	r6, r0
 8009046:	460f      	mov	r7, r1
 8009048:	f7f7 fd48 	bl	8000adc <__aeabi_dcmplt>
 800904c:	2800      	cmp	r0, #0
 800904e:	d165      	bne.n	800911c <_dtoa_r+0x63c>
 8009050:	4632      	mov	r2, r6
 8009052:	463b      	mov	r3, r7
 8009054:	4935      	ldr	r1, [pc, #212]	; (800912c <_dtoa_r+0x64c>)
 8009056:	2000      	movs	r0, #0
 8009058:	f7f7 f916 	bl	8000288 <__aeabi_dsub>
 800905c:	ec53 2b18 	vmov	r2, r3, d8
 8009060:	f7f7 fd3c 	bl	8000adc <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 80b9 	bne.w	80091dc <_dtoa_r+0x6fc>
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	429d      	cmp	r5, r3
 800906e:	f43f af75 	beq.w	8008f5c <_dtoa_r+0x47c>
 8009072:	4b2f      	ldr	r3, [pc, #188]	; (8009130 <_dtoa_r+0x650>)
 8009074:	ec51 0b18 	vmov	r0, r1, d8
 8009078:	2200      	movs	r2, #0
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	4b2c      	ldr	r3, [pc, #176]	; (8009130 <_dtoa_r+0x650>)
 8009080:	ec41 0b18 	vmov	d8, r0, r1
 8009084:	2200      	movs	r2, #0
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fab5 	bl	80005f8 <__aeabi_dmul>
 800908e:	4606      	mov	r6, r0
 8009090:	460f      	mov	r7, r1
 8009092:	e7c4      	b.n	800901e <_dtoa_r+0x53e>
 8009094:	ec51 0b17 	vmov	r0, r1, d7
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	9b02      	ldr	r3, [sp, #8]
 800909e:	9d00      	ldr	r5, [sp, #0]
 80090a0:	930c      	str	r3, [sp, #48]	; 0x30
 80090a2:	ec41 0b18 	vmov	d8, r0, r1
 80090a6:	4639      	mov	r1, r7
 80090a8:	4630      	mov	r0, r6
 80090aa:	f7f7 fd55 	bl	8000b58 <__aeabi_d2iz>
 80090ae:	9011      	str	r0, [sp, #68]	; 0x44
 80090b0:	f7f7 fa38 	bl	8000524 <__aeabi_i2d>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4630      	mov	r0, r6
 80090ba:	4639      	mov	r1, r7
 80090bc:	f7f7 f8e4 	bl	8000288 <__aeabi_dsub>
 80090c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090c2:	3330      	adds	r3, #48	; 0x30
 80090c4:	f805 3b01 	strb.w	r3, [r5], #1
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	429d      	cmp	r5, r3
 80090cc:	4606      	mov	r6, r0
 80090ce:	460f      	mov	r7, r1
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	d134      	bne.n	8009140 <_dtoa_r+0x660>
 80090d6:	4b19      	ldr	r3, [pc, #100]	; (800913c <_dtoa_r+0x65c>)
 80090d8:	ec51 0b18 	vmov	r0, r1, d8
 80090dc:	f7f7 f8d6 	bl	800028c <__adddf3>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	4630      	mov	r0, r6
 80090e6:	4639      	mov	r1, r7
 80090e8:	f7f7 fd16 	bl	8000b18 <__aeabi_dcmpgt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d175      	bne.n	80091dc <_dtoa_r+0x6fc>
 80090f0:	ec53 2b18 	vmov	r2, r3, d8
 80090f4:	4911      	ldr	r1, [pc, #68]	; (800913c <_dtoa_r+0x65c>)
 80090f6:	2000      	movs	r0, #0
 80090f8:	f7f7 f8c6 	bl	8000288 <__aeabi_dsub>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4630      	mov	r0, r6
 8009102:	4639      	mov	r1, r7
 8009104:	f7f7 fcea 	bl	8000adc <__aeabi_dcmplt>
 8009108:	2800      	cmp	r0, #0
 800910a:	f43f af27 	beq.w	8008f5c <_dtoa_r+0x47c>
 800910e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009110:	1e6b      	subs	r3, r5, #1
 8009112:	930c      	str	r3, [sp, #48]	; 0x30
 8009114:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009118:	2b30      	cmp	r3, #48	; 0x30
 800911a:	d0f8      	beq.n	800910e <_dtoa_r+0x62e>
 800911c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009120:	e04a      	b.n	80091b8 <_dtoa_r+0x6d8>
 8009122:	bf00      	nop
 8009124:	0800b2a0 	.word	0x0800b2a0
 8009128:	0800b278 	.word	0x0800b278
 800912c:	3ff00000 	.word	0x3ff00000
 8009130:	40240000 	.word	0x40240000
 8009134:	401c0000 	.word	0x401c0000
 8009138:	40140000 	.word	0x40140000
 800913c:	3fe00000 	.word	0x3fe00000
 8009140:	4baf      	ldr	r3, [pc, #700]	; (8009400 <_dtoa_r+0x920>)
 8009142:	f7f7 fa59 	bl	80005f8 <__aeabi_dmul>
 8009146:	4606      	mov	r6, r0
 8009148:	460f      	mov	r7, r1
 800914a:	e7ac      	b.n	80090a6 <_dtoa_r+0x5c6>
 800914c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009150:	9d00      	ldr	r5, [sp, #0]
 8009152:	4642      	mov	r2, r8
 8009154:	464b      	mov	r3, r9
 8009156:	4630      	mov	r0, r6
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 fb77 	bl	800084c <__aeabi_ddiv>
 800915e:	f7f7 fcfb 	bl	8000b58 <__aeabi_d2iz>
 8009162:	9002      	str	r0, [sp, #8]
 8009164:	f7f7 f9de 	bl	8000524 <__aeabi_i2d>
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	f7f7 fa44 	bl	80005f8 <__aeabi_dmul>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4630      	mov	r0, r6
 8009176:	4639      	mov	r1, r7
 8009178:	f7f7 f886 	bl	8000288 <__aeabi_dsub>
 800917c:	9e02      	ldr	r6, [sp, #8]
 800917e:	9f01      	ldr	r7, [sp, #4]
 8009180:	3630      	adds	r6, #48	; 0x30
 8009182:	f805 6b01 	strb.w	r6, [r5], #1
 8009186:	9e00      	ldr	r6, [sp, #0]
 8009188:	1bae      	subs	r6, r5, r6
 800918a:	42b7      	cmp	r7, r6
 800918c:	4602      	mov	r2, r0
 800918e:	460b      	mov	r3, r1
 8009190:	d137      	bne.n	8009202 <_dtoa_r+0x722>
 8009192:	f7f7 f87b 	bl	800028c <__adddf3>
 8009196:	4642      	mov	r2, r8
 8009198:	464b      	mov	r3, r9
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	f7f7 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 80091a2:	b9c8      	cbnz	r0, 80091d8 <_dtoa_r+0x6f8>
 80091a4:	4642      	mov	r2, r8
 80091a6:	464b      	mov	r3, r9
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80091b0:	b110      	cbz	r0, 80091b8 <_dtoa_r+0x6d8>
 80091b2:	9b02      	ldr	r3, [sp, #8]
 80091b4:	07d9      	lsls	r1, r3, #31
 80091b6:	d40f      	bmi.n	80091d8 <_dtoa_r+0x6f8>
 80091b8:	4620      	mov	r0, r4
 80091ba:	4659      	mov	r1, fp
 80091bc:	f000 fad6 	bl	800976c <_Bfree>
 80091c0:	2300      	movs	r3, #0
 80091c2:	702b      	strb	r3, [r5, #0]
 80091c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091c6:	f10a 0001 	add.w	r0, sl, #1
 80091ca:	6018      	str	r0, [r3, #0]
 80091cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f43f acd8 	beq.w	8008b84 <_dtoa_r+0xa4>
 80091d4:	601d      	str	r5, [r3, #0]
 80091d6:	e4d5      	b.n	8008b84 <_dtoa_r+0xa4>
 80091d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80091dc:	462b      	mov	r3, r5
 80091de:	461d      	mov	r5, r3
 80091e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091e4:	2a39      	cmp	r2, #57	; 0x39
 80091e6:	d108      	bne.n	80091fa <_dtoa_r+0x71a>
 80091e8:	9a00      	ldr	r2, [sp, #0]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d1f7      	bne.n	80091de <_dtoa_r+0x6fe>
 80091ee:	9a07      	ldr	r2, [sp, #28]
 80091f0:	9900      	ldr	r1, [sp, #0]
 80091f2:	3201      	adds	r2, #1
 80091f4:	9207      	str	r2, [sp, #28]
 80091f6:	2230      	movs	r2, #48	; 0x30
 80091f8:	700a      	strb	r2, [r1, #0]
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	3201      	adds	r2, #1
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	e78c      	b.n	800911c <_dtoa_r+0x63c>
 8009202:	4b7f      	ldr	r3, [pc, #508]	; (8009400 <_dtoa_r+0x920>)
 8009204:	2200      	movs	r2, #0
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	2200      	movs	r2, #0
 800920c:	2300      	movs	r3, #0
 800920e:	4606      	mov	r6, r0
 8009210:	460f      	mov	r7, r1
 8009212:	f7f7 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8009216:	2800      	cmp	r0, #0
 8009218:	d09b      	beq.n	8009152 <_dtoa_r+0x672>
 800921a:	e7cd      	b.n	80091b8 <_dtoa_r+0x6d8>
 800921c:	9a08      	ldr	r2, [sp, #32]
 800921e:	2a00      	cmp	r2, #0
 8009220:	f000 80c4 	beq.w	80093ac <_dtoa_r+0x8cc>
 8009224:	9a05      	ldr	r2, [sp, #20]
 8009226:	2a01      	cmp	r2, #1
 8009228:	f300 80a8 	bgt.w	800937c <_dtoa_r+0x89c>
 800922c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800922e:	2a00      	cmp	r2, #0
 8009230:	f000 80a0 	beq.w	8009374 <_dtoa_r+0x894>
 8009234:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009238:	9e06      	ldr	r6, [sp, #24]
 800923a:	4645      	mov	r5, r8
 800923c:	9a04      	ldr	r2, [sp, #16]
 800923e:	2101      	movs	r1, #1
 8009240:	441a      	add	r2, r3
 8009242:	4620      	mov	r0, r4
 8009244:	4498      	add	r8, r3
 8009246:	9204      	str	r2, [sp, #16]
 8009248:	f000 fb4c 	bl	80098e4 <__i2b>
 800924c:	4607      	mov	r7, r0
 800924e:	2d00      	cmp	r5, #0
 8009250:	dd0b      	ble.n	800926a <_dtoa_r+0x78a>
 8009252:	9b04      	ldr	r3, [sp, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	dd08      	ble.n	800926a <_dtoa_r+0x78a>
 8009258:	42ab      	cmp	r3, r5
 800925a:	9a04      	ldr	r2, [sp, #16]
 800925c:	bfa8      	it	ge
 800925e:	462b      	movge	r3, r5
 8009260:	eba8 0803 	sub.w	r8, r8, r3
 8009264:	1aed      	subs	r5, r5, r3
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	9304      	str	r3, [sp, #16]
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	b1fb      	cbz	r3, 80092ae <_dtoa_r+0x7ce>
 800926e:	9b08      	ldr	r3, [sp, #32]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 809f 	beq.w	80093b4 <_dtoa_r+0x8d4>
 8009276:	2e00      	cmp	r6, #0
 8009278:	dd11      	ble.n	800929e <_dtoa_r+0x7be>
 800927a:	4639      	mov	r1, r7
 800927c:	4632      	mov	r2, r6
 800927e:	4620      	mov	r0, r4
 8009280:	f000 fbec 	bl	8009a5c <__pow5mult>
 8009284:	465a      	mov	r2, fp
 8009286:	4601      	mov	r1, r0
 8009288:	4607      	mov	r7, r0
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fb40 	bl	8009910 <__multiply>
 8009290:	4659      	mov	r1, fp
 8009292:	9007      	str	r0, [sp, #28]
 8009294:	4620      	mov	r0, r4
 8009296:	f000 fa69 	bl	800976c <_Bfree>
 800929a:	9b07      	ldr	r3, [sp, #28]
 800929c:	469b      	mov	fp, r3
 800929e:	9b06      	ldr	r3, [sp, #24]
 80092a0:	1b9a      	subs	r2, r3, r6
 80092a2:	d004      	beq.n	80092ae <_dtoa_r+0x7ce>
 80092a4:	4659      	mov	r1, fp
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 fbd8 	bl	8009a5c <__pow5mult>
 80092ac:	4683      	mov	fp, r0
 80092ae:	2101      	movs	r1, #1
 80092b0:	4620      	mov	r0, r4
 80092b2:	f000 fb17 	bl	80098e4 <__i2b>
 80092b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	4606      	mov	r6, r0
 80092bc:	dd7c      	ble.n	80093b8 <_dtoa_r+0x8d8>
 80092be:	461a      	mov	r2, r3
 80092c0:	4601      	mov	r1, r0
 80092c2:	4620      	mov	r0, r4
 80092c4:	f000 fbca 	bl	8009a5c <__pow5mult>
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	4606      	mov	r6, r0
 80092ce:	dd76      	ble.n	80093be <_dtoa_r+0x8de>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9306      	str	r3, [sp, #24]
 80092d4:	6933      	ldr	r3, [r6, #16]
 80092d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092da:	6918      	ldr	r0, [r3, #16]
 80092dc:	f000 fab2 	bl	8009844 <__hi0bits>
 80092e0:	f1c0 0020 	rsb	r0, r0, #32
 80092e4:	9b04      	ldr	r3, [sp, #16]
 80092e6:	4418      	add	r0, r3
 80092e8:	f010 001f 	ands.w	r0, r0, #31
 80092ec:	f000 8086 	beq.w	80093fc <_dtoa_r+0x91c>
 80092f0:	f1c0 0320 	rsb	r3, r0, #32
 80092f4:	2b04      	cmp	r3, #4
 80092f6:	dd7f      	ble.n	80093f8 <_dtoa_r+0x918>
 80092f8:	f1c0 001c 	rsb	r0, r0, #28
 80092fc:	9b04      	ldr	r3, [sp, #16]
 80092fe:	4403      	add	r3, r0
 8009300:	4480      	add	r8, r0
 8009302:	4405      	add	r5, r0
 8009304:	9304      	str	r3, [sp, #16]
 8009306:	f1b8 0f00 	cmp.w	r8, #0
 800930a:	dd05      	ble.n	8009318 <_dtoa_r+0x838>
 800930c:	4659      	mov	r1, fp
 800930e:	4642      	mov	r2, r8
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fbfd 	bl	8009b10 <__lshift>
 8009316:	4683      	mov	fp, r0
 8009318:	9b04      	ldr	r3, [sp, #16]
 800931a:	2b00      	cmp	r3, #0
 800931c:	dd05      	ble.n	800932a <_dtoa_r+0x84a>
 800931e:	4631      	mov	r1, r6
 8009320:	461a      	mov	r2, r3
 8009322:	4620      	mov	r0, r4
 8009324:	f000 fbf4 	bl	8009b10 <__lshift>
 8009328:	4606      	mov	r6, r0
 800932a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800932c:	2b00      	cmp	r3, #0
 800932e:	d069      	beq.n	8009404 <_dtoa_r+0x924>
 8009330:	4631      	mov	r1, r6
 8009332:	4658      	mov	r0, fp
 8009334:	f000 fc58 	bl	8009be8 <__mcmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	da63      	bge.n	8009404 <_dtoa_r+0x924>
 800933c:	2300      	movs	r3, #0
 800933e:	4659      	mov	r1, fp
 8009340:	220a      	movs	r2, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f000 fa34 	bl	80097b0 <__multadd>
 8009348:	9b08      	ldr	r3, [sp, #32]
 800934a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800934e:	4683      	mov	fp, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 818f 	beq.w	8009674 <_dtoa_r+0xb94>
 8009356:	4639      	mov	r1, r7
 8009358:	2300      	movs	r3, #0
 800935a:	220a      	movs	r2, #10
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fa27 	bl	80097b0 <__multadd>
 8009362:	f1b9 0f00 	cmp.w	r9, #0
 8009366:	4607      	mov	r7, r0
 8009368:	f300 808e 	bgt.w	8009488 <_dtoa_r+0x9a8>
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	2b02      	cmp	r3, #2
 8009370:	dc50      	bgt.n	8009414 <_dtoa_r+0x934>
 8009372:	e089      	b.n	8009488 <_dtoa_r+0x9a8>
 8009374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800937a:	e75d      	b.n	8009238 <_dtoa_r+0x758>
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	1e5e      	subs	r6, r3, #1
 8009380:	9b06      	ldr	r3, [sp, #24]
 8009382:	42b3      	cmp	r3, r6
 8009384:	bfbf      	itttt	lt
 8009386:	9b06      	ldrlt	r3, [sp, #24]
 8009388:	9606      	strlt	r6, [sp, #24]
 800938a:	1af2      	sublt	r2, r6, r3
 800938c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800938e:	bfb6      	itet	lt
 8009390:	189b      	addlt	r3, r3, r2
 8009392:	1b9e      	subge	r6, r3, r6
 8009394:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	bfb8      	it	lt
 800939a:	2600      	movlt	r6, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfb5      	itete	lt
 80093a0:	eba8 0503 	sublt.w	r5, r8, r3
 80093a4:	9b01      	ldrge	r3, [sp, #4]
 80093a6:	2300      	movlt	r3, #0
 80093a8:	4645      	movge	r5, r8
 80093aa:	e747      	b.n	800923c <_dtoa_r+0x75c>
 80093ac:	9e06      	ldr	r6, [sp, #24]
 80093ae:	9f08      	ldr	r7, [sp, #32]
 80093b0:	4645      	mov	r5, r8
 80093b2:	e74c      	b.n	800924e <_dtoa_r+0x76e>
 80093b4:	9a06      	ldr	r2, [sp, #24]
 80093b6:	e775      	b.n	80092a4 <_dtoa_r+0x7c4>
 80093b8:	9b05      	ldr	r3, [sp, #20]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	dc18      	bgt.n	80093f0 <_dtoa_r+0x910>
 80093be:	9b02      	ldr	r3, [sp, #8]
 80093c0:	b9b3      	cbnz	r3, 80093f0 <_dtoa_r+0x910>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093c8:	b9a3      	cbnz	r3, 80093f4 <_dtoa_r+0x914>
 80093ca:	9b03      	ldr	r3, [sp, #12]
 80093cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093d0:	0d1b      	lsrs	r3, r3, #20
 80093d2:	051b      	lsls	r3, r3, #20
 80093d4:	b12b      	cbz	r3, 80093e2 <_dtoa_r+0x902>
 80093d6:	9b04      	ldr	r3, [sp, #16]
 80093d8:	3301      	adds	r3, #1
 80093da:	9304      	str	r3, [sp, #16]
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	2301      	movs	r3, #1
 80093e2:	9306      	str	r3, [sp, #24]
 80093e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f47f af74 	bne.w	80092d4 <_dtoa_r+0x7f4>
 80093ec:	2001      	movs	r0, #1
 80093ee:	e779      	b.n	80092e4 <_dtoa_r+0x804>
 80093f0:	2300      	movs	r3, #0
 80093f2:	e7f6      	b.n	80093e2 <_dtoa_r+0x902>
 80093f4:	9b02      	ldr	r3, [sp, #8]
 80093f6:	e7f4      	b.n	80093e2 <_dtoa_r+0x902>
 80093f8:	d085      	beq.n	8009306 <_dtoa_r+0x826>
 80093fa:	4618      	mov	r0, r3
 80093fc:	301c      	adds	r0, #28
 80093fe:	e77d      	b.n	80092fc <_dtoa_r+0x81c>
 8009400:	40240000 	.word	0x40240000
 8009404:	9b01      	ldr	r3, [sp, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dc38      	bgt.n	800947c <_dtoa_r+0x99c>
 800940a:	9b05      	ldr	r3, [sp, #20]
 800940c:	2b02      	cmp	r3, #2
 800940e:	dd35      	ble.n	800947c <_dtoa_r+0x99c>
 8009410:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009414:	f1b9 0f00 	cmp.w	r9, #0
 8009418:	d10d      	bne.n	8009436 <_dtoa_r+0x956>
 800941a:	4631      	mov	r1, r6
 800941c:	464b      	mov	r3, r9
 800941e:	2205      	movs	r2, #5
 8009420:	4620      	mov	r0, r4
 8009422:	f000 f9c5 	bl	80097b0 <__multadd>
 8009426:	4601      	mov	r1, r0
 8009428:	4606      	mov	r6, r0
 800942a:	4658      	mov	r0, fp
 800942c:	f000 fbdc 	bl	8009be8 <__mcmp>
 8009430:	2800      	cmp	r0, #0
 8009432:	f73f adbd 	bgt.w	8008fb0 <_dtoa_r+0x4d0>
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	9d00      	ldr	r5, [sp, #0]
 800943a:	ea6f 0a03 	mvn.w	sl, r3
 800943e:	f04f 0800 	mov.w	r8, #0
 8009442:	4631      	mov	r1, r6
 8009444:	4620      	mov	r0, r4
 8009446:	f000 f991 	bl	800976c <_Bfree>
 800944a:	2f00      	cmp	r7, #0
 800944c:	f43f aeb4 	beq.w	80091b8 <_dtoa_r+0x6d8>
 8009450:	f1b8 0f00 	cmp.w	r8, #0
 8009454:	d005      	beq.n	8009462 <_dtoa_r+0x982>
 8009456:	45b8      	cmp	r8, r7
 8009458:	d003      	beq.n	8009462 <_dtoa_r+0x982>
 800945a:	4641      	mov	r1, r8
 800945c:	4620      	mov	r0, r4
 800945e:	f000 f985 	bl	800976c <_Bfree>
 8009462:	4639      	mov	r1, r7
 8009464:	4620      	mov	r0, r4
 8009466:	f000 f981 	bl	800976c <_Bfree>
 800946a:	e6a5      	b.n	80091b8 <_dtoa_r+0x6d8>
 800946c:	2600      	movs	r6, #0
 800946e:	4637      	mov	r7, r6
 8009470:	e7e1      	b.n	8009436 <_dtoa_r+0x956>
 8009472:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009474:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009478:	4637      	mov	r7, r6
 800947a:	e599      	b.n	8008fb0 <_dtoa_r+0x4d0>
 800947c:	9b08      	ldr	r3, [sp, #32]
 800947e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 80fd 	beq.w	8009682 <_dtoa_r+0xba2>
 8009488:	2d00      	cmp	r5, #0
 800948a:	dd05      	ble.n	8009498 <_dtoa_r+0x9b8>
 800948c:	4639      	mov	r1, r7
 800948e:	462a      	mov	r2, r5
 8009490:	4620      	mov	r0, r4
 8009492:	f000 fb3d 	bl	8009b10 <__lshift>
 8009496:	4607      	mov	r7, r0
 8009498:	9b06      	ldr	r3, [sp, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d05c      	beq.n	8009558 <_dtoa_r+0xa78>
 800949e:	6879      	ldr	r1, [r7, #4]
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 f923 	bl	80096ec <_Balloc>
 80094a6:	4605      	mov	r5, r0
 80094a8:	b928      	cbnz	r0, 80094b6 <_dtoa_r+0x9d6>
 80094aa:	4b80      	ldr	r3, [pc, #512]	; (80096ac <_dtoa_r+0xbcc>)
 80094ac:	4602      	mov	r2, r0
 80094ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80094b2:	f7ff bb2e 	b.w	8008b12 <_dtoa_r+0x32>
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	3202      	adds	r2, #2
 80094ba:	0092      	lsls	r2, r2, #2
 80094bc:	f107 010c 	add.w	r1, r7, #12
 80094c0:	300c      	adds	r0, #12
 80094c2:	f000 f905 	bl	80096d0 <memcpy>
 80094c6:	2201      	movs	r2, #1
 80094c8:	4629      	mov	r1, r5
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 fb20 	bl	8009b10 <__lshift>
 80094d0:	9b00      	ldr	r3, [sp, #0]
 80094d2:	3301      	adds	r3, #1
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	9b00      	ldr	r3, [sp, #0]
 80094d8:	444b      	add	r3, r9
 80094da:	9307      	str	r3, [sp, #28]
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	46b8      	mov	r8, r7
 80094e4:	9306      	str	r3, [sp, #24]
 80094e6:	4607      	mov	r7, r0
 80094e8:	9b01      	ldr	r3, [sp, #4]
 80094ea:	4631      	mov	r1, r6
 80094ec:	3b01      	subs	r3, #1
 80094ee:	4658      	mov	r0, fp
 80094f0:	9302      	str	r3, [sp, #8]
 80094f2:	f7ff fa69 	bl	80089c8 <quorem>
 80094f6:	4603      	mov	r3, r0
 80094f8:	3330      	adds	r3, #48	; 0x30
 80094fa:	9004      	str	r0, [sp, #16]
 80094fc:	4641      	mov	r1, r8
 80094fe:	4658      	mov	r0, fp
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	f000 fb71 	bl	8009be8 <__mcmp>
 8009506:	463a      	mov	r2, r7
 8009508:	4681      	mov	r9, r0
 800950a:	4631      	mov	r1, r6
 800950c:	4620      	mov	r0, r4
 800950e:	f000 fb87 	bl	8009c20 <__mdiff>
 8009512:	68c2      	ldr	r2, [r0, #12]
 8009514:	9b08      	ldr	r3, [sp, #32]
 8009516:	4605      	mov	r5, r0
 8009518:	bb02      	cbnz	r2, 800955c <_dtoa_r+0xa7c>
 800951a:	4601      	mov	r1, r0
 800951c:	4658      	mov	r0, fp
 800951e:	f000 fb63 	bl	8009be8 <__mcmp>
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	4602      	mov	r2, r0
 8009526:	4629      	mov	r1, r5
 8009528:	4620      	mov	r0, r4
 800952a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800952e:	f000 f91d 	bl	800976c <_Bfree>
 8009532:	9b05      	ldr	r3, [sp, #20]
 8009534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009536:	9d01      	ldr	r5, [sp, #4]
 8009538:	ea43 0102 	orr.w	r1, r3, r2
 800953c:	9b06      	ldr	r3, [sp, #24]
 800953e:	430b      	orrs	r3, r1
 8009540:	9b08      	ldr	r3, [sp, #32]
 8009542:	d10d      	bne.n	8009560 <_dtoa_r+0xa80>
 8009544:	2b39      	cmp	r3, #57	; 0x39
 8009546:	d029      	beq.n	800959c <_dtoa_r+0xabc>
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	dd01      	ble.n	8009552 <_dtoa_r+0xa72>
 800954e:	9b04      	ldr	r3, [sp, #16]
 8009550:	3331      	adds	r3, #49	; 0x31
 8009552:	9a02      	ldr	r2, [sp, #8]
 8009554:	7013      	strb	r3, [r2, #0]
 8009556:	e774      	b.n	8009442 <_dtoa_r+0x962>
 8009558:	4638      	mov	r0, r7
 800955a:	e7b9      	b.n	80094d0 <_dtoa_r+0x9f0>
 800955c:	2201      	movs	r2, #1
 800955e:	e7e2      	b.n	8009526 <_dtoa_r+0xa46>
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	db06      	blt.n	8009574 <_dtoa_r+0xa94>
 8009566:	9905      	ldr	r1, [sp, #20]
 8009568:	ea41 0909 	orr.w	r9, r1, r9
 800956c:	9906      	ldr	r1, [sp, #24]
 800956e:	ea59 0101 	orrs.w	r1, r9, r1
 8009572:	d120      	bne.n	80095b6 <_dtoa_r+0xad6>
 8009574:	2a00      	cmp	r2, #0
 8009576:	ddec      	ble.n	8009552 <_dtoa_r+0xa72>
 8009578:	4659      	mov	r1, fp
 800957a:	2201      	movs	r2, #1
 800957c:	4620      	mov	r0, r4
 800957e:	9301      	str	r3, [sp, #4]
 8009580:	f000 fac6 	bl	8009b10 <__lshift>
 8009584:	4631      	mov	r1, r6
 8009586:	4683      	mov	fp, r0
 8009588:	f000 fb2e 	bl	8009be8 <__mcmp>
 800958c:	2800      	cmp	r0, #0
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	dc02      	bgt.n	8009598 <_dtoa_r+0xab8>
 8009592:	d1de      	bne.n	8009552 <_dtoa_r+0xa72>
 8009594:	07da      	lsls	r2, r3, #31
 8009596:	d5dc      	bpl.n	8009552 <_dtoa_r+0xa72>
 8009598:	2b39      	cmp	r3, #57	; 0x39
 800959a:	d1d8      	bne.n	800954e <_dtoa_r+0xa6e>
 800959c:	9a02      	ldr	r2, [sp, #8]
 800959e:	2339      	movs	r3, #57	; 0x39
 80095a0:	7013      	strb	r3, [r2, #0]
 80095a2:	462b      	mov	r3, r5
 80095a4:	461d      	mov	r5, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095ac:	2a39      	cmp	r2, #57	; 0x39
 80095ae:	d050      	beq.n	8009652 <_dtoa_r+0xb72>
 80095b0:	3201      	adds	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	e745      	b.n	8009442 <_dtoa_r+0x962>
 80095b6:	2a00      	cmp	r2, #0
 80095b8:	dd03      	ble.n	80095c2 <_dtoa_r+0xae2>
 80095ba:	2b39      	cmp	r3, #57	; 0x39
 80095bc:	d0ee      	beq.n	800959c <_dtoa_r+0xabc>
 80095be:	3301      	adds	r3, #1
 80095c0:	e7c7      	b.n	8009552 <_dtoa_r+0xa72>
 80095c2:	9a01      	ldr	r2, [sp, #4]
 80095c4:	9907      	ldr	r1, [sp, #28]
 80095c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095ca:	428a      	cmp	r2, r1
 80095cc:	d02a      	beq.n	8009624 <_dtoa_r+0xb44>
 80095ce:	4659      	mov	r1, fp
 80095d0:	2300      	movs	r3, #0
 80095d2:	220a      	movs	r2, #10
 80095d4:	4620      	mov	r0, r4
 80095d6:	f000 f8eb 	bl	80097b0 <__multadd>
 80095da:	45b8      	cmp	r8, r7
 80095dc:	4683      	mov	fp, r0
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	f04f 020a 	mov.w	r2, #10
 80095e6:	4641      	mov	r1, r8
 80095e8:	4620      	mov	r0, r4
 80095ea:	d107      	bne.n	80095fc <_dtoa_r+0xb1c>
 80095ec:	f000 f8e0 	bl	80097b0 <__multadd>
 80095f0:	4680      	mov	r8, r0
 80095f2:	4607      	mov	r7, r0
 80095f4:	9b01      	ldr	r3, [sp, #4]
 80095f6:	3301      	adds	r3, #1
 80095f8:	9301      	str	r3, [sp, #4]
 80095fa:	e775      	b.n	80094e8 <_dtoa_r+0xa08>
 80095fc:	f000 f8d8 	bl	80097b0 <__multadd>
 8009600:	4639      	mov	r1, r7
 8009602:	4680      	mov	r8, r0
 8009604:	2300      	movs	r3, #0
 8009606:	220a      	movs	r2, #10
 8009608:	4620      	mov	r0, r4
 800960a:	f000 f8d1 	bl	80097b0 <__multadd>
 800960e:	4607      	mov	r7, r0
 8009610:	e7f0      	b.n	80095f4 <_dtoa_r+0xb14>
 8009612:	f1b9 0f00 	cmp.w	r9, #0
 8009616:	9a00      	ldr	r2, [sp, #0]
 8009618:	bfcc      	ite	gt
 800961a:	464d      	movgt	r5, r9
 800961c:	2501      	movle	r5, #1
 800961e:	4415      	add	r5, r2
 8009620:	f04f 0800 	mov.w	r8, #0
 8009624:	4659      	mov	r1, fp
 8009626:	2201      	movs	r2, #1
 8009628:	4620      	mov	r0, r4
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	f000 fa70 	bl	8009b10 <__lshift>
 8009630:	4631      	mov	r1, r6
 8009632:	4683      	mov	fp, r0
 8009634:	f000 fad8 	bl	8009be8 <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	dcb2      	bgt.n	80095a2 <_dtoa_r+0xac2>
 800963c:	d102      	bne.n	8009644 <_dtoa_r+0xb64>
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	07db      	lsls	r3, r3, #31
 8009642:	d4ae      	bmi.n	80095a2 <_dtoa_r+0xac2>
 8009644:	462b      	mov	r3, r5
 8009646:	461d      	mov	r5, r3
 8009648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800964c:	2a30      	cmp	r2, #48	; 0x30
 800964e:	d0fa      	beq.n	8009646 <_dtoa_r+0xb66>
 8009650:	e6f7      	b.n	8009442 <_dtoa_r+0x962>
 8009652:	9a00      	ldr	r2, [sp, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d1a5      	bne.n	80095a4 <_dtoa_r+0xac4>
 8009658:	f10a 0a01 	add.w	sl, sl, #1
 800965c:	2331      	movs	r3, #49	; 0x31
 800965e:	e779      	b.n	8009554 <_dtoa_r+0xa74>
 8009660:	4b13      	ldr	r3, [pc, #76]	; (80096b0 <_dtoa_r+0xbd0>)
 8009662:	f7ff baaf 	b.w	8008bc4 <_dtoa_r+0xe4>
 8009666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009668:	2b00      	cmp	r3, #0
 800966a:	f47f aa86 	bne.w	8008b7a <_dtoa_r+0x9a>
 800966e:	4b11      	ldr	r3, [pc, #68]	; (80096b4 <_dtoa_r+0xbd4>)
 8009670:	f7ff baa8 	b.w	8008bc4 <_dtoa_r+0xe4>
 8009674:	f1b9 0f00 	cmp.w	r9, #0
 8009678:	dc03      	bgt.n	8009682 <_dtoa_r+0xba2>
 800967a:	9b05      	ldr	r3, [sp, #20]
 800967c:	2b02      	cmp	r3, #2
 800967e:	f73f aec9 	bgt.w	8009414 <_dtoa_r+0x934>
 8009682:	9d00      	ldr	r5, [sp, #0]
 8009684:	4631      	mov	r1, r6
 8009686:	4658      	mov	r0, fp
 8009688:	f7ff f99e 	bl	80089c8 <quorem>
 800968c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009690:	f805 3b01 	strb.w	r3, [r5], #1
 8009694:	9a00      	ldr	r2, [sp, #0]
 8009696:	1aaa      	subs	r2, r5, r2
 8009698:	4591      	cmp	r9, r2
 800969a:	ddba      	ble.n	8009612 <_dtoa_r+0xb32>
 800969c:	4659      	mov	r1, fp
 800969e:	2300      	movs	r3, #0
 80096a0:	220a      	movs	r2, #10
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f884 	bl	80097b0 <__multadd>
 80096a8:	4683      	mov	fp, r0
 80096aa:	e7eb      	b.n	8009684 <_dtoa_r+0xba4>
 80096ac:	0800b207 	.word	0x0800b207
 80096b0:	0800b160 	.word	0x0800b160
 80096b4:	0800b184 	.word	0x0800b184

080096b8 <_localeconv_r>:
 80096b8:	4800      	ldr	r0, [pc, #0]	; (80096bc <_localeconv_r+0x4>)
 80096ba:	4770      	bx	lr
 80096bc:	20000164 	.word	0x20000164

080096c0 <malloc>:
 80096c0:	4b02      	ldr	r3, [pc, #8]	; (80096cc <malloc+0xc>)
 80096c2:	4601      	mov	r1, r0
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	f000 bbef 	b.w	8009ea8 <_malloc_r>
 80096ca:	bf00      	nop
 80096cc:	20000010 	.word	0x20000010

080096d0 <memcpy>:
 80096d0:	440a      	add	r2, r1
 80096d2:	4291      	cmp	r1, r2
 80096d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096d8:	d100      	bne.n	80096dc <memcpy+0xc>
 80096da:	4770      	bx	lr
 80096dc:	b510      	push	{r4, lr}
 80096de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096e6:	4291      	cmp	r1, r2
 80096e8:	d1f9      	bne.n	80096de <memcpy+0xe>
 80096ea:	bd10      	pop	{r4, pc}

080096ec <_Balloc>:
 80096ec:	b570      	push	{r4, r5, r6, lr}
 80096ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	b976      	cbnz	r6, 8009714 <_Balloc+0x28>
 80096f6:	2010      	movs	r0, #16
 80096f8:	f7ff ffe2 	bl	80096c0 <malloc>
 80096fc:	4602      	mov	r2, r0
 80096fe:	6260      	str	r0, [r4, #36]	; 0x24
 8009700:	b920      	cbnz	r0, 800970c <_Balloc+0x20>
 8009702:	4b18      	ldr	r3, [pc, #96]	; (8009764 <_Balloc+0x78>)
 8009704:	4818      	ldr	r0, [pc, #96]	; (8009768 <_Balloc+0x7c>)
 8009706:	2166      	movs	r1, #102	; 0x66
 8009708:	f000 fd94 	bl	800a234 <__assert_func>
 800970c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009710:	6006      	str	r6, [r0, #0]
 8009712:	60c6      	str	r6, [r0, #12]
 8009714:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009716:	68f3      	ldr	r3, [r6, #12]
 8009718:	b183      	cbz	r3, 800973c <_Balloc+0x50>
 800971a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800971c:	68db      	ldr	r3, [r3, #12]
 800971e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009722:	b9b8      	cbnz	r0, 8009754 <_Balloc+0x68>
 8009724:	2101      	movs	r1, #1
 8009726:	fa01 f605 	lsl.w	r6, r1, r5
 800972a:	1d72      	adds	r2, r6, #5
 800972c:	0092      	lsls	r2, r2, #2
 800972e:	4620      	mov	r0, r4
 8009730:	f000 fb5a 	bl	8009de8 <_calloc_r>
 8009734:	b160      	cbz	r0, 8009750 <_Balloc+0x64>
 8009736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800973a:	e00e      	b.n	800975a <_Balloc+0x6e>
 800973c:	2221      	movs	r2, #33	; 0x21
 800973e:	2104      	movs	r1, #4
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fb51 	bl	8009de8 <_calloc_r>
 8009746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009748:	60f0      	str	r0, [r6, #12]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e4      	bne.n	800971a <_Balloc+0x2e>
 8009750:	2000      	movs	r0, #0
 8009752:	bd70      	pop	{r4, r5, r6, pc}
 8009754:	6802      	ldr	r2, [r0, #0]
 8009756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800975a:	2300      	movs	r3, #0
 800975c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009760:	e7f7      	b.n	8009752 <_Balloc+0x66>
 8009762:	bf00      	nop
 8009764:	0800b191 	.word	0x0800b191
 8009768:	0800b218 	.word	0x0800b218

0800976c <_Bfree>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009770:	4605      	mov	r5, r0
 8009772:	460c      	mov	r4, r1
 8009774:	b976      	cbnz	r6, 8009794 <_Bfree+0x28>
 8009776:	2010      	movs	r0, #16
 8009778:	f7ff ffa2 	bl	80096c0 <malloc>
 800977c:	4602      	mov	r2, r0
 800977e:	6268      	str	r0, [r5, #36]	; 0x24
 8009780:	b920      	cbnz	r0, 800978c <_Bfree+0x20>
 8009782:	4b09      	ldr	r3, [pc, #36]	; (80097a8 <_Bfree+0x3c>)
 8009784:	4809      	ldr	r0, [pc, #36]	; (80097ac <_Bfree+0x40>)
 8009786:	218a      	movs	r1, #138	; 0x8a
 8009788:	f000 fd54 	bl	800a234 <__assert_func>
 800978c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009790:	6006      	str	r6, [r0, #0]
 8009792:	60c6      	str	r6, [r0, #12]
 8009794:	b13c      	cbz	r4, 80097a6 <_Bfree+0x3a>
 8009796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009798:	6862      	ldr	r2, [r4, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097a0:	6021      	str	r1, [r4, #0]
 80097a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097a6:	bd70      	pop	{r4, r5, r6, pc}
 80097a8:	0800b191 	.word	0x0800b191
 80097ac:	0800b218 	.word	0x0800b218

080097b0 <__multadd>:
 80097b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b4:	690e      	ldr	r6, [r1, #16]
 80097b6:	4607      	mov	r7, r0
 80097b8:	4698      	mov	r8, r3
 80097ba:	460c      	mov	r4, r1
 80097bc:	f101 0014 	add.w	r0, r1, #20
 80097c0:	2300      	movs	r3, #0
 80097c2:	6805      	ldr	r5, [r0, #0]
 80097c4:	b2a9      	uxth	r1, r5
 80097c6:	fb02 8101 	mla	r1, r2, r1, r8
 80097ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80097ce:	0c2d      	lsrs	r5, r5, #16
 80097d0:	fb02 c505 	mla	r5, r2, r5, ip
 80097d4:	b289      	uxth	r1, r1
 80097d6:	3301      	adds	r3, #1
 80097d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80097dc:	429e      	cmp	r6, r3
 80097de:	f840 1b04 	str.w	r1, [r0], #4
 80097e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80097e6:	dcec      	bgt.n	80097c2 <__multadd+0x12>
 80097e8:	f1b8 0f00 	cmp.w	r8, #0
 80097ec:	d022      	beq.n	8009834 <__multadd+0x84>
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	dc19      	bgt.n	8009828 <__multadd+0x78>
 80097f4:	6861      	ldr	r1, [r4, #4]
 80097f6:	4638      	mov	r0, r7
 80097f8:	3101      	adds	r1, #1
 80097fa:	f7ff ff77 	bl	80096ec <_Balloc>
 80097fe:	4605      	mov	r5, r0
 8009800:	b928      	cbnz	r0, 800980e <__multadd+0x5e>
 8009802:	4602      	mov	r2, r0
 8009804:	4b0d      	ldr	r3, [pc, #52]	; (800983c <__multadd+0x8c>)
 8009806:	480e      	ldr	r0, [pc, #56]	; (8009840 <__multadd+0x90>)
 8009808:	21b5      	movs	r1, #181	; 0xb5
 800980a:	f000 fd13 	bl	800a234 <__assert_func>
 800980e:	6922      	ldr	r2, [r4, #16]
 8009810:	3202      	adds	r2, #2
 8009812:	f104 010c 	add.w	r1, r4, #12
 8009816:	0092      	lsls	r2, r2, #2
 8009818:	300c      	adds	r0, #12
 800981a:	f7ff ff59 	bl	80096d0 <memcpy>
 800981e:	4621      	mov	r1, r4
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff ffa3 	bl	800976c <_Bfree>
 8009826:	462c      	mov	r4, r5
 8009828:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800982c:	3601      	adds	r6, #1
 800982e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009832:	6126      	str	r6, [r4, #16]
 8009834:	4620      	mov	r0, r4
 8009836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983a:	bf00      	nop
 800983c:	0800b207 	.word	0x0800b207
 8009840:	0800b218 	.word	0x0800b218

08009844 <__hi0bits>:
 8009844:	0c03      	lsrs	r3, r0, #16
 8009846:	041b      	lsls	r3, r3, #16
 8009848:	b9d3      	cbnz	r3, 8009880 <__hi0bits+0x3c>
 800984a:	0400      	lsls	r0, r0, #16
 800984c:	2310      	movs	r3, #16
 800984e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009852:	bf04      	itt	eq
 8009854:	0200      	lsleq	r0, r0, #8
 8009856:	3308      	addeq	r3, #8
 8009858:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800985c:	bf04      	itt	eq
 800985e:	0100      	lsleq	r0, r0, #4
 8009860:	3304      	addeq	r3, #4
 8009862:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009866:	bf04      	itt	eq
 8009868:	0080      	lsleq	r0, r0, #2
 800986a:	3302      	addeq	r3, #2
 800986c:	2800      	cmp	r0, #0
 800986e:	db05      	blt.n	800987c <__hi0bits+0x38>
 8009870:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009874:	f103 0301 	add.w	r3, r3, #1
 8009878:	bf08      	it	eq
 800987a:	2320      	moveq	r3, #32
 800987c:	4618      	mov	r0, r3
 800987e:	4770      	bx	lr
 8009880:	2300      	movs	r3, #0
 8009882:	e7e4      	b.n	800984e <__hi0bits+0xa>

08009884 <__lo0bits>:
 8009884:	6803      	ldr	r3, [r0, #0]
 8009886:	f013 0207 	ands.w	r2, r3, #7
 800988a:	4601      	mov	r1, r0
 800988c:	d00b      	beq.n	80098a6 <__lo0bits+0x22>
 800988e:	07da      	lsls	r2, r3, #31
 8009890:	d424      	bmi.n	80098dc <__lo0bits+0x58>
 8009892:	0798      	lsls	r0, r3, #30
 8009894:	bf49      	itett	mi
 8009896:	085b      	lsrmi	r3, r3, #1
 8009898:	089b      	lsrpl	r3, r3, #2
 800989a:	2001      	movmi	r0, #1
 800989c:	600b      	strmi	r3, [r1, #0]
 800989e:	bf5c      	itt	pl
 80098a0:	600b      	strpl	r3, [r1, #0]
 80098a2:	2002      	movpl	r0, #2
 80098a4:	4770      	bx	lr
 80098a6:	b298      	uxth	r0, r3
 80098a8:	b9b0      	cbnz	r0, 80098d8 <__lo0bits+0x54>
 80098aa:	0c1b      	lsrs	r3, r3, #16
 80098ac:	2010      	movs	r0, #16
 80098ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098b2:	bf04      	itt	eq
 80098b4:	0a1b      	lsreq	r3, r3, #8
 80098b6:	3008      	addeq	r0, #8
 80098b8:	071a      	lsls	r2, r3, #28
 80098ba:	bf04      	itt	eq
 80098bc:	091b      	lsreq	r3, r3, #4
 80098be:	3004      	addeq	r0, #4
 80098c0:	079a      	lsls	r2, r3, #30
 80098c2:	bf04      	itt	eq
 80098c4:	089b      	lsreq	r3, r3, #2
 80098c6:	3002      	addeq	r0, #2
 80098c8:	07da      	lsls	r2, r3, #31
 80098ca:	d403      	bmi.n	80098d4 <__lo0bits+0x50>
 80098cc:	085b      	lsrs	r3, r3, #1
 80098ce:	f100 0001 	add.w	r0, r0, #1
 80098d2:	d005      	beq.n	80098e0 <__lo0bits+0x5c>
 80098d4:	600b      	str	r3, [r1, #0]
 80098d6:	4770      	bx	lr
 80098d8:	4610      	mov	r0, r2
 80098da:	e7e8      	b.n	80098ae <__lo0bits+0x2a>
 80098dc:	2000      	movs	r0, #0
 80098de:	4770      	bx	lr
 80098e0:	2020      	movs	r0, #32
 80098e2:	4770      	bx	lr

080098e4 <__i2b>:
 80098e4:	b510      	push	{r4, lr}
 80098e6:	460c      	mov	r4, r1
 80098e8:	2101      	movs	r1, #1
 80098ea:	f7ff feff 	bl	80096ec <_Balloc>
 80098ee:	4602      	mov	r2, r0
 80098f0:	b928      	cbnz	r0, 80098fe <__i2b+0x1a>
 80098f2:	4b05      	ldr	r3, [pc, #20]	; (8009908 <__i2b+0x24>)
 80098f4:	4805      	ldr	r0, [pc, #20]	; (800990c <__i2b+0x28>)
 80098f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098fa:	f000 fc9b 	bl	800a234 <__assert_func>
 80098fe:	2301      	movs	r3, #1
 8009900:	6144      	str	r4, [r0, #20]
 8009902:	6103      	str	r3, [r0, #16]
 8009904:	bd10      	pop	{r4, pc}
 8009906:	bf00      	nop
 8009908:	0800b207 	.word	0x0800b207
 800990c:	0800b218 	.word	0x0800b218

08009910 <__multiply>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	4614      	mov	r4, r2
 8009916:	690a      	ldr	r2, [r1, #16]
 8009918:	6923      	ldr	r3, [r4, #16]
 800991a:	429a      	cmp	r2, r3
 800991c:	bfb8      	it	lt
 800991e:	460b      	movlt	r3, r1
 8009920:	460d      	mov	r5, r1
 8009922:	bfbc      	itt	lt
 8009924:	4625      	movlt	r5, r4
 8009926:	461c      	movlt	r4, r3
 8009928:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800992c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009930:	68ab      	ldr	r3, [r5, #8]
 8009932:	6869      	ldr	r1, [r5, #4]
 8009934:	eb0a 0709 	add.w	r7, sl, r9
 8009938:	42bb      	cmp	r3, r7
 800993a:	b085      	sub	sp, #20
 800993c:	bfb8      	it	lt
 800993e:	3101      	addlt	r1, #1
 8009940:	f7ff fed4 	bl	80096ec <_Balloc>
 8009944:	b930      	cbnz	r0, 8009954 <__multiply+0x44>
 8009946:	4602      	mov	r2, r0
 8009948:	4b42      	ldr	r3, [pc, #264]	; (8009a54 <__multiply+0x144>)
 800994a:	4843      	ldr	r0, [pc, #268]	; (8009a58 <__multiply+0x148>)
 800994c:	f240 115d 	movw	r1, #349	; 0x15d
 8009950:	f000 fc70 	bl	800a234 <__assert_func>
 8009954:	f100 0614 	add.w	r6, r0, #20
 8009958:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800995c:	4633      	mov	r3, r6
 800995e:	2200      	movs	r2, #0
 8009960:	4543      	cmp	r3, r8
 8009962:	d31e      	bcc.n	80099a2 <__multiply+0x92>
 8009964:	f105 0c14 	add.w	ip, r5, #20
 8009968:	f104 0314 	add.w	r3, r4, #20
 800996c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009970:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009974:	9202      	str	r2, [sp, #8]
 8009976:	ebac 0205 	sub.w	r2, ip, r5
 800997a:	3a15      	subs	r2, #21
 800997c:	f022 0203 	bic.w	r2, r2, #3
 8009980:	3204      	adds	r2, #4
 8009982:	f105 0115 	add.w	r1, r5, #21
 8009986:	458c      	cmp	ip, r1
 8009988:	bf38      	it	cc
 800998a:	2204      	movcc	r2, #4
 800998c:	9201      	str	r2, [sp, #4]
 800998e:	9a02      	ldr	r2, [sp, #8]
 8009990:	9303      	str	r3, [sp, #12]
 8009992:	429a      	cmp	r2, r3
 8009994:	d808      	bhi.n	80099a8 <__multiply+0x98>
 8009996:	2f00      	cmp	r7, #0
 8009998:	dc55      	bgt.n	8009a46 <__multiply+0x136>
 800999a:	6107      	str	r7, [r0, #16]
 800999c:	b005      	add	sp, #20
 800999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a2:	f843 2b04 	str.w	r2, [r3], #4
 80099a6:	e7db      	b.n	8009960 <__multiply+0x50>
 80099a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80099ac:	f1ba 0f00 	cmp.w	sl, #0
 80099b0:	d020      	beq.n	80099f4 <__multiply+0xe4>
 80099b2:	f105 0e14 	add.w	lr, r5, #20
 80099b6:	46b1      	mov	r9, r6
 80099b8:	2200      	movs	r2, #0
 80099ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80099be:	f8d9 b000 	ldr.w	fp, [r9]
 80099c2:	b2a1      	uxth	r1, r4
 80099c4:	fa1f fb8b 	uxth.w	fp, fp
 80099c8:	fb0a b101 	mla	r1, sl, r1, fp
 80099cc:	4411      	add	r1, r2
 80099ce:	f8d9 2000 	ldr.w	r2, [r9]
 80099d2:	0c24      	lsrs	r4, r4, #16
 80099d4:	0c12      	lsrs	r2, r2, #16
 80099d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80099da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099de:	b289      	uxth	r1, r1
 80099e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099e4:	45f4      	cmp	ip, lr
 80099e6:	f849 1b04 	str.w	r1, [r9], #4
 80099ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80099ee:	d8e4      	bhi.n	80099ba <__multiply+0xaa>
 80099f0:	9901      	ldr	r1, [sp, #4]
 80099f2:	5072      	str	r2, [r6, r1]
 80099f4:	9a03      	ldr	r2, [sp, #12]
 80099f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099fa:	3304      	adds	r3, #4
 80099fc:	f1b9 0f00 	cmp.w	r9, #0
 8009a00:	d01f      	beq.n	8009a42 <__multiply+0x132>
 8009a02:	6834      	ldr	r4, [r6, #0]
 8009a04:	f105 0114 	add.w	r1, r5, #20
 8009a08:	46b6      	mov	lr, r6
 8009a0a:	f04f 0a00 	mov.w	sl, #0
 8009a0e:	880a      	ldrh	r2, [r1, #0]
 8009a10:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009a14:	fb09 b202 	mla	r2, r9, r2, fp
 8009a18:	4492      	add	sl, r2
 8009a1a:	b2a4      	uxth	r4, r4
 8009a1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009a20:	f84e 4b04 	str.w	r4, [lr], #4
 8009a24:	f851 4b04 	ldr.w	r4, [r1], #4
 8009a28:	f8be 2000 	ldrh.w	r2, [lr]
 8009a2c:	0c24      	lsrs	r4, r4, #16
 8009a2e:	fb09 2404 	mla	r4, r9, r4, r2
 8009a32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009a36:	458c      	cmp	ip, r1
 8009a38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a3c:	d8e7      	bhi.n	8009a0e <__multiply+0xfe>
 8009a3e:	9a01      	ldr	r2, [sp, #4]
 8009a40:	50b4      	str	r4, [r6, r2]
 8009a42:	3604      	adds	r6, #4
 8009a44:	e7a3      	b.n	800998e <__multiply+0x7e>
 8009a46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1a5      	bne.n	800999a <__multiply+0x8a>
 8009a4e:	3f01      	subs	r7, #1
 8009a50:	e7a1      	b.n	8009996 <__multiply+0x86>
 8009a52:	bf00      	nop
 8009a54:	0800b207 	.word	0x0800b207
 8009a58:	0800b218 	.word	0x0800b218

08009a5c <__pow5mult>:
 8009a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a60:	4615      	mov	r5, r2
 8009a62:	f012 0203 	ands.w	r2, r2, #3
 8009a66:	4606      	mov	r6, r0
 8009a68:	460f      	mov	r7, r1
 8009a6a:	d007      	beq.n	8009a7c <__pow5mult+0x20>
 8009a6c:	4c25      	ldr	r4, [pc, #148]	; (8009b04 <__pow5mult+0xa8>)
 8009a6e:	3a01      	subs	r2, #1
 8009a70:	2300      	movs	r3, #0
 8009a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a76:	f7ff fe9b 	bl	80097b0 <__multadd>
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	10ad      	asrs	r5, r5, #2
 8009a7e:	d03d      	beq.n	8009afc <__pow5mult+0xa0>
 8009a80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a82:	b97c      	cbnz	r4, 8009aa4 <__pow5mult+0x48>
 8009a84:	2010      	movs	r0, #16
 8009a86:	f7ff fe1b 	bl	80096c0 <malloc>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	6270      	str	r0, [r6, #36]	; 0x24
 8009a8e:	b928      	cbnz	r0, 8009a9c <__pow5mult+0x40>
 8009a90:	4b1d      	ldr	r3, [pc, #116]	; (8009b08 <__pow5mult+0xac>)
 8009a92:	481e      	ldr	r0, [pc, #120]	; (8009b0c <__pow5mult+0xb0>)
 8009a94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a98:	f000 fbcc 	bl	800a234 <__assert_func>
 8009a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aa0:	6004      	str	r4, [r0, #0]
 8009aa2:	60c4      	str	r4, [r0, #12]
 8009aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009aac:	b94c      	cbnz	r4, 8009ac2 <__pow5mult+0x66>
 8009aae:	f240 2171 	movw	r1, #625	; 0x271
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff16 	bl	80098e4 <__i2b>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009abe:	4604      	mov	r4, r0
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	f04f 0900 	mov.w	r9, #0
 8009ac6:	07eb      	lsls	r3, r5, #31
 8009ac8:	d50a      	bpl.n	8009ae0 <__pow5mult+0x84>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4622      	mov	r2, r4
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff1e 	bl	8009910 <__multiply>
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff fe47 	bl	800976c <_Bfree>
 8009ade:	4647      	mov	r7, r8
 8009ae0:	106d      	asrs	r5, r5, #1
 8009ae2:	d00b      	beq.n	8009afc <__pow5mult+0xa0>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	b938      	cbnz	r0, 8009af8 <__pow5mult+0x9c>
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4621      	mov	r1, r4
 8009aec:	4630      	mov	r0, r6
 8009aee:	f7ff ff0f 	bl	8009910 <__multiply>
 8009af2:	6020      	str	r0, [r4, #0]
 8009af4:	f8c0 9000 	str.w	r9, [r0]
 8009af8:	4604      	mov	r4, r0
 8009afa:	e7e4      	b.n	8009ac6 <__pow5mult+0x6a>
 8009afc:	4638      	mov	r0, r7
 8009afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b02:	bf00      	nop
 8009b04:	0800b368 	.word	0x0800b368
 8009b08:	0800b191 	.word	0x0800b191
 8009b0c:	0800b218 	.word	0x0800b218

08009b10 <__lshift>:
 8009b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	460c      	mov	r4, r1
 8009b16:	6849      	ldr	r1, [r1, #4]
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b1e:	68a3      	ldr	r3, [r4, #8]
 8009b20:	4607      	mov	r7, r0
 8009b22:	4691      	mov	r9, r2
 8009b24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b28:	f108 0601 	add.w	r6, r8, #1
 8009b2c:	42b3      	cmp	r3, r6
 8009b2e:	db0b      	blt.n	8009b48 <__lshift+0x38>
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7ff fddb 	bl	80096ec <_Balloc>
 8009b36:	4605      	mov	r5, r0
 8009b38:	b948      	cbnz	r0, 8009b4e <__lshift+0x3e>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b28      	ldr	r3, [pc, #160]	; (8009be0 <__lshift+0xd0>)
 8009b3e:	4829      	ldr	r0, [pc, #164]	; (8009be4 <__lshift+0xd4>)
 8009b40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b44:	f000 fb76 	bl	800a234 <__assert_func>
 8009b48:	3101      	adds	r1, #1
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	e7ee      	b.n	8009b2c <__lshift+0x1c>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f100 0114 	add.w	r1, r0, #20
 8009b54:	f100 0210 	add.w	r2, r0, #16
 8009b58:	4618      	mov	r0, r3
 8009b5a:	4553      	cmp	r3, sl
 8009b5c:	db33      	blt.n	8009bc6 <__lshift+0xb6>
 8009b5e:	6920      	ldr	r0, [r4, #16]
 8009b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b64:	f104 0314 	add.w	r3, r4, #20
 8009b68:	f019 091f 	ands.w	r9, r9, #31
 8009b6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b74:	d02b      	beq.n	8009bce <__lshift+0xbe>
 8009b76:	f1c9 0e20 	rsb	lr, r9, #32
 8009b7a:	468a      	mov	sl, r1
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	fa00 f009 	lsl.w	r0, r0, r9
 8009b84:	4302      	orrs	r2, r0
 8009b86:	f84a 2b04 	str.w	r2, [sl], #4
 8009b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b8e:	459c      	cmp	ip, r3
 8009b90:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b94:	d8f3      	bhi.n	8009b7e <__lshift+0x6e>
 8009b96:	ebac 0304 	sub.w	r3, ip, r4
 8009b9a:	3b15      	subs	r3, #21
 8009b9c:	f023 0303 	bic.w	r3, r3, #3
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	f104 0015 	add.w	r0, r4, #21
 8009ba6:	4584      	cmp	ip, r0
 8009ba8:	bf38      	it	cc
 8009baa:	2304      	movcc	r3, #4
 8009bac:	50ca      	str	r2, [r1, r3]
 8009bae:	b10a      	cbz	r2, 8009bb4 <__lshift+0xa4>
 8009bb0:	f108 0602 	add.w	r6, r8, #2
 8009bb4:	3e01      	subs	r6, #1
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	612e      	str	r6, [r5, #16]
 8009bba:	4621      	mov	r1, r4
 8009bbc:	f7ff fdd6 	bl	800976c <_Bfree>
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bca:	3301      	adds	r3, #1
 8009bcc:	e7c5      	b.n	8009b5a <__lshift+0x4a>
 8009bce:	3904      	subs	r1, #4
 8009bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bd8:	459c      	cmp	ip, r3
 8009bda:	d8f9      	bhi.n	8009bd0 <__lshift+0xc0>
 8009bdc:	e7ea      	b.n	8009bb4 <__lshift+0xa4>
 8009bde:	bf00      	nop
 8009be0:	0800b207 	.word	0x0800b207
 8009be4:	0800b218 	.word	0x0800b218

08009be8 <__mcmp>:
 8009be8:	b530      	push	{r4, r5, lr}
 8009bea:	6902      	ldr	r2, [r0, #16]
 8009bec:	690c      	ldr	r4, [r1, #16]
 8009bee:	1b12      	subs	r2, r2, r4
 8009bf0:	d10e      	bne.n	8009c10 <__mcmp+0x28>
 8009bf2:	f100 0314 	add.w	r3, r0, #20
 8009bf6:	3114      	adds	r1, #20
 8009bf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009c00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009c04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009c08:	42a5      	cmp	r5, r4
 8009c0a:	d003      	beq.n	8009c14 <__mcmp+0x2c>
 8009c0c:	d305      	bcc.n	8009c1a <__mcmp+0x32>
 8009c0e:	2201      	movs	r2, #1
 8009c10:	4610      	mov	r0, r2
 8009c12:	bd30      	pop	{r4, r5, pc}
 8009c14:	4283      	cmp	r3, r0
 8009c16:	d3f3      	bcc.n	8009c00 <__mcmp+0x18>
 8009c18:	e7fa      	b.n	8009c10 <__mcmp+0x28>
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	e7f7      	b.n	8009c10 <__mcmp+0x28>

08009c20 <__mdiff>:
 8009c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	460c      	mov	r4, r1
 8009c26:	4606      	mov	r6, r0
 8009c28:	4611      	mov	r1, r2
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4617      	mov	r7, r2
 8009c2e:	f7ff ffdb 	bl	8009be8 <__mcmp>
 8009c32:	1e05      	subs	r5, r0, #0
 8009c34:	d110      	bne.n	8009c58 <__mdiff+0x38>
 8009c36:	4629      	mov	r1, r5
 8009c38:	4630      	mov	r0, r6
 8009c3a:	f7ff fd57 	bl	80096ec <_Balloc>
 8009c3e:	b930      	cbnz	r0, 8009c4e <__mdiff+0x2e>
 8009c40:	4b39      	ldr	r3, [pc, #228]	; (8009d28 <__mdiff+0x108>)
 8009c42:	4602      	mov	r2, r0
 8009c44:	f240 2132 	movw	r1, #562	; 0x232
 8009c48:	4838      	ldr	r0, [pc, #224]	; (8009d2c <__mdiff+0x10c>)
 8009c4a:	f000 faf3 	bl	800a234 <__assert_func>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	bfa4      	itt	ge
 8009c5a:	463b      	movge	r3, r7
 8009c5c:	4627      	movge	r7, r4
 8009c5e:	4630      	mov	r0, r6
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	bfa6      	itte	ge
 8009c64:	461c      	movge	r4, r3
 8009c66:	2500      	movge	r5, #0
 8009c68:	2501      	movlt	r5, #1
 8009c6a:	f7ff fd3f 	bl	80096ec <_Balloc>
 8009c6e:	b920      	cbnz	r0, 8009c7a <__mdiff+0x5a>
 8009c70:	4b2d      	ldr	r3, [pc, #180]	; (8009d28 <__mdiff+0x108>)
 8009c72:	4602      	mov	r2, r0
 8009c74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c78:	e7e6      	b.n	8009c48 <__mdiff+0x28>
 8009c7a:	693e      	ldr	r6, [r7, #16]
 8009c7c:	60c5      	str	r5, [r0, #12]
 8009c7e:	6925      	ldr	r5, [r4, #16]
 8009c80:	f107 0114 	add.w	r1, r7, #20
 8009c84:	f104 0914 	add.w	r9, r4, #20
 8009c88:	f100 0e14 	add.w	lr, r0, #20
 8009c8c:	f107 0210 	add.w	r2, r7, #16
 8009c90:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c94:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c98:	46f2      	mov	sl, lr
 8009c9a:	2700      	movs	r7, #0
 8009c9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ca0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ca4:	fa1f f883 	uxth.w	r8, r3
 8009ca8:	fa17 f78b 	uxtah	r7, r7, fp
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	eba7 0808 	sub.w	r8, r7, r8
 8009cb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009cb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009cba:	fa1f f888 	uxth.w	r8, r8
 8009cbe:	141f      	asrs	r7, r3, #16
 8009cc0:	454d      	cmp	r5, r9
 8009cc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009cc6:	f84a 3b04 	str.w	r3, [sl], #4
 8009cca:	d8e7      	bhi.n	8009c9c <__mdiff+0x7c>
 8009ccc:	1b2b      	subs	r3, r5, r4
 8009cce:	3b15      	subs	r3, #21
 8009cd0:	f023 0303 	bic.w	r3, r3, #3
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	3415      	adds	r4, #21
 8009cd8:	42a5      	cmp	r5, r4
 8009cda:	bf38      	it	cc
 8009cdc:	2304      	movcc	r3, #4
 8009cde:	4419      	add	r1, r3
 8009ce0:	4473      	add	r3, lr
 8009ce2:	469e      	mov	lr, r3
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	4565      	cmp	r5, ip
 8009ce8:	d30e      	bcc.n	8009d08 <__mdiff+0xe8>
 8009cea:	f10c 0203 	add.w	r2, ip, #3
 8009cee:	1a52      	subs	r2, r2, r1
 8009cf0:	f022 0203 	bic.w	r2, r2, #3
 8009cf4:	3903      	subs	r1, #3
 8009cf6:	458c      	cmp	ip, r1
 8009cf8:	bf38      	it	cc
 8009cfa:	2200      	movcc	r2, #0
 8009cfc:	441a      	add	r2, r3
 8009cfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009d02:	b17b      	cbz	r3, 8009d24 <__mdiff+0x104>
 8009d04:	6106      	str	r6, [r0, #16]
 8009d06:	e7a5      	b.n	8009c54 <__mdiff+0x34>
 8009d08:	f855 8b04 	ldr.w	r8, [r5], #4
 8009d0c:	fa17 f488 	uxtah	r4, r7, r8
 8009d10:	1422      	asrs	r2, r4, #16
 8009d12:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009d16:	b2a4      	uxth	r4, r4
 8009d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009d1c:	f84e 4b04 	str.w	r4, [lr], #4
 8009d20:	1417      	asrs	r7, r2, #16
 8009d22:	e7e0      	b.n	8009ce6 <__mdiff+0xc6>
 8009d24:	3e01      	subs	r6, #1
 8009d26:	e7ea      	b.n	8009cfe <__mdiff+0xde>
 8009d28:	0800b207 	.word	0x0800b207
 8009d2c:	0800b218 	.word	0x0800b218

08009d30 <__d2b>:
 8009d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d34:	4689      	mov	r9, r1
 8009d36:	2101      	movs	r1, #1
 8009d38:	ec57 6b10 	vmov	r6, r7, d0
 8009d3c:	4690      	mov	r8, r2
 8009d3e:	f7ff fcd5 	bl	80096ec <_Balloc>
 8009d42:	4604      	mov	r4, r0
 8009d44:	b930      	cbnz	r0, 8009d54 <__d2b+0x24>
 8009d46:	4602      	mov	r2, r0
 8009d48:	4b25      	ldr	r3, [pc, #148]	; (8009de0 <__d2b+0xb0>)
 8009d4a:	4826      	ldr	r0, [pc, #152]	; (8009de4 <__d2b+0xb4>)
 8009d4c:	f240 310a 	movw	r1, #778	; 0x30a
 8009d50:	f000 fa70 	bl	800a234 <__assert_func>
 8009d54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009d58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d5c:	bb35      	cbnz	r5, 8009dac <__d2b+0x7c>
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	d028      	beq.n	8009db6 <__d2b+0x86>
 8009d64:	4668      	mov	r0, sp
 8009d66:	9600      	str	r6, [sp, #0]
 8009d68:	f7ff fd8c 	bl	8009884 <__lo0bits>
 8009d6c:	9900      	ldr	r1, [sp, #0]
 8009d6e:	b300      	cbz	r0, 8009db2 <__d2b+0x82>
 8009d70:	9a01      	ldr	r2, [sp, #4]
 8009d72:	f1c0 0320 	rsb	r3, r0, #32
 8009d76:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7a:	430b      	orrs	r3, r1
 8009d7c:	40c2      	lsrs	r2, r0
 8009d7e:	6163      	str	r3, [r4, #20]
 8009d80:	9201      	str	r2, [sp, #4]
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	61a3      	str	r3, [r4, #24]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	bf14      	ite	ne
 8009d8a:	2202      	movne	r2, #2
 8009d8c:	2201      	moveq	r2, #1
 8009d8e:	6122      	str	r2, [r4, #16]
 8009d90:	b1d5      	cbz	r5, 8009dc8 <__d2b+0x98>
 8009d92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d96:	4405      	add	r5, r0
 8009d98:	f8c9 5000 	str.w	r5, [r9]
 8009d9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009da0:	f8c8 0000 	str.w	r0, [r8]
 8009da4:	4620      	mov	r0, r4
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009db0:	e7d5      	b.n	8009d5e <__d2b+0x2e>
 8009db2:	6161      	str	r1, [r4, #20]
 8009db4:	e7e5      	b.n	8009d82 <__d2b+0x52>
 8009db6:	a801      	add	r0, sp, #4
 8009db8:	f7ff fd64 	bl	8009884 <__lo0bits>
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	6163      	str	r3, [r4, #20]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	6122      	str	r2, [r4, #16]
 8009dc4:	3020      	adds	r0, #32
 8009dc6:	e7e3      	b.n	8009d90 <__d2b+0x60>
 8009dc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009dcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009dd0:	f8c9 0000 	str.w	r0, [r9]
 8009dd4:	6918      	ldr	r0, [r3, #16]
 8009dd6:	f7ff fd35 	bl	8009844 <__hi0bits>
 8009dda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009dde:	e7df      	b.n	8009da0 <__d2b+0x70>
 8009de0:	0800b207 	.word	0x0800b207
 8009de4:	0800b218 	.word	0x0800b218

08009de8 <_calloc_r>:
 8009de8:	b513      	push	{r0, r1, r4, lr}
 8009dea:	434a      	muls	r2, r1
 8009dec:	4611      	mov	r1, r2
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	f000 f85a 	bl	8009ea8 <_malloc_r>
 8009df4:	4604      	mov	r4, r0
 8009df6:	b118      	cbz	r0, 8009e00 <_calloc_r+0x18>
 8009df8:	9a01      	ldr	r2, [sp, #4]
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	f7fe f952 	bl	80080a4 <memset>
 8009e00:	4620      	mov	r0, r4
 8009e02:	b002      	add	sp, #8
 8009e04:	bd10      	pop	{r4, pc}
	...

08009e08 <_free_r>:
 8009e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e0a:	2900      	cmp	r1, #0
 8009e0c:	d048      	beq.n	8009ea0 <_free_r+0x98>
 8009e0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e12:	9001      	str	r0, [sp, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f1a1 0404 	sub.w	r4, r1, #4
 8009e1a:	bfb8      	it	lt
 8009e1c:	18e4      	addlt	r4, r4, r3
 8009e1e:	f000 fa65 	bl	800a2ec <__malloc_lock>
 8009e22:	4a20      	ldr	r2, [pc, #128]	; (8009ea4 <_free_r+0x9c>)
 8009e24:	9801      	ldr	r0, [sp, #4]
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	4615      	mov	r5, r2
 8009e2a:	b933      	cbnz	r3, 8009e3a <_free_r+0x32>
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	6014      	str	r4, [r2, #0]
 8009e30:	b003      	add	sp, #12
 8009e32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e36:	f000 ba5f 	b.w	800a2f8 <__malloc_unlock>
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	d90b      	bls.n	8009e56 <_free_r+0x4e>
 8009e3e:	6821      	ldr	r1, [r4, #0]
 8009e40:	1862      	adds	r2, r4, r1
 8009e42:	4293      	cmp	r3, r2
 8009e44:	bf04      	itt	eq
 8009e46:	681a      	ldreq	r2, [r3, #0]
 8009e48:	685b      	ldreq	r3, [r3, #4]
 8009e4a:	6063      	str	r3, [r4, #4]
 8009e4c:	bf04      	itt	eq
 8009e4e:	1852      	addeq	r2, r2, r1
 8009e50:	6022      	streq	r2, [r4, #0]
 8009e52:	602c      	str	r4, [r5, #0]
 8009e54:	e7ec      	b.n	8009e30 <_free_r+0x28>
 8009e56:	461a      	mov	r2, r3
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	b10b      	cbz	r3, 8009e60 <_free_r+0x58>
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	d9fa      	bls.n	8009e56 <_free_r+0x4e>
 8009e60:	6811      	ldr	r1, [r2, #0]
 8009e62:	1855      	adds	r5, r2, r1
 8009e64:	42a5      	cmp	r5, r4
 8009e66:	d10b      	bne.n	8009e80 <_free_r+0x78>
 8009e68:	6824      	ldr	r4, [r4, #0]
 8009e6a:	4421      	add	r1, r4
 8009e6c:	1854      	adds	r4, r2, r1
 8009e6e:	42a3      	cmp	r3, r4
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	d1dd      	bne.n	8009e30 <_free_r+0x28>
 8009e74:	681c      	ldr	r4, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	6053      	str	r3, [r2, #4]
 8009e7a:	4421      	add	r1, r4
 8009e7c:	6011      	str	r1, [r2, #0]
 8009e7e:	e7d7      	b.n	8009e30 <_free_r+0x28>
 8009e80:	d902      	bls.n	8009e88 <_free_r+0x80>
 8009e82:	230c      	movs	r3, #12
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	e7d3      	b.n	8009e30 <_free_r+0x28>
 8009e88:	6825      	ldr	r5, [r4, #0]
 8009e8a:	1961      	adds	r1, r4, r5
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	bf04      	itt	eq
 8009e90:	6819      	ldreq	r1, [r3, #0]
 8009e92:	685b      	ldreq	r3, [r3, #4]
 8009e94:	6063      	str	r3, [r4, #4]
 8009e96:	bf04      	itt	eq
 8009e98:	1949      	addeq	r1, r1, r5
 8009e9a:	6021      	streq	r1, [r4, #0]
 8009e9c:	6054      	str	r4, [r2, #4]
 8009e9e:	e7c7      	b.n	8009e30 <_free_r+0x28>
 8009ea0:	b003      	add	sp, #12
 8009ea2:	bd30      	pop	{r4, r5, pc}
 8009ea4:	20000200 	.word	0x20000200

08009ea8 <_malloc_r>:
 8009ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eaa:	1ccd      	adds	r5, r1, #3
 8009eac:	f025 0503 	bic.w	r5, r5, #3
 8009eb0:	3508      	adds	r5, #8
 8009eb2:	2d0c      	cmp	r5, #12
 8009eb4:	bf38      	it	cc
 8009eb6:	250c      	movcc	r5, #12
 8009eb8:	2d00      	cmp	r5, #0
 8009eba:	4606      	mov	r6, r0
 8009ebc:	db01      	blt.n	8009ec2 <_malloc_r+0x1a>
 8009ebe:	42a9      	cmp	r1, r5
 8009ec0:	d903      	bls.n	8009eca <_malloc_r+0x22>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	6033      	str	r3, [r6, #0]
 8009ec6:	2000      	movs	r0, #0
 8009ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eca:	f000 fa0f 	bl	800a2ec <__malloc_lock>
 8009ece:	4921      	ldr	r1, [pc, #132]	; (8009f54 <_malloc_r+0xac>)
 8009ed0:	680a      	ldr	r2, [r1, #0]
 8009ed2:	4614      	mov	r4, r2
 8009ed4:	b99c      	cbnz	r4, 8009efe <_malloc_r+0x56>
 8009ed6:	4f20      	ldr	r7, [pc, #128]	; (8009f58 <_malloc_r+0xb0>)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	b923      	cbnz	r3, 8009ee6 <_malloc_r+0x3e>
 8009edc:	4621      	mov	r1, r4
 8009ede:	4630      	mov	r0, r6
 8009ee0:	f000 f998 	bl	800a214 <_sbrk_r>
 8009ee4:	6038      	str	r0, [r7, #0]
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f000 f993 	bl	800a214 <_sbrk_r>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	d123      	bne.n	8009f3a <_malloc_r+0x92>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	6033      	str	r3, [r6, #0]
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f000 f9fe 	bl	800a2f8 <__malloc_unlock>
 8009efc:	e7e3      	b.n	8009ec6 <_malloc_r+0x1e>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	1b5b      	subs	r3, r3, r5
 8009f02:	d417      	bmi.n	8009f34 <_malloc_r+0x8c>
 8009f04:	2b0b      	cmp	r3, #11
 8009f06:	d903      	bls.n	8009f10 <_malloc_r+0x68>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	441c      	add	r4, r3
 8009f0c:	6025      	str	r5, [r4, #0]
 8009f0e:	e004      	b.n	8009f1a <_malloc_r+0x72>
 8009f10:	6863      	ldr	r3, [r4, #4]
 8009f12:	42a2      	cmp	r2, r4
 8009f14:	bf0c      	ite	eq
 8009f16:	600b      	streq	r3, [r1, #0]
 8009f18:	6053      	strne	r3, [r2, #4]
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f000 f9ec 	bl	800a2f8 <__malloc_unlock>
 8009f20:	f104 000b 	add.w	r0, r4, #11
 8009f24:	1d23      	adds	r3, r4, #4
 8009f26:	f020 0007 	bic.w	r0, r0, #7
 8009f2a:	1ac2      	subs	r2, r0, r3
 8009f2c:	d0cc      	beq.n	8009ec8 <_malloc_r+0x20>
 8009f2e:	1a1b      	subs	r3, r3, r0
 8009f30:	50a3      	str	r3, [r4, r2]
 8009f32:	e7c9      	b.n	8009ec8 <_malloc_r+0x20>
 8009f34:	4622      	mov	r2, r4
 8009f36:	6864      	ldr	r4, [r4, #4]
 8009f38:	e7cc      	b.n	8009ed4 <_malloc_r+0x2c>
 8009f3a:	1cc4      	adds	r4, r0, #3
 8009f3c:	f024 0403 	bic.w	r4, r4, #3
 8009f40:	42a0      	cmp	r0, r4
 8009f42:	d0e3      	beq.n	8009f0c <_malloc_r+0x64>
 8009f44:	1a21      	subs	r1, r4, r0
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 f964 	bl	800a214 <_sbrk_r>
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d1dd      	bne.n	8009f0c <_malloc_r+0x64>
 8009f50:	e7cf      	b.n	8009ef2 <_malloc_r+0x4a>
 8009f52:	bf00      	nop
 8009f54:	20000200 	.word	0x20000200
 8009f58:	20000204 	.word	0x20000204

08009f5c <__ssputs_r>:
 8009f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	688e      	ldr	r6, [r1, #8]
 8009f62:	429e      	cmp	r6, r3
 8009f64:	4682      	mov	sl, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	4690      	mov	r8, r2
 8009f6a:	461f      	mov	r7, r3
 8009f6c:	d838      	bhi.n	8009fe0 <__ssputs_r+0x84>
 8009f6e:	898a      	ldrh	r2, [r1, #12]
 8009f70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f74:	d032      	beq.n	8009fdc <__ssputs_r+0x80>
 8009f76:	6825      	ldr	r5, [r4, #0]
 8009f78:	6909      	ldr	r1, [r1, #16]
 8009f7a:	eba5 0901 	sub.w	r9, r5, r1
 8009f7e:	6965      	ldr	r5, [r4, #20]
 8009f80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f88:	3301      	adds	r3, #1
 8009f8a:	444b      	add	r3, r9
 8009f8c:	106d      	asrs	r5, r5, #1
 8009f8e:	429d      	cmp	r5, r3
 8009f90:	bf38      	it	cc
 8009f92:	461d      	movcc	r5, r3
 8009f94:	0553      	lsls	r3, r2, #21
 8009f96:	d531      	bpl.n	8009ffc <__ssputs_r+0xa0>
 8009f98:	4629      	mov	r1, r5
 8009f9a:	f7ff ff85 	bl	8009ea8 <_malloc_r>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	b950      	cbnz	r0, 8009fb8 <__ssputs_r+0x5c>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	f8ca 3000 	str.w	r3, [sl]
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fae:	81a3      	strh	r3, [r4, #12]
 8009fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb8:	6921      	ldr	r1, [r4, #16]
 8009fba:	464a      	mov	r2, r9
 8009fbc:	f7ff fb88 	bl	80096d0 <memcpy>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fca:	81a3      	strh	r3, [r4, #12]
 8009fcc:	6126      	str	r6, [r4, #16]
 8009fce:	6165      	str	r5, [r4, #20]
 8009fd0:	444e      	add	r6, r9
 8009fd2:	eba5 0509 	sub.w	r5, r5, r9
 8009fd6:	6026      	str	r6, [r4, #0]
 8009fd8:	60a5      	str	r5, [r4, #8]
 8009fda:	463e      	mov	r6, r7
 8009fdc:	42be      	cmp	r6, r7
 8009fde:	d900      	bls.n	8009fe2 <__ssputs_r+0x86>
 8009fe0:	463e      	mov	r6, r7
 8009fe2:	4632      	mov	r2, r6
 8009fe4:	6820      	ldr	r0, [r4, #0]
 8009fe6:	4641      	mov	r1, r8
 8009fe8:	f000 f966 	bl	800a2b8 <memmove>
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	6822      	ldr	r2, [r4, #0]
 8009ff0:	1b9b      	subs	r3, r3, r6
 8009ff2:	4432      	add	r2, r6
 8009ff4:	60a3      	str	r3, [r4, #8]
 8009ff6:	6022      	str	r2, [r4, #0]
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	e7db      	b.n	8009fb4 <__ssputs_r+0x58>
 8009ffc:	462a      	mov	r2, r5
 8009ffe:	f000 f981 	bl	800a304 <_realloc_r>
 800a002:	4606      	mov	r6, r0
 800a004:	2800      	cmp	r0, #0
 800a006:	d1e1      	bne.n	8009fcc <__ssputs_r+0x70>
 800a008:	6921      	ldr	r1, [r4, #16]
 800a00a:	4650      	mov	r0, sl
 800a00c:	f7ff fefc 	bl	8009e08 <_free_r>
 800a010:	e7c7      	b.n	8009fa2 <__ssputs_r+0x46>
	...

0800a014 <_svfiprintf_r>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	4698      	mov	r8, r3
 800a01a:	898b      	ldrh	r3, [r1, #12]
 800a01c:	061b      	lsls	r3, r3, #24
 800a01e:	b09d      	sub	sp, #116	; 0x74
 800a020:	4607      	mov	r7, r0
 800a022:	460d      	mov	r5, r1
 800a024:	4614      	mov	r4, r2
 800a026:	d50e      	bpl.n	800a046 <_svfiprintf_r+0x32>
 800a028:	690b      	ldr	r3, [r1, #16]
 800a02a:	b963      	cbnz	r3, 800a046 <_svfiprintf_r+0x32>
 800a02c:	2140      	movs	r1, #64	; 0x40
 800a02e:	f7ff ff3b 	bl	8009ea8 <_malloc_r>
 800a032:	6028      	str	r0, [r5, #0]
 800a034:	6128      	str	r0, [r5, #16]
 800a036:	b920      	cbnz	r0, 800a042 <_svfiprintf_r+0x2e>
 800a038:	230c      	movs	r3, #12
 800a03a:	603b      	str	r3, [r7, #0]
 800a03c:	f04f 30ff 	mov.w	r0, #4294967295
 800a040:	e0d1      	b.n	800a1e6 <_svfiprintf_r+0x1d2>
 800a042:	2340      	movs	r3, #64	; 0x40
 800a044:	616b      	str	r3, [r5, #20]
 800a046:	2300      	movs	r3, #0
 800a048:	9309      	str	r3, [sp, #36]	; 0x24
 800a04a:	2320      	movs	r3, #32
 800a04c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a050:	f8cd 800c 	str.w	r8, [sp, #12]
 800a054:	2330      	movs	r3, #48	; 0x30
 800a056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a200 <_svfiprintf_r+0x1ec>
 800a05a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05e:	f04f 0901 	mov.w	r9, #1
 800a062:	4623      	mov	r3, r4
 800a064:	469a      	mov	sl, r3
 800a066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a06a:	b10a      	cbz	r2, 800a070 <_svfiprintf_r+0x5c>
 800a06c:	2a25      	cmp	r2, #37	; 0x25
 800a06e:	d1f9      	bne.n	800a064 <_svfiprintf_r+0x50>
 800a070:	ebba 0b04 	subs.w	fp, sl, r4
 800a074:	d00b      	beq.n	800a08e <_svfiprintf_r+0x7a>
 800a076:	465b      	mov	r3, fp
 800a078:	4622      	mov	r2, r4
 800a07a:	4629      	mov	r1, r5
 800a07c:	4638      	mov	r0, r7
 800a07e:	f7ff ff6d 	bl	8009f5c <__ssputs_r>
 800a082:	3001      	adds	r0, #1
 800a084:	f000 80aa 	beq.w	800a1dc <_svfiprintf_r+0x1c8>
 800a088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a08a:	445a      	add	r2, fp
 800a08c:	9209      	str	r2, [sp, #36]	; 0x24
 800a08e:	f89a 3000 	ldrb.w	r3, [sl]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80a2 	beq.w	800a1dc <_svfiprintf_r+0x1c8>
 800a098:	2300      	movs	r3, #0
 800a09a:	f04f 32ff 	mov.w	r2, #4294967295
 800a09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a2:	f10a 0a01 	add.w	sl, sl, #1
 800a0a6:	9304      	str	r3, [sp, #16]
 800a0a8:	9307      	str	r3, [sp, #28]
 800a0aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ae:	931a      	str	r3, [sp, #104]	; 0x68
 800a0b0:	4654      	mov	r4, sl
 800a0b2:	2205      	movs	r2, #5
 800a0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b8:	4851      	ldr	r0, [pc, #324]	; (800a200 <_svfiprintf_r+0x1ec>)
 800a0ba:	f7f6 f891 	bl	80001e0 <memchr>
 800a0be:	9a04      	ldr	r2, [sp, #16]
 800a0c0:	b9d8      	cbnz	r0, 800a0fa <_svfiprintf_r+0xe6>
 800a0c2:	06d0      	lsls	r0, r2, #27
 800a0c4:	bf44      	itt	mi
 800a0c6:	2320      	movmi	r3, #32
 800a0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0cc:	0711      	lsls	r1, r2, #28
 800a0ce:	bf44      	itt	mi
 800a0d0:	232b      	movmi	r3, #43	; 0x2b
 800a0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0da:	2b2a      	cmp	r3, #42	; 0x2a
 800a0dc:	d015      	beq.n	800a10a <_svfiprintf_r+0xf6>
 800a0de:	9a07      	ldr	r2, [sp, #28]
 800a0e0:	4654      	mov	r4, sl
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	f04f 0c0a 	mov.w	ip, #10
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ee:	3b30      	subs	r3, #48	; 0x30
 800a0f0:	2b09      	cmp	r3, #9
 800a0f2:	d94e      	bls.n	800a192 <_svfiprintf_r+0x17e>
 800a0f4:	b1b0      	cbz	r0, 800a124 <_svfiprintf_r+0x110>
 800a0f6:	9207      	str	r2, [sp, #28]
 800a0f8:	e014      	b.n	800a124 <_svfiprintf_r+0x110>
 800a0fa:	eba0 0308 	sub.w	r3, r0, r8
 800a0fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a102:	4313      	orrs	r3, r2
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	46a2      	mov	sl, r4
 800a108:	e7d2      	b.n	800a0b0 <_svfiprintf_r+0x9c>
 800a10a:	9b03      	ldr	r3, [sp, #12]
 800a10c:	1d19      	adds	r1, r3, #4
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	9103      	str	r1, [sp, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	bfbb      	ittet	lt
 800a116:	425b      	neglt	r3, r3
 800a118:	f042 0202 	orrlt.w	r2, r2, #2
 800a11c:	9307      	strge	r3, [sp, #28]
 800a11e:	9307      	strlt	r3, [sp, #28]
 800a120:	bfb8      	it	lt
 800a122:	9204      	strlt	r2, [sp, #16]
 800a124:	7823      	ldrb	r3, [r4, #0]
 800a126:	2b2e      	cmp	r3, #46	; 0x2e
 800a128:	d10c      	bne.n	800a144 <_svfiprintf_r+0x130>
 800a12a:	7863      	ldrb	r3, [r4, #1]
 800a12c:	2b2a      	cmp	r3, #42	; 0x2a
 800a12e:	d135      	bne.n	800a19c <_svfiprintf_r+0x188>
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	9203      	str	r2, [sp, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	bfb8      	it	lt
 800a13c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a140:	3402      	adds	r4, #2
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a210 <_svfiprintf_r+0x1fc>
 800a148:	7821      	ldrb	r1, [r4, #0]
 800a14a:	2203      	movs	r2, #3
 800a14c:	4650      	mov	r0, sl
 800a14e:	f7f6 f847 	bl	80001e0 <memchr>
 800a152:	b140      	cbz	r0, 800a166 <_svfiprintf_r+0x152>
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	eba0 000a 	sub.w	r0, r0, sl
 800a15a:	fa03 f000 	lsl.w	r0, r3, r0
 800a15e:	9b04      	ldr	r3, [sp, #16]
 800a160:	4303      	orrs	r3, r0
 800a162:	3401      	adds	r4, #1
 800a164:	9304      	str	r3, [sp, #16]
 800a166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a16a:	4826      	ldr	r0, [pc, #152]	; (800a204 <_svfiprintf_r+0x1f0>)
 800a16c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a170:	2206      	movs	r2, #6
 800a172:	f7f6 f835 	bl	80001e0 <memchr>
 800a176:	2800      	cmp	r0, #0
 800a178:	d038      	beq.n	800a1ec <_svfiprintf_r+0x1d8>
 800a17a:	4b23      	ldr	r3, [pc, #140]	; (800a208 <_svfiprintf_r+0x1f4>)
 800a17c:	bb1b      	cbnz	r3, 800a1c6 <_svfiprintf_r+0x1b2>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	3307      	adds	r3, #7
 800a182:	f023 0307 	bic.w	r3, r3, #7
 800a186:	3308      	adds	r3, #8
 800a188:	9303      	str	r3, [sp, #12]
 800a18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18c:	4433      	add	r3, r6
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	e767      	b.n	800a062 <_svfiprintf_r+0x4e>
 800a192:	fb0c 3202 	mla	r2, ip, r2, r3
 800a196:	460c      	mov	r4, r1
 800a198:	2001      	movs	r0, #1
 800a19a:	e7a5      	b.n	800a0e8 <_svfiprintf_r+0xd4>
 800a19c:	2300      	movs	r3, #0
 800a19e:	3401      	adds	r4, #1
 800a1a0:	9305      	str	r3, [sp, #20]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	f04f 0c0a 	mov.w	ip, #10
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ae:	3a30      	subs	r2, #48	; 0x30
 800a1b0:	2a09      	cmp	r2, #9
 800a1b2:	d903      	bls.n	800a1bc <_svfiprintf_r+0x1a8>
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d0c5      	beq.n	800a144 <_svfiprintf_r+0x130>
 800a1b8:	9105      	str	r1, [sp, #20]
 800a1ba:	e7c3      	b.n	800a144 <_svfiprintf_r+0x130>
 800a1bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e7f0      	b.n	800a1a8 <_svfiprintf_r+0x194>
 800a1c6:	ab03      	add	r3, sp, #12
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4b0f      	ldr	r3, [pc, #60]	; (800a20c <_svfiprintf_r+0x1f8>)
 800a1ce:	a904      	add	r1, sp, #16
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7fe f80f 	bl	80081f4 <_printf_float>
 800a1d6:	1c42      	adds	r2, r0, #1
 800a1d8:	4606      	mov	r6, r0
 800a1da:	d1d6      	bne.n	800a18a <_svfiprintf_r+0x176>
 800a1dc:	89ab      	ldrh	r3, [r5, #12]
 800a1de:	065b      	lsls	r3, r3, #25
 800a1e0:	f53f af2c 	bmi.w	800a03c <_svfiprintf_r+0x28>
 800a1e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1e6:	b01d      	add	sp, #116	; 0x74
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	ab03      	add	r3, sp, #12
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	462a      	mov	r2, r5
 800a1f2:	4b06      	ldr	r3, [pc, #24]	; (800a20c <_svfiprintf_r+0x1f8>)
 800a1f4:	a904      	add	r1, sp, #16
 800a1f6:	4638      	mov	r0, r7
 800a1f8:	f7fe faa0 	bl	800873c <_printf_i>
 800a1fc:	e7eb      	b.n	800a1d6 <_svfiprintf_r+0x1c2>
 800a1fe:	bf00      	nop
 800a200:	0800b374 	.word	0x0800b374
 800a204:	0800b37e 	.word	0x0800b37e
 800a208:	080081f5 	.word	0x080081f5
 800a20c:	08009f5d 	.word	0x08009f5d
 800a210:	0800b37a 	.word	0x0800b37a

0800a214 <_sbrk_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d06      	ldr	r5, [pc, #24]	; (800a230 <_sbrk_r+0x1c>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4604      	mov	r4, r0
 800a21c:	4608      	mov	r0, r1
 800a21e:	602b      	str	r3, [r5, #0]
 800a220:	f7f9 fe08 	bl	8003e34 <_sbrk>
 800a224:	1c43      	adds	r3, r0, #1
 800a226:	d102      	bne.n	800a22e <_sbrk_r+0x1a>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	b103      	cbz	r3, 800a22e <_sbrk_r+0x1a>
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	bd38      	pop	{r3, r4, r5, pc}
 800a230:	20000494 	.word	0x20000494

0800a234 <__assert_func>:
 800a234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a236:	4614      	mov	r4, r2
 800a238:	461a      	mov	r2, r3
 800a23a:	4b09      	ldr	r3, [pc, #36]	; (800a260 <__assert_func+0x2c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4605      	mov	r5, r0
 800a240:	68d8      	ldr	r0, [r3, #12]
 800a242:	b14c      	cbz	r4, 800a258 <__assert_func+0x24>
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <__assert_func+0x30>)
 800a246:	9100      	str	r1, [sp, #0]
 800a248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a24c:	4906      	ldr	r1, [pc, #24]	; (800a268 <__assert_func+0x34>)
 800a24e:	462b      	mov	r3, r5
 800a250:	f000 f80e 	bl	800a270 <fiprintf>
 800a254:	f000 faa4 	bl	800a7a0 <abort>
 800a258:	4b04      	ldr	r3, [pc, #16]	; (800a26c <__assert_func+0x38>)
 800a25a:	461c      	mov	r4, r3
 800a25c:	e7f3      	b.n	800a246 <__assert_func+0x12>
 800a25e:	bf00      	nop
 800a260:	20000010 	.word	0x20000010
 800a264:	0800b385 	.word	0x0800b385
 800a268:	0800b392 	.word	0x0800b392
 800a26c:	0800b3c0 	.word	0x0800b3c0

0800a270 <fiprintf>:
 800a270:	b40e      	push	{r1, r2, r3}
 800a272:	b503      	push	{r0, r1, lr}
 800a274:	4601      	mov	r1, r0
 800a276:	ab03      	add	r3, sp, #12
 800a278:	4805      	ldr	r0, [pc, #20]	; (800a290 <fiprintf+0x20>)
 800a27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27e:	6800      	ldr	r0, [r0, #0]
 800a280:	9301      	str	r3, [sp, #4]
 800a282:	f000 f88f 	bl	800a3a4 <_vfiprintf_r>
 800a286:	b002      	add	sp, #8
 800a288:	f85d eb04 	ldr.w	lr, [sp], #4
 800a28c:	b003      	add	sp, #12
 800a28e:	4770      	bx	lr
 800a290:	20000010 	.word	0x20000010

0800a294 <__ascii_mbtowc>:
 800a294:	b082      	sub	sp, #8
 800a296:	b901      	cbnz	r1, 800a29a <__ascii_mbtowc+0x6>
 800a298:	a901      	add	r1, sp, #4
 800a29a:	b142      	cbz	r2, 800a2ae <__ascii_mbtowc+0x1a>
 800a29c:	b14b      	cbz	r3, 800a2b2 <__ascii_mbtowc+0x1e>
 800a29e:	7813      	ldrb	r3, [r2, #0]
 800a2a0:	600b      	str	r3, [r1, #0]
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	1e10      	subs	r0, r2, #0
 800a2a6:	bf18      	it	ne
 800a2a8:	2001      	movne	r0, #1
 800a2aa:	b002      	add	sp, #8
 800a2ac:	4770      	bx	lr
 800a2ae:	4610      	mov	r0, r2
 800a2b0:	e7fb      	b.n	800a2aa <__ascii_mbtowc+0x16>
 800a2b2:	f06f 0001 	mvn.w	r0, #1
 800a2b6:	e7f8      	b.n	800a2aa <__ascii_mbtowc+0x16>

0800a2b8 <memmove>:
 800a2b8:	4288      	cmp	r0, r1
 800a2ba:	b510      	push	{r4, lr}
 800a2bc:	eb01 0402 	add.w	r4, r1, r2
 800a2c0:	d902      	bls.n	800a2c8 <memmove+0x10>
 800a2c2:	4284      	cmp	r4, r0
 800a2c4:	4623      	mov	r3, r4
 800a2c6:	d807      	bhi.n	800a2d8 <memmove+0x20>
 800a2c8:	1e43      	subs	r3, r0, #1
 800a2ca:	42a1      	cmp	r1, r4
 800a2cc:	d008      	beq.n	800a2e0 <memmove+0x28>
 800a2ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2d6:	e7f8      	b.n	800a2ca <memmove+0x12>
 800a2d8:	4402      	add	r2, r0
 800a2da:	4601      	mov	r1, r0
 800a2dc:	428a      	cmp	r2, r1
 800a2de:	d100      	bne.n	800a2e2 <memmove+0x2a>
 800a2e0:	bd10      	pop	{r4, pc}
 800a2e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ea:	e7f7      	b.n	800a2dc <memmove+0x24>

0800a2ec <__malloc_lock>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__malloc_lock+0x8>)
 800a2ee:	f000 bc17 	b.w	800ab20 <__retarget_lock_acquire_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	2000049c 	.word	0x2000049c

0800a2f8 <__malloc_unlock>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__malloc_unlock+0x8>)
 800a2fa:	f000 bc12 	b.w	800ab22 <__retarget_lock_release_recursive>
 800a2fe:	bf00      	nop
 800a300:	2000049c 	.word	0x2000049c

0800a304 <_realloc_r>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	4607      	mov	r7, r0
 800a308:	4614      	mov	r4, r2
 800a30a:	460e      	mov	r6, r1
 800a30c:	b921      	cbnz	r1, 800a318 <_realloc_r+0x14>
 800a30e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a312:	4611      	mov	r1, r2
 800a314:	f7ff bdc8 	b.w	8009ea8 <_malloc_r>
 800a318:	b922      	cbnz	r2, 800a324 <_realloc_r+0x20>
 800a31a:	f7ff fd75 	bl	8009e08 <_free_r>
 800a31e:	4625      	mov	r5, r4
 800a320:	4628      	mov	r0, r5
 800a322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a324:	f000 fc62 	bl	800abec <_malloc_usable_size_r>
 800a328:	42a0      	cmp	r0, r4
 800a32a:	d20f      	bcs.n	800a34c <_realloc_r+0x48>
 800a32c:	4621      	mov	r1, r4
 800a32e:	4638      	mov	r0, r7
 800a330:	f7ff fdba 	bl	8009ea8 <_malloc_r>
 800a334:	4605      	mov	r5, r0
 800a336:	2800      	cmp	r0, #0
 800a338:	d0f2      	beq.n	800a320 <_realloc_r+0x1c>
 800a33a:	4631      	mov	r1, r6
 800a33c:	4622      	mov	r2, r4
 800a33e:	f7ff f9c7 	bl	80096d0 <memcpy>
 800a342:	4631      	mov	r1, r6
 800a344:	4638      	mov	r0, r7
 800a346:	f7ff fd5f 	bl	8009e08 <_free_r>
 800a34a:	e7e9      	b.n	800a320 <_realloc_r+0x1c>
 800a34c:	4635      	mov	r5, r6
 800a34e:	e7e7      	b.n	800a320 <_realloc_r+0x1c>

0800a350 <__sfputc_r>:
 800a350:	6893      	ldr	r3, [r2, #8]
 800a352:	3b01      	subs	r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	b410      	push	{r4}
 800a358:	6093      	str	r3, [r2, #8]
 800a35a:	da08      	bge.n	800a36e <__sfputc_r+0x1e>
 800a35c:	6994      	ldr	r4, [r2, #24]
 800a35e:	42a3      	cmp	r3, r4
 800a360:	db01      	blt.n	800a366 <__sfputc_r+0x16>
 800a362:	290a      	cmp	r1, #10
 800a364:	d103      	bne.n	800a36e <__sfputc_r+0x1e>
 800a366:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a36a:	f000 b94b 	b.w	800a604 <__swbuf_r>
 800a36e:	6813      	ldr	r3, [r2, #0]
 800a370:	1c58      	adds	r0, r3, #1
 800a372:	6010      	str	r0, [r2, #0]
 800a374:	7019      	strb	r1, [r3, #0]
 800a376:	4608      	mov	r0, r1
 800a378:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <__sfputs_r>:
 800a37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a380:	4606      	mov	r6, r0
 800a382:	460f      	mov	r7, r1
 800a384:	4614      	mov	r4, r2
 800a386:	18d5      	adds	r5, r2, r3
 800a388:	42ac      	cmp	r4, r5
 800a38a:	d101      	bne.n	800a390 <__sfputs_r+0x12>
 800a38c:	2000      	movs	r0, #0
 800a38e:	e007      	b.n	800a3a0 <__sfputs_r+0x22>
 800a390:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a394:	463a      	mov	r2, r7
 800a396:	4630      	mov	r0, r6
 800a398:	f7ff ffda 	bl	800a350 <__sfputc_r>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d1f3      	bne.n	800a388 <__sfputs_r+0xa>
 800a3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3a4 <_vfiprintf_r>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	460d      	mov	r5, r1
 800a3aa:	b09d      	sub	sp, #116	; 0x74
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	4698      	mov	r8, r3
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	b118      	cbz	r0, 800a3bc <_vfiprintf_r+0x18>
 800a3b4:	6983      	ldr	r3, [r0, #24]
 800a3b6:	b90b      	cbnz	r3, 800a3bc <_vfiprintf_r+0x18>
 800a3b8:	f000 fb14 	bl	800a9e4 <__sinit>
 800a3bc:	4b89      	ldr	r3, [pc, #548]	; (800a5e4 <_vfiprintf_r+0x240>)
 800a3be:	429d      	cmp	r5, r3
 800a3c0:	d11b      	bne.n	800a3fa <_vfiprintf_r+0x56>
 800a3c2:	6875      	ldr	r5, [r6, #4]
 800a3c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3c6:	07d9      	lsls	r1, r3, #31
 800a3c8:	d405      	bmi.n	800a3d6 <_vfiprintf_r+0x32>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	059a      	lsls	r2, r3, #22
 800a3ce:	d402      	bmi.n	800a3d6 <_vfiprintf_r+0x32>
 800a3d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3d2:	f000 fba5 	bl	800ab20 <__retarget_lock_acquire_recursive>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	071b      	lsls	r3, r3, #28
 800a3da:	d501      	bpl.n	800a3e0 <_vfiprintf_r+0x3c>
 800a3dc:	692b      	ldr	r3, [r5, #16]
 800a3de:	b9eb      	cbnz	r3, 800a41c <_vfiprintf_r+0x78>
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f96e 	bl	800a6c4 <__swsetup_r>
 800a3e8:	b1c0      	cbz	r0, 800a41c <_vfiprintf_r+0x78>
 800a3ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ec:	07dc      	lsls	r4, r3, #31
 800a3ee:	d50e      	bpl.n	800a40e <_vfiprintf_r+0x6a>
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	b01d      	add	sp, #116	; 0x74
 800a3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fa:	4b7b      	ldr	r3, [pc, #492]	; (800a5e8 <_vfiprintf_r+0x244>)
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	d101      	bne.n	800a404 <_vfiprintf_r+0x60>
 800a400:	68b5      	ldr	r5, [r6, #8]
 800a402:	e7df      	b.n	800a3c4 <_vfiprintf_r+0x20>
 800a404:	4b79      	ldr	r3, [pc, #484]	; (800a5ec <_vfiprintf_r+0x248>)
 800a406:	429d      	cmp	r5, r3
 800a408:	bf08      	it	eq
 800a40a:	68f5      	ldreq	r5, [r6, #12]
 800a40c:	e7da      	b.n	800a3c4 <_vfiprintf_r+0x20>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	0598      	lsls	r0, r3, #22
 800a412:	d4ed      	bmi.n	800a3f0 <_vfiprintf_r+0x4c>
 800a414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a416:	f000 fb84 	bl	800ab22 <__retarget_lock_release_recursive>
 800a41a:	e7e9      	b.n	800a3f0 <_vfiprintf_r+0x4c>
 800a41c:	2300      	movs	r3, #0
 800a41e:	9309      	str	r3, [sp, #36]	; 0x24
 800a420:	2320      	movs	r3, #32
 800a422:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a426:	f8cd 800c 	str.w	r8, [sp, #12]
 800a42a:	2330      	movs	r3, #48	; 0x30
 800a42c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5f0 <_vfiprintf_r+0x24c>
 800a430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a434:	f04f 0901 	mov.w	r9, #1
 800a438:	4623      	mov	r3, r4
 800a43a:	469a      	mov	sl, r3
 800a43c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a440:	b10a      	cbz	r2, 800a446 <_vfiprintf_r+0xa2>
 800a442:	2a25      	cmp	r2, #37	; 0x25
 800a444:	d1f9      	bne.n	800a43a <_vfiprintf_r+0x96>
 800a446:	ebba 0b04 	subs.w	fp, sl, r4
 800a44a:	d00b      	beq.n	800a464 <_vfiprintf_r+0xc0>
 800a44c:	465b      	mov	r3, fp
 800a44e:	4622      	mov	r2, r4
 800a450:	4629      	mov	r1, r5
 800a452:	4630      	mov	r0, r6
 800a454:	f7ff ff93 	bl	800a37e <__sfputs_r>
 800a458:	3001      	adds	r0, #1
 800a45a:	f000 80aa 	beq.w	800a5b2 <_vfiprintf_r+0x20e>
 800a45e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a460:	445a      	add	r2, fp
 800a462:	9209      	str	r2, [sp, #36]	; 0x24
 800a464:	f89a 3000 	ldrb.w	r3, [sl]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 80a2 	beq.w	800a5b2 <_vfiprintf_r+0x20e>
 800a46e:	2300      	movs	r3, #0
 800a470:	f04f 32ff 	mov.w	r2, #4294967295
 800a474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a478:	f10a 0a01 	add.w	sl, sl, #1
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	9307      	str	r3, [sp, #28]
 800a480:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a484:	931a      	str	r3, [sp, #104]	; 0x68
 800a486:	4654      	mov	r4, sl
 800a488:	2205      	movs	r2, #5
 800a48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a48e:	4858      	ldr	r0, [pc, #352]	; (800a5f0 <_vfiprintf_r+0x24c>)
 800a490:	f7f5 fea6 	bl	80001e0 <memchr>
 800a494:	9a04      	ldr	r2, [sp, #16]
 800a496:	b9d8      	cbnz	r0, 800a4d0 <_vfiprintf_r+0x12c>
 800a498:	06d1      	lsls	r1, r2, #27
 800a49a:	bf44      	itt	mi
 800a49c:	2320      	movmi	r3, #32
 800a49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4a2:	0713      	lsls	r3, r2, #28
 800a4a4:	bf44      	itt	mi
 800a4a6:	232b      	movmi	r3, #43	; 0x2b
 800a4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b2:	d015      	beq.n	800a4e0 <_vfiprintf_r+0x13c>
 800a4b4:	9a07      	ldr	r2, [sp, #28]
 800a4b6:	4654      	mov	r4, sl
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	f04f 0c0a 	mov.w	ip, #10
 800a4be:	4621      	mov	r1, r4
 800a4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4c4:	3b30      	subs	r3, #48	; 0x30
 800a4c6:	2b09      	cmp	r3, #9
 800a4c8:	d94e      	bls.n	800a568 <_vfiprintf_r+0x1c4>
 800a4ca:	b1b0      	cbz	r0, 800a4fa <_vfiprintf_r+0x156>
 800a4cc:	9207      	str	r2, [sp, #28]
 800a4ce:	e014      	b.n	800a4fa <_vfiprintf_r+0x156>
 800a4d0:	eba0 0308 	sub.w	r3, r0, r8
 800a4d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	9304      	str	r3, [sp, #16]
 800a4dc:	46a2      	mov	sl, r4
 800a4de:	e7d2      	b.n	800a486 <_vfiprintf_r+0xe2>
 800a4e0:	9b03      	ldr	r3, [sp, #12]
 800a4e2:	1d19      	adds	r1, r3, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	9103      	str	r1, [sp, #12]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	bfbb      	ittet	lt
 800a4ec:	425b      	neglt	r3, r3
 800a4ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a4f2:	9307      	strge	r3, [sp, #28]
 800a4f4:	9307      	strlt	r3, [sp, #28]
 800a4f6:	bfb8      	it	lt
 800a4f8:	9204      	strlt	r2, [sp, #16]
 800a4fa:	7823      	ldrb	r3, [r4, #0]
 800a4fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a4fe:	d10c      	bne.n	800a51a <_vfiprintf_r+0x176>
 800a500:	7863      	ldrb	r3, [r4, #1]
 800a502:	2b2a      	cmp	r3, #42	; 0x2a
 800a504:	d135      	bne.n	800a572 <_vfiprintf_r+0x1ce>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	1d1a      	adds	r2, r3, #4
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	9203      	str	r2, [sp, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bfb8      	it	lt
 800a512:	f04f 33ff 	movlt.w	r3, #4294967295
 800a516:	3402      	adds	r4, #2
 800a518:	9305      	str	r3, [sp, #20]
 800a51a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a600 <_vfiprintf_r+0x25c>
 800a51e:	7821      	ldrb	r1, [r4, #0]
 800a520:	2203      	movs	r2, #3
 800a522:	4650      	mov	r0, sl
 800a524:	f7f5 fe5c 	bl	80001e0 <memchr>
 800a528:	b140      	cbz	r0, 800a53c <_vfiprintf_r+0x198>
 800a52a:	2340      	movs	r3, #64	; 0x40
 800a52c:	eba0 000a 	sub.w	r0, r0, sl
 800a530:	fa03 f000 	lsl.w	r0, r3, r0
 800a534:	9b04      	ldr	r3, [sp, #16]
 800a536:	4303      	orrs	r3, r0
 800a538:	3401      	adds	r4, #1
 800a53a:	9304      	str	r3, [sp, #16]
 800a53c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a540:	482c      	ldr	r0, [pc, #176]	; (800a5f4 <_vfiprintf_r+0x250>)
 800a542:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a546:	2206      	movs	r2, #6
 800a548:	f7f5 fe4a 	bl	80001e0 <memchr>
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d03f      	beq.n	800a5d0 <_vfiprintf_r+0x22c>
 800a550:	4b29      	ldr	r3, [pc, #164]	; (800a5f8 <_vfiprintf_r+0x254>)
 800a552:	bb1b      	cbnz	r3, 800a59c <_vfiprintf_r+0x1f8>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	3307      	adds	r3, #7
 800a558:	f023 0307 	bic.w	r3, r3, #7
 800a55c:	3308      	adds	r3, #8
 800a55e:	9303      	str	r3, [sp, #12]
 800a560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a562:	443b      	add	r3, r7
 800a564:	9309      	str	r3, [sp, #36]	; 0x24
 800a566:	e767      	b.n	800a438 <_vfiprintf_r+0x94>
 800a568:	fb0c 3202 	mla	r2, ip, r2, r3
 800a56c:	460c      	mov	r4, r1
 800a56e:	2001      	movs	r0, #1
 800a570:	e7a5      	b.n	800a4be <_vfiprintf_r+0x11a>
 800a572:	2300      	movs	r3, #0
 800a574:	3401      	adds	r4, #1
 800a576:	9305      	str	r3, [sp, #20]
 800a578:	4619      	mov	r1, r3
 800a57a:	f04f 0c0a 	mov.w	ip, #10
 800a57e:	4620      	mov	r0, r4
 800a580:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a584:	3a30      	subs	r2, #48	; 0x30
 800a586:	2a09      	cmp	r2, #9
 800a588:	d903      	bls.n	800a592 <_vfiprintf_r+0x1ee>
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d0c5      	beq.n	800a51a <_vfiprintf_r+0x176>
 800a58e:	9105      	str	r1, [sp, #20]
 800a590:	e7c3      	b.n	800a51a <_vfiprintf_r+0x176>
 800a592:	fb0c 2101 	mla	r1, ip, r1, r2
 800a596:	4604      	mov	r4, r0
 800a598:	2301      	movs	r3, #1
 800a59a:	e7f0      	b.n	800a57e <_vfiprintf_r+0x1da>
 800a59c:	ab03      	add	r3, sp, #12
 800a59e:	9300      	str	r3, [sp, #0]
 800a5a0:	462a      	mov	r2, r5
 800a5a2:	4b16      	ldr	r3, [pc, #88]	; (800a5fc <_vfiprintf_r+0x258>)
 800a5a4:	a904      	add	r1, sp, #16
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7fd fe24 	bl	80081f4 <_printf_float>
 800a5ac:	4607      	mov	r7, r0
 800a5ae:	1c78      	adds	r0, r7, #1
 800a5b0:	d1d6      	bne.n	800a560 <_vfiprintf_r+0x1bc>
 800a5b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5b4:	07d9      	lsls	r1, r3, #31
 800a5b6:	d405      	bmi.n	800a5c4 <_vfiprintf_r+0x220>
 800a5b8:	89ab      	ldrh	r3, [r5, #12]
 800a5ba:	059a      	lsls	r2, r3, #22
 800a5bc:	d402      	bmi.n	800a5c4 <_vfiprintf_r+0x220>
 800a5be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5c0:	f000 faaf 	bl	800ab22 <__retarget_lock_release_recursive>
 800a5c4:	89ab      	ldrh	r3, [r5, #12]
 800a5c6:	065b      	lsls	r3, r3, #25
 800a5c8:	f53f af12 	bmi.w	800a3f0 <_vfiprintf_r+0x4c>
 800a5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ce:	e711      	b.n	800a3f4 <_vfiprintf_r+0x50>
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	4b09      	ldr	r3, [pc, #36]	; (800a5fc <_vfiprintf_r+0x258>)
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fe f8ae 	bl	800873c <_printf_i>
 800a5e0:	e7e4      	b.n	800a5ac <_vfiprintf_r+0x208>
 800a5e2:	bf00      	nop
 800a5e4:	0800b4ec 	.word	0x0800b4ec
 800a5e8:	0800b50c 	.word	0x0800b50c
 800a5ec:	0800b4cc 	.word	0x0800b4cc
 800a5f0:	0800b374 	.word	0x0800b374
 800a5f4:	0800b37e 	.word	0x0800b37e
 800a5f8:	080081f5 	.word	0x080081f5
 800a5fc:	0800a37f 	.word	0x0800a37f
 800a600:	0800b37a 	.word	0x0800b37a

0800a604 <__swbuf_r>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	460e      	mov	r6, r1
 800a608:	4614      	mov	r4, r2
 800a60a:	4605      	mov	r5, r0
 800a60c:	b118      	cbz	r0, 800a616 <__swbuf_r+0x12>
 800a60e:	6983      	ldr	r3, [r0, #24]
 800a610:	b90b      	cbnz	r3, 800a616 <__swbuf_r+0x12>
 800a612:	f000 f9e7 	bl	800a9e4 <__sinit>
 800a616:	4b21      	ldr	r3, [pc, #132]	; (800a69c <__swbuf_r+0x98>)
 800a618:	429c      	cmp	r4, r3
 800a61a:	d12b      	bne.n	800a674 <__swbuf_r+0x70>
 800a61c:	686c      	ldr	r4, [r5, #4]
 800a61e:	69a3      	ldr	r3, [r4, #24]
 800a620:	60a3      	str	r3, [r4, #8]
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	071a      	lsls	r2, r3, #28
 800a626:	d52f      	bpl.n	800a688 <__swbuf_r+0x84>
 800a628:	6923      	ldr	r3, [r4, #16]
 800a62a:	b36b      	cbz	r3, 800a688 <__swbuf_r+0x84>
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	6820      	ldr	r0, [r4, #0]
 800a630:	1ac0      	subs	r0, r0, r3
 800a632:	6963      	ldr	r3, [r4, #20]
 800a634:	b2f6      	uxtb	r6, r6
 800a636:	4283      	cmp	r3, r0
 800a638:	4637      	mov	r7, r6
 800a63a:	dc04      	bgt.n	800a646 <__swbuf_r+0x42>
 800a63c:	4621      	mov	r1, r4
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 f93c 	bl	800a8bc <_fflush_r>
 800a644:	bb30      	cbnz	r0, 800a694 <__swbuf_r+0x90>
 800a646:	68a3      	ldr	r3, [r4, #8]
 800a648:	3b01      	subs	r3, #1
 800a64a:	60a3      	str	r3, [r4, #8]
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	6022      	str	r2, [r4, #0]
 800a652:	701e      	strb	r6, [r3, #0]
 800a654:	6963      	ldr	r3, [r4, #20]
 800a656:	3001      	adds	r0, #1
 800a658:	4283      	cmp	r3, r0
 800a65a:	d004      	beq.n	800a666 <__swbuf_r+0x62>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	07db      	lsls	r3, r3, #31
 800a660:	d506      	bpl.n	800a670 <__swbuf_r+0x6c>
 800a662:	2e0a      	cmp	r6, #10
 800a664:	d104      	bne.n	800a670 <__swbuf_r+0x6c>
 800a666:	4621      	mov	r1, r4
 800a668:	4628      	mov	r0, r5
 800a66a:	f000 f927 	bl	800a8bc <_fflush_r>
 800a66e:	b988      	cbnz	r0, 800a694 <__swbuf_r+0x90>
 800a670:	4638      	mov	r0, r7
 800a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a674:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <__swbuf_r+0x9c>)
 800a676:	429c      	cmp	r4, r3
 800a678:	d101      	bne.n	800a67e <__swbuf_r+0x7a>
 800a67a:	68ac      	ldr	r4, [r5, #8]
 800a67c:	e7cf      	b.n	800a61e <__swbuf_r+0x1a>
 800a67e:	4b09      	ldr	r3, [pc, #36]	; (800a6a4 <__swbuf_r+0xa0>)
 800a680:	429c      	cmp	r4, r3
 800a682:	bf08      	it	eq
 800a684:	68ec      	ldreq	r4, [r5, #12]
 800a686:	e7ca      	b.n	800a61e <__swbuf_r+0x1a>
 800a688:	4621      	mov	r1, r4
 800a68a:	4628      	mov	r0, r5
 800a68c:	f000 f81a 	bl	800a6c4 <__swsetup_r>
 800a690:	2800      	cmp	r0, #0
 800a692:	d0cb      	beq.n	800a62c <__swbuf_r+0x28>
 800a694:	f04f 37ff 	mov.w	r7, #4294967295
 800a698:	e7ea      	b.n	800a670 <__swbuf_r+0x6c>
 800a69a:	bf00      	nop
 800a69c:	0800b4ec 	.word	0x0800b4ec
 800a6a0:	0800b50c 	.word	0x0800b50c
 800a6a4:	0800b4cc 	.word	0x0800b4cc

0800a6a8 <__ascii_wctomb>:
 800a6a8:	b149      	cbz	r1, 800a6be <__ascii_wctomb+0x16>
 800a6aa:	2aff      	cmp	r2, #255	; 0xff
 800a6ac:	bf85      	ittet	hi
 800a6ae:	238a      	movhi	r3, #138	; 0x8a
 800a6b0:	6003      	strhi	r3, [r0, #0]
 800a6b2:	700a      	strbls	r2, [r1, #0]
 800a6b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6b8:	bf98      	it	ls
 800a6ba:	2001      	movls	r0, #1
 800a6bc:	4770      	bx	lr
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <__swsetup_r>:
 800a6c4:	4b32      	ldr	r3, [pc, #200]	; (800a790 <__swsetup_r+0xcc>)
 800a6c6:	b570      	push	{r4, r5, r6, lr}
 800a6c8:	681d      	ldr	r5, [r3, #0]
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460c      	mov	r4, r1
 800a6ce:	b125      	cbz	r5, 800a6da <__swsetup_r+0x16>
 800a6d0:	69ab      	ldr	r3, [r5, #24]
 800a6d2:	b913      	cbnz	r3, 800a6da <__swsetup_r+0x16>
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	f000 f985 	bl	800a9e4 <__sinit>
 800a6da:	4b2e      	ldr	r3, [pc, #184]	; (800a794 <__swsetup_r+0xd0>)
 800a6dc:	429c      	cmp	r4, r3
 800a6de:	d10f      	bne.n	800a700 <__swsetup_r+0x3c>
 800a6e0:	686c      	ldr	r4, [r5, #4]
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6e8:	0719      	lsls	r1, r3, #28
 800a6ea:	d42c      	bmi.n	800a746 <__swsetup_r+0x82>
 800a6ec:	06dd      	lsls	r5, r3, #27
 800a6ee:	d411      	bmi.n	800a714 <__swsetup_r+0x50>
 800a6f0:	2309      	movs	r3, #9
 800a6f2:	6033      	str	r3, [r6, #0]
 800a6f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fe:	e03e      	b.n	800a77e <__swsetup_r+0xba>
 800a700:	4b25      	ldr	r3, [pc, #148]	; (800a798 <__swsetup_r+0xd4>)
 800a702:	429c      	cmp	r4, r3
 800a704:	d101      	bne.n	800a70a <__swsetup_r+0x46>
 800a706:	68ac      	ldr	r4, [r5, #8]
 800a708:	e7eb      	b.n	800a6e2 <__swsetup_r+0x1e>
 800a70a:	4b24      	ldr	r3, [pc, #144]	; (800a79c <__swsetup_r+0xd8>)
 800a70c:	429c      	cmp	r4, r3
 800a70e:	bf08      	it	eq
 800a710:	68ec      	ldreq	r4, [r5, #12]
 800a712:	e7e6      	b.n	800a6e2 <__swsetup_r+0x1e>
 800a714:	0758      	lsls	r0, r3, #29
 800a716:	d512      	bpl.n	800a73e <__swsetup_r+0x7a>
 800a718:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a71a:	b141      	cbz	r1, 800a72e <__swsetup_r+0x6a>
 800a71c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a720:	4299      	cmp	r1, r3
 800a722:	d002      	beq.n	800a72a <__swsetup_r+0x66>
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff fb6f 	bl	8009e08 <_free_r>
 800a72a:	2300      	movs	r3, #0
 800a72c:	6363      	str	r3, [r4, #52]	; 0x34
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	2300      	movs	r3, #0
 800a738:	6063      	str	r3, [r4, #4]
 800a73a:	6923      	ldr	r3, [r4, #16]
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f043 0308 	orr.w	r3, r3, #8
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	b94b      	cbnz	r3, 800a75e <__swsetup_r+0x9a>
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a754:	d003      	beq.n	800a75e <__swsetup_r+0x9a>
 800a756:	4621      	mov	r1, r4
 800a758:	4630      	mov	r0, r6
 800a75a:	f000 fa07 	bl	800ab6c <__smakebuf_r>
 800a75e:	89a0      	ldrh	r0, [r4, #12]
 800a760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a764:	f010 0301 	ands.w	r3, r0, #1
 800a768:	d00a      	beq.n	800a780 <__swsetup_r+0xbc>
 800a76a:	2300      	movs	r3, #0
 800a76c:	60a3      	str	r3, [r4, #8]
 800a76e:	6963      	ldr	r3, [r4, #20]
 800a770:	425b      	negs	r3, r3
 800a772:	61a3      	str	r3, [r4, #24]
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	b943      	cbnz	r3, 800a78a <__swsetup_r+0xc6>
 800a778:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a77c:	d1ba      	bne.n	800a6f4 <__swsetup_r+0x30>
 800a77e:	bd70      	pop	{r4, r5, r6, pc}
 800a780:	0781      	lsls	r1, r0, #30
 800a782:	bf58      	it	pl
 800a784:	6963      	ldrpl	r3, [r4, #20]
 800a786:	60a3      	str	r3, [r4, #8]
 800a788:	e7f4      	b.n	800a774 <__swsetup_r+0xb0>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e7f7      	b.n	800a77e <__swsetup_r+0xba>
 800a78e:	bf00      	nop
 800a790:	20000010 	.word	0x20000010
 800a794:	0800b4ec 	.word	0x0800b4ec
 800a798:	0800b50c 	.word	0x0800b50c
 800a79c:	0800b4cc 	.word	0x0800b4cc

0800a7a0 <abort>:
 800a7a0:	b508      	push	{r3, lr}
 800a7a2:	2006      	movs	r0, #6
 800a7a4:	f000 fa52 	bl	800ac4c <raise>
 800a7a8:	2001      	movs	r0, #1
 800a7aa:	f7f9 facb 	bl	8003d44 <_exit>
	...

0800a7b0 <__sflush_r>:
 800a7b0:	898a      	ldrh	r2, [r1, #12]
 800a7b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b6:	4605      	mov	r5, r0
 800a7b8:	0710      	lsls	r0, r2, #28
 800a7ba:	460c      	mov	r4, r1
 800a7bc:	d458      	bmi.n	800a870 <__sflush_r+0xc0>
 800a7be:	684b      	ldr	r3, [r1, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc05      	bgt.n	800a7d0 <__sflush_r+0x20>
 800a7c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	dc02      	bgt.n	800a7d0 <__sflush_r+0x20>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7d2:	2e00      	cmp	r6, #0
 800a7d4:	d0f9      	beq.n	800a7ca <__sflush_r+0x1a>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7dc:	682f      	ldr	r7, [r5, #0]
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	d032      	beq.n	800a848 <__sflush_r+0x98>
 800a7e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	075a      	lsls	r2, r3, #29
 800a7e8:	d505      	bpl.n	800a7f6 <__sflush_r+0x46>
 800a7ea:	6863      	ldr	r3, [r4, #4]
 800a7ec:	1ac0      	subs	r0, r0, r3
 800a7ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7f0:	b10b      	cbz	r3, 800a7f6 <__sflush_r+0x46>
 800a7f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7f4:	1ac0      	subs	r0, r0, r3
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b0      	blx	r6
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	d106      	bne.n	800a816 <__sflush_r+0x66>
 800a808:	6829      	ldr	r1, [r5, #0]
 800a80a:	291d      	cmp	r1, #29
 800a80c:	d82c      	bhi.n	800a868 <__sflush_r+0xb8>
 800a80e:	4a2a      	ldr	r2, [pc, #168]	; (800a8b8 <__sflush_r+0x108>)
 800a810:	40ca      	lsrs	r2, r1
 800a812:	07d6      	lsls	r6, r2, #31
 800a814:	d528      	bpl.n	800a868 <__sflush_r+0xb8>
 800a816:	2200      	movs	r2, #0
 800a818:	6062      	str	r2, [r4, #4]
 800a81a:	04d9      	lsls	r1, r3, #19
 800a81c:	6922      	ldr	r2, [r4, #16]
 800a81e:	6022      	str	r2, [r4, #0]
 800a820:	d504      	bpl.n	800a82c <__sflush_r+0x7c>
 800a822:	1c42      	adds	r2, r0, #1
 800a824:	d101      	bne.n	800a82a <__sflush_r+0x7a>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	b903      	cbnz	r3, 800a82c <__sflush_r+0x7c>
 800a82a:	6560      	str	r0, [r4, #84]	; 0x54
 800a82c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a82e:	602f      	str	r7, [r5, #0]
 800a830:	2900      	cmp	r1, #0
 800a832:	d0ca      	beq.n	800a7ca <__sflush_r+0x1a>
 800a834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a838:	4299      	cmp	r1, r3
 800a83a:	d002      	beq.n	800a842 <__sflush_r+0x92>
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7ff fae3 	bl	8009e08 <_free_r>
 800a842:	2000      	movs	r0, #0
 800a844:	6360      	str	r0, [r4, #52]	; 0x34
 800a846:	e7c1      	b.n	800a7cc <__sflush_r+0x1c>
 800a848:	6a21      	ldr	r1, [r4, #32]
 800a84a:	2301      	movs	r3, #1
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b0      	blx	r6
 800a850:	1c41      	adds	r1, r0, #1
 800a852:	d1c7      	bne.n	800a7e4 <__sflush_r+0x34>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0c4      	beq.n	800a7e4 <__sflush_r+0x34>
 800a85a:	2b1d      	cmp	r3, #29
 800a85c:	d001      	beq.n	800a862 <__sflush_r+0xb2>
 800a85e:	2b16      	cmp	r3, #22
 800a860:	d101      	bne.n	800a866 <__sflush_r+0xb6>
 800a862:	602f      	str	r7, [r5, #0]
 800a864:	e7b1      	b.n	800a7ca <__sflush_r+0x1a>
 800a866:	89a3      	ldrh	r3, [r4, #12]
 800a868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a86c:	81a3      	strh	r3, [r4, #12]
 800a86e:	e7ad      	b.n	800a7cc <__sflush_r+0x1c>
 800a870:	690f      	ldr	r7, [r1, #16]
 800a872:	2f00      	cmp	r7, #0
 800a874:	d0a9      	beq.n	800a7ca <__sflush_r+0x1a>
 800a876:	0793      	lsls	r3, r2, #30
 800a878:	680e      	ldr	r6, [r1, #0]
 800a87a:	bf08      	it	eq
 800a87c:	694b      	ldreq	r3, [r1, #20]
 800a87e:	600f      	str	r7, [r1, #0]
 800a880:	bf18      	it	ne
 800a882:	2300      	movne	r3, #0
 800a884:	eba6 0807 	sub.w	r8, r6, r7
 800a888:	608b      	str	r3, [r1, #8]
 800a88a:	f1b8 0f00 	cmp.w	r8, #0
 800a88e:	dd9c      	ble.n	800a7ca <__sflush_r+0x1a>
 800a890:	6a21      	ldr	r1, [r4, #32]
 800a892:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a894:	4643      	mov	r3, r8
 800a896:	463a      	mov	r2, r7
 800a898:	4628      	mov	r0, r5
 800a89a:	47b0      	blx	r6
 800a89c:	2800      	cmp	r0, #0
 800a89e:	dc06      	bgt.n	800a8ae <__sflush_r+0xfe>
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	e78e      	b.n	800a7cc <__sflush_r+0x1c>
 800a8ae:	4407      	add	r7, r0
 800a8b0:	eba8 0800 	sub.w	r8, r8, r0
 800a8b4:	e7e9      	b.n	800a88a <__sflush_r+0xda>
 800a8b6:	bf00      	nop
 800a8b8:	20400001 	.word	0x20400001

0800a8bc <_fflush_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	690b      	ldr	r3, [r1, #16]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	b913      	cbnz	r3, 800a8cc <_fflush_r+0x10>
 800a8c6:	2500      	movs	r5, #0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	b118      	cbz	r0, 800a8d6 <_fflush_r+0x1a>
 800a8ce:	6983      	ldr	r3, [r0, #24]
 800a8d0:	b90b      	cbnz	r3, 800a8d6 <_fflush_r+0x1a>
 800a8d2:	f000 f887 	bl	800a9e4 <__sinit>
 800a8d6:	4b14      	ldr	r3, [pc, #80]	; (800a928 <_fflush_r+0x6c>)
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	d11b      	bne.n	800a914 <_fflush_r+0x58>
 800a8dc:	686c      	ldr	r4, [r5, #4]
 800a8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ef      	beq.n	800a8c6 <_fflush_r+0xa>
 800a8e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8e8:	07d0      	lsls	r0, r2, #31
 800a8ea:	d404      	bmi.n	800a8f6 <_fflush_r+0x3a>
 800a8ec:	0599      	lsls	r1, r3, #22
 800a8ee:	d402      	bmi.n	800a8f6 <_fflush_r+0x3a>
 800a8f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f2:	f000 f915 	bl	800ab20 <__retarget_lock_acquire_recursive>
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	f7ff ff59 	bl	800a7b0 <__sflush_r>
 800a8fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a900:	07da      	lsls	r2, r3, #31
 800a902:	4605      	mov	r5, r0
 800a904:	d4e0      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a906:	89a3      	ldrh	r3, [r4, #12]
 800a908:	059b      	lsls	r3, r3, #22
 800a90a:	d4dd      	bmi.n	800a8c8 <_fflush_r+0xc>
 800a90c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90e:	f000 f908 	bl	800ab22 <__retarget_lock_release_recursive>
 800a912:	e7d9      	b.n	800a8c8 <_fflush_r+0xc>
 800a914:	4b05      	ldr	r3, [pc, #20]	; (800a92c <_fflush_r+0x70>)
 800a916:	429c      	cmp	r4, r3
 800a918:	d101      	bne.n	800a91e <_fflush_r+0x62>
 800a91a:	68ac      	ldr	r4, [r5, #8]
 800a91c:	e7df      	b.n	800a8de <_fflush_r+0x22>
 800a91e:	4b04      	ldr	r3, [pc, #16]	; (800a930 <_fflush_r+0x74>)
 800a920:	429c      	cmp	r4, r3
 800a922:	bf08      	it	eq
 800a924:	68ec      	ldreq	r4, [r5, #12]
 800a926:	e7da      	b.n	800a8de <_fflush_r+0x22>
 800a928:	0800b4ec 	.word	0x0800b4ec
 800a92c:	0800b50c 	.word	0x0800b50c
 800a930:	0800b4cc 	.word	0x0800b4cc

0800a934 <std>:
 800a934:	2300      	movs	r3, #0
 800a936:	b510      	push	{r4, lr}
 800a938:	4604      	mov	r4, r0
 800a93a:	e9c0 3300 	strd	r3, r3, [r0]
 800a93e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a942:	6083      	str	r3, [r0, #8]
 800a944:	8181      	strh	r1, [r0, #12]
 800a946:	6643      	str	r3, [r0, #100]	; 0x64
 800a948:	81c2      	strh	r2, [r0, #14]
 800a94a:	6183      	str	r3, [r0, #24]
 800a94c:	4619      	mov	r1, r3
 800a94e:	2208      	movs	r2, #8
 800a950:	305c      	adds	r0, #92	; 0x5c
 800a952:	f7fd fba7 	bl	80080a4 <memset>
 800a956:	4b05      	ldr	r3, [pc, #20]	; (800a96c <std+0x38>)
 800a958:	6263      	str	r3, [r4, #36]	; 0x24
 800a95a:	4b05      	ldr	r3, [pc, #20]	; (800a970 <std+0x3c>)
 800a95c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a95e:	4b05      	ldr	r3, [pc, #20]	; (800a974 <std+0x40>)
 800a960:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a962:	4b05      	ldr	r3, [pc, #20]	; (800a978 <std+0x44>)
 800a964:	6224      	str	r4, [r4, #32]
 800a966:	6323      	str	r3, [r4, #48]	; 0x30
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	bf00      	nop
 800a96c:	0800ac85 	.word	0x0800ac85
 800a970:	0800aca7 	.word	0x0800aca7
 800a974:	0800acdf 	.word	0x0800acdf
 800a978:	0800ad03 	.word	0x0800ad03

0800a97c <_cleanup_r>:
 800a97c:	4901      	ldr	r1, [pc, #4]	; (800a984 <_cleanup_r+0x8>)
 800a97e:	f000 b8af 	b.w	800aae0 <_fwalk_reent>
 800a982:	bf00      	nop
 800a984:	0800a8bd 	.word	0x0800a8bd

0800a988 <__sfmoreglue>:
 800a988:	b570      	push	{r4, r5, r6, lr}
 800a98a:	1e4a      	subs	r2, r1, #1
 800a98c:	2568      	movs	r5, #104	; 0x68
 800a98e:	4355      	muls	r5, r2
 800a990:	460e      	mov	r6, r1
 800a992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a996:	f7ff fa87 	bl	8009ea8 <_malloc_r>
 800a99a:	4604      	mov	r4, r0
 800a99c:	b140      	cbz	r0, 800a9b0 <__sfmoreglue+0x28>
 800a99e:	2100      	movs	r1, #0
 800a9a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a9a4:	300c      	adds	r0, #12
 800a9a6:	60a0      	str	r0, [r4, #8]
 800a9a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9ac:	f7fd fb7a 	bl	80080a4 <memset>
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	bd70      	pop	{r4, r5, r6, pc}

0800a9b4 <__sfp_lock_acquire>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__sfp_lock_acquire+0x8>)
 800a9b6:	f000 b8b3 	b.w	800ab20 <__retarget_lock_acquire_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	200004a0 	.word	0x200004a0

0800a9c0 <__sfp_lock_release>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__sfp_lock_release+0x8>)
 800a9c2:	f000 b8ae 	b.w	800ab22 <__retarget_lock_release_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	200004a0 	.word	0x200004a0

0800a9cc <__sinit_lock_acquire>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__sinit_lock_acquire+0x8>)
 800a9ce:	f000 b8a7 	b.w	800ab20 <__retarget_lock_acquire_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	2000049b 	.word	0x2000049b

0800a9d8 <__sinit_lock_release>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	; (800a9e0 <__sinit_lock_release+0x8>)
 800a9da:	f000 b8a2 	b.w	800ab22 <__retarget_lock_release_recursive>
 800a9de:	bf00      	nop
 800a9e0:	2000049b 	.word	0x2000049b

0800a9e4 <__sinit>:
 800a9e4:	b510      	push	{r4, lr}
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	f7ff fff0 	bl	800a9cc <__sinit_lock_acquire>
 800a9ec:	69a3      	ldr	r3, [r4, #24]
 800a9ee:	b11b      	cbz	r3, 800a9f8 <__sinit+0x14>
 800a9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9f4:	f7ff bff0 	b.w	800a9d8 <__sinit_lock_release>
 800a9f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a9fe:	4b13      	ldr	r3, [pc, #76]	; (800aa4c <__sinit+0x68>)
 800aa00:	4a13      	ldr	r2, [pc, #76]	; (800aa50 <__sinit+0x6c>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	bf04      	itt	eq
 800aa0a:	2301      	moveq	r3, #1
 800aa0c:	61a3      	streq	r3, [r4, #24]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 f820 	bl	800aa54 <__sfp>
 800aa14:	6060      	str	r0, [r4, #4]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f000 f81c 	bl	800aa54 <__sfp>
 800aa1c:	60a0      	str	r0, [r4, #8]
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 f818 	bl	800aa54 <__sfp>
 800aa24:	2200      	movs	r2, #0
 800aa26:	60e0      	str	r0, [r4, #12]
 800aa28:	2104      	movs	r1, #4
 800aa2a:	6860      	ldr	r0, [r4, #4]
 800aa2c:	f7ff ff82 	bl	800a934 <std>
 800aa30:	68a0      	ldr	r0, [r4, #8]
 800aa32:	2201      	movs	r2, #1
 800aa34:	2109      	movs	r1, #9
 800aa36:	f7ff ff7d 	bl	800a934 <std>
 800aa3a:	68e0      	ldr	r0, [r4, #12]
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	2112      	movs	r1, #18
 800aa40:	f7ff ff78 	bl	800a934 <std>
 800aa44:	2301      	movs	r3, #1
 800aa46:	61a3      	str	r3, [r4, #24]
 800aa48:	e7d2      	b.n	800a9f0 <__sinit+0xc>
 800aa4a:	bf00      	nop
 800aa4c:	0800b14c 	.word	0x0800b14c
 800aa50:	0800a97d 	.word	0x0800a97d

0800aa54 <__sfp>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	4607      	mov	r7, r0
 800aa58:	f7ff ffac 	bl	800a9b4 <__sfp_lock_acquire>
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <__sfp+0x84>)
 800aa5e:	681e      	ldr	r6, [r3, #0]
 800aa60:	69b3      	ldr	r3, [r6, #24]
 800aa62:	b913      	cbnz	r3, 800aa6a <__sfp+0x16>
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7ff ffbd 	bl	800a9e4 <__sinit>
 800aa6a:	3648      	adds	r6, #72	; 0x48
 800aa6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	d503      	bpl.n	800aa7c <__sfp+0x28>
 800aa74:	6833      	ldr	r3, [r6, #0]
 800aa76:	b30b      	cbz	r3, 800aabc <__sfp+0x68>
 800aa78:	6836      	ldr	r6, [r6, #0]
 800aa7a:	e7f7      	b.n	800aa6c <__sfp+0x18>
 800aa7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa80:	b9d5      	cbnz	r5, 800aab8 <__sfp+0x64>
 800aa82:	4b16      	ldr	r3, [pc, #88]	; (800aadc <__sfp+0x88>)
 800aa84:	60e3      	str	r3, [r4, #12]
 800aa86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa8a:	6665      	str	r5, [r4, #100]	; 0x64
 800aa8c:	f000 f847 	bl	800ab1e <__retarget_lock_init_recursive>
 800aa90:	f7ff ff96 	bl	800a9c0 <__sfp_lock_release>
 800aa94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa9c:	6025      	str	r5, [r4, #0]
 800aa9e:	61a5      	str	r5, [r4, #24]
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aaa8:	f7fd fafc 	bl	80080a4 <memset>
 800aaac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aab4:	4620      	mov	r0, r4
 800aab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab8:	3468      	adds	r4, #104	; 0x68
 800aaba:	e7d9      	b.n	800aa70 <__sfp+0x1c>
 800aabc:	2104      	movs	r1, #4
 800aabe:	4638      	mov	r0, r7
 800aac0:	f7ff ff62 	bl	800a988 <__sfmoreglue>
 800aac4:	4604      	mov	r4, r0
 800aac6:	6030      	str	r0, [r6, #0]
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d1d5      	bne.n	800aa78 <__sfp+0x24>
 800aacc:	f7ff ff78 	bl	800a9c0 <__sfp_lock_release>
 800aad0:	230c      	movs	r3, #12
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	e7ee      	b.n	800aab4 <__sfp+0x60>
 800aad6:	bf00      	nop
 800aad8:	0800b14c 	.word	0x0800b14c
 800aadc:	ffff0001 	.word	0xffff0001

0800aae0 <_fwalk_reent>:
 800aae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae4:	4606      	mov	r6, r0
 800aae6:	4688      	mov	r8, r1
 800aae8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aaec:	2700      	movs	r7, #0
 800aaee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaf2:	f1b9 0901 	subs.w	r9, r9, #1
 800aaf6:	d505      	bpl.n	800ab04 <_fwalk_reent+0x24>
 800aaf8:	6824      	ldr	r4, [r4, #0]
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	d1f7      	bne.n	800aaee <_fwalk_reent+0xe>
 800aafe:	4638      	mov	r0, r7
 800ab00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab04:	89ab      	ldrh	r3, [r5, #12]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d907      	bls.n	800ab1a <_fwalk_reent+0x3a>
 800ab0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	d003      	beq.n	800ab1a <_fwalk_reent+0x3a>
 800ab12:	4629      	mov	r1, r5
 800ab14:	4630      	mov	r0, r6
 800ab16:	47c0      	blx	r8
 800ab18:	4307      	orrs	r7, r0
 800ab1a:	3568      	adds	r5, #104	; 0x68
 800ab1c:	e7e9      	b.n	800aaf2 <_fwalk_reent+0x12>

0800ab1e <__retarget_lock_init_recursive>:
 800ab1e:	4770      	bx	lr

0800ab20 <__retarget_lock_acquire_recursive>:
 800ab20:	4770      	bx	lr

0800ab22 <__retarget_lock_release_recursive>:
 800ab22:	4770      	bx	lr

0800ab24 <__swhatbuf_r>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	460e      	mov	r6, r1
 800ab28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	b096      	sub	sp, #88	; 0x58
 800ab30:	4614      	mov	r4, r2
 800ab32:	461d      	mov	r5, r3
 800ab34:	da07      	bge.n	800ab46 <__swhatbuf_r+0x22>
 800ab36:	2300      	movs	r3, #0
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	89b3      	ldrh	r3, [r6, #12]
 800ab3c:	061a      	lsls	r2, r3, #24
 800ab3e:	d410      	bmi.n	800ab62 <__swhatbuf_r+0x3e>
 800ab40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab44:	e00e      	b.n	800ab64 <__swhatbuf_r+0x40>
 800ab46:	466a      	mov	r2, sp
 800ab48:	f000 f902 	bl	800ad50 <_fstat_r>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	dbf2      	blt.n	800ab36 <__swhatbuf_r+0x12>
 800ab50:	9a01      	ldr	r2, [sp, #4]
 800ab52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab5a:	425a      	negs	r2, r3
 800ab5c:	415a      	adcs	r2, r3
 800ab5e:	602a      	str	r2, [r5, #0]
 800ab60:	e7ee      	b.n	800ab40 <__swhatbuf_r+0x1c>
 800ab62:	2340      	movs	r3, #64	; 0x40
 800ab64:	2000      	movs	r0, #0
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	b016      	add	sp, #88	; 0x58
 800ab6a:	bd70      	pop	{r4, r5, r6, pc}

0800ab6c <__smakebuf_r>:
 800ab6c:	898b      	ldrh	r3, [r1, #12]
 800ab6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab70:	079d      	lsls	r5, r3, #30
 800ab72:	4606      	mov	r6, r0
 800ab74:	460c      	mov	r4, r1
 800ab76:	d507      	bpl.n	800ab88 <__smakebuf_r+0x1c>
 800ab78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	6123      	str	r3, [r4, #16]
 800ab80:	2301      	movs	r3, #1
 800ab82:	6163      	str	r3, [r4, #20]
 800ab84:	b002      	add	sp, #8
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	ab01      	add	r3, sp, #4
 800ab8a:	466a      	mov	r2, sp
 800ab8c:	f7ff ffca 	bl	800ab24 <__swhatbuf_r>
 800ab90:	9900      	ldr	r1, [sp, #0]
 800ab92:	4605      	mov	r5, r0
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff f987 	bl	8009ea8 <_malloc_r>
 800ab9a:	b948      	cbnz	r0, 800abb0 <__smakebuf_r+0x44>
 800ab9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba0:	059a      	lsls	r2, r3, #22
 800aba2:	d4ef      	bmi.n	800ab84 <__smakebuf_r+0x18>
 800aba4:	f023 0303 	bic.w	r3, r3, #3
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	e7e3      	b.n	800ab78 <__smakebuf_r+0xc>
 800abb0:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <__smakebuf_r+0x7c>)
 800abb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	6020      	str	r0, [r4, #0]
 800abb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	9b00      	ldr	r3, [sp, #0]
 800abc0:	6163      	str	r3, [r4, #20]
 800abc2:	9b01      	ldr	r3, [sp, #4]
 800abc4:	6120      	str	r0, [r4, #16]
 800abc6:	b15b      	cbz	r3, 800abe0 <__smakebuf_r+0x74>
 800abc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f8d1 	bl	800ad74 <_isatty_r>
 800abd2:	b128      	cbz	r0, 800abe0 <__smakebuf_r+0x74>
 800abd4:	89a3      	ldrh	r3, [r4, #12]
 800abd6:	f023 0303 	bic.w	r3, r3, #3
 800abda:	f043 0301 	orr.w	r3, r3, #1
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	89a0      	ldrh	r0, [r4, #12]
 800abe2:	4305      	orrs	r5, r0
 800abe4:	81a5      	strh	r5, [r4, #12]
 800abe6:	e7cd      	b.n	800ab84 <__smakebuf_r+0x18>
 800abe8:	0800a97d 	.word	0x0800a97d

0800abec <_malloc_usable_size_r>:
 800abec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf0:	1f18      	subs	r0, r3, #4
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	bfbc      	itt	lt
 800abf6:	580b      	ldrlt	r3, [r1, r0]
 800abf8:	18c0      	addlt	r0, r0, r3
 800abfa:	4770      	bx	lr

0800abfc <_raise_r>:
 800abfc:	291f      	cmp	r1, #31
 800abfe:	b538      	push	{r3, r4, r5, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	d904      	bls.n	800ac10 <_raise_r+0x14>
 800ac06:	2316      	movs	r3, #22
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac12:	b112      	cbz	r2, 800ac1a <_raise_r+0x1e>
 800ac14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac18:	b94b      	cbnz	r3, 800ac2e <_raise_r+0x32>
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 f830 	bl	800ac80 <_getpid_r>
 800ac20:	462a      	mov	r2, r5
 800ac22:	4601      	mov	r1, r0
 800ac24:	4620      	mov	r0, r4
 800ac26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac2a:	f000 b817 	b.w	800ac5c <_kill_r>
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d00a      	beq.n	800ac48 <_raise_r+0x4c>
 800ac32:	1c59      	adds	r1, r3, #1
 800ac34:	d103      	bne.n	800ac3e <_raise_r+0x42>
 800ac36:	2316      	movs	r3, #22
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e7e7      	b.n	800ac0e <_raise_r+0x12>
 800ac3e:	2400      	movs	r4, #0
 800ac40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac44:	4628      	mov	r0, r5
 800ac46:	4798      	blx	r3
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e7e0      	b.n	800ac0e <_raise_r+0x12>

0800ac4c <raise>:
 800ac4c:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <raise+0xc>)
 800ac4e:	4601      	mov	r1, r0
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	f7ff bfd3 	b.w	800abfc <_raise_r>
 800ac56:	bf00      	nop
 800ac58:	20000010 	.word	0x20000010

0800ac5c <_kill_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d07      	ldr	r5, [pc, #28]	; (800ac7c <_kill_r+0x20>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	4611      	mov	r1, r2
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	f7f9 f85b 	bl	8003d24 <_kill>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	d102      	bne.n	800ac78 <_kill_r+0x1c>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	b103      	cbz	r3, 800ac78 <_kill_r+0x1c>
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000494 	.word	0x20000494

0800ac80 <_getpid_r>:
 800ac80:	f7f9 b848 	b.w	8003d14 <_getpid>

0800ac84 <__sread>:
 800ac84:	b510      	push	{r4, lr}
 800ac86:	460c      	mov	r4, r1
 800ac88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac8c:	f000 f894 	bl	800adb8 <_read_r>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	bfab      	itete	ge
 800ac94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac96:	89a3      	ldrhlt	r3, [r4, #12]
 800ac98:	181b      	addge	r3, r3, r0
 800ac9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac9e:	bfac      	ite	ge
 800aca0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aca2:	81a3      	strhlt	r3, [r4, #12]
 800aca4:	bd10      	pop	{r4, pc}

0800aca6 <__swrite>:
 800aca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acaa:	461f      	mov	r7, r3
 800acac:	898b      	ldrh	r3, [r1, #12]
 800acae:	05db      	lsls	r3, r3, #23
 800acb0:	4605      	mov	r5, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	4616      	mov	r6, r2
 800acb6:	d505      	bpl.n	800acc4 <__swrite+0x1e>
 800acb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acbc:	2302      	movs	r3, #2
 800acbe:	2200      	movs	r2, #0
 800acc0:	f000 f868 	bl	800ad94 <_lseek_r>
 800acc4:	89a3      	ldrh	r3, [r4, #12]
 800acc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acce:	81a3      	strh	r3, [r4, #12]
 800acd0:	4632      	mov	r2, r6
 800acd2:	463b      	mov	r3, r7
 800acd4:	4628      	mov	r0, r5
 800acd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acda:	f000 b817 	b.w	800ad0c <_write_r>

0800acde <__sseek>:
 800acde:	b510      	push	{r4, lr}
 800ace0:	460c      	mov	r4, r1
 800ace2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace6:	f000 f855 	bl	800ad94 <_lseek_r>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	bf15      	itete	ne
 800acf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800acf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acfa:	81a3      	strheq	r3, [r4, #12]
 800acfc:	bf18      	it	ne
 800acfe:	81a3      	strhne	r3, [r4, #12]
 800ad00:	bd10      	pop	{r4, pc}

0800ad02 <__sclose>:
 800ad02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad06:	f000 b813 	b.w	800ad30 <_close_r>
	...

0800ad0c <_write_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d07      	ldr	r5, [pc, #28]	; (800ad2c <_write_r+0x20>)
 800ad10:	4604      	mov	r4, r0
 800ad12:	4608      	mov	r0, r1
 800ad14:	4611      	mov	r1, r2
 800ad16:	2200      	movs	r2, #0
 800ad18:	602a      	str	r2, [r5, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	f7f9 f839 	bl	8003d92 <_write>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d102      	bne.n	800ad2a <_write_r+0x1e>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	b103      	cbz	r3, 800ad2a <_write_r+0x1e>
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
 800ad2c:	20000494 	.word	0x20000494

0800ad30 <_close_r>:
 800ad30:	b538      	push	{r3, r4, r5, lr}
 800ad32:	4d06      	ldr	r5, [pc, #24]	; (800ad4c <_close_r+0x1c>)
 800ad34:	2300      	movs	r3, #0
 800ad36:	4604      	mov	r4, r0
 800ad38:	4608      	mov	r0, r1
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7f9 f845 	bl	8003dca <_close>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d102      	bne.n	800ad4a <_close_r+0x1a>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	b103      	cbz	r3, 800ad4a <_close_r+0x1a>
 800ad48:	6023      	str	r3, [r4, #0]
 800ad4a:	bd38      	pop	{r3, r4, r5, pc}
 800ad4c:	20000494 	.word	0x20000494

0800ad50 <_fstat_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4d07      	ldr	r5, [pc, #28]	; (800ad70 <_fstat_r+0x20>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4604      	mov	r4, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	f7f9 f840 	bl	8003de2 <_fstat>
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	d102      	bne.n	800ad6c <_fstat_r+0x1c>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	b103      	cbz	r3, 800ad6c <_fstat_r+0x1c>
 800ad6a:	6023      	str	r3, [r4, #0]
 800ad6c:	bd38      	pop	{r3, r4, r5, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000494 	.word	0x20000494

0800ad74 <_isatty_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d06      	ldr	r5, [pc, #24]	; (800ad90 <_isatty_r+0x1c>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f9 f83f 	bl	8003e02 <_isatty>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_isatty_r+0x1a>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_isatty_r+0x1a>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20000494 	.word	0x20000494

0800ad94 <_lseek_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d07      	ldr	r5, [pc, #28]	; (800adb4 <_lseek_r+0x20>)
 800ad98:	4604      	mov	r4, r0
 800ad9a:	4608      	mov	r0, r1
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	602a      	str	r2, [r5, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f7f9 f838 	bl	8003e18 <_lseek>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <_lseek_r+0x1e>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	b103      	cbz	r3, 800adb2 <_lseek_r+0x1e>
 800adb0:	6023      	str	r3, [r4, #0]
 800adb2:	bd38      	pop	{r3, r4, r5, pc}
 800adb4:	20000494 	.word	0x20000494

0800adb8 <_read_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	4d07      	ldr	r5, [pc, #28]	; (800add8 <_read_r+0x20>)
 800adbc:	4604      	mov	r4, r0
 800adbe:	4608      	mov	r0, r1
 800adc0:	4611      	mov	r1, r2
 800adc2:	2200      	movs	r2, #0
 800adc4:	602a      	str	r2, [r5, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	f7f8 ffc6 	bl	8003d58 <_read>
 800adcc:	1c43      	adds	r3, r0, #1
 800adce:	d102      	bne.n	800add6 <_read_r+0x1e>
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	b103      	cbz	r3, 800add6 <_read_r+0x1e>
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	bd38      	pop	{r3, r4, r5, pc}
 800add8:	20000494 	.word	0x20000494

0800addc <_init>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	bf00      	nop
 800ade0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ade2:	bc08      	pop	{r3}
 800ade4:	469e      	mov	lr, r3
 800ade6:	4770      	bx	lr

0800ade8 <_fini>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr
